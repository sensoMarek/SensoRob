/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-01-28 16:42:04.779123
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[1]);
x5=IKsin(j[2]);
x6=IKcos(j[2]);
x7=IKsin(j[1]);
x8=IKcos(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKsin(j[5]);
x12=((1.0)*x9);
x13=((0.03868)*x5);
x14=((0.22175)*x2);
x15=((0.03868)*x3);
x16=((1.0)*x10);
x17=((0.03868)*x6);
x18=((0.39225)*x5);
x19=((1.0)*x2);
x20=((1.0)*x0);
x21=((1.0)*x5);
x22=((0.22175)*x5);
x23=(x6*x7);
x24=(x1*x7);
x25=(x0*x4);
x26=(x5*x7);
x27=(x4*x6);
x28=(x1*x4);
x29=(x0*x7);
x30=(x3*x9);
x31=(x1*x19);
x32=(x0*x19);
x33=((1.0)*x23);
x34=((((-1.0)*x33))+((x4*x5)));
x35=(x26+x27);
x36=((((-1.0)*x21*x4))+x33);
x37=(x2*x34);
x38=(x3*x36);
x39=(((x25*x5))+(((-1.0)*x20*x23)));
x40=(((x1*x27))+((x24*x5)));
x41=((((-1.0)*x21*x28))+((x1*x23)));
x42=(x20*(((((-1.0)*x26))+(((-1.0)*x27)))));
x43=(x3*x40);
x44=(x3*x42);
x45=(((x0*x3))+((x2*x40)));
x46=((((-1.0)*x43))+x32);
x47=(((x1*x3))+((x2*x42)));
x48=((((-1.0)*x44))+x31);
eerot[0]=(((x47*x8))+((x11*((((x10*x48))+((x39*x9)))))));
eerot[1]=(((x11*x47))+((x8*(((((-1.0)*x12*x39))+(((-1.0)*x16*x48)))))));
eerot[2]=(((x10*x39))+((x9*(((((-1.0)*x31))+x44)))));
IkReal x49=(x0*x23);
IkReal x50=((1.0)*x1);
eetrans[0]=((0.06828)+((x18*x25))+((x10*(((((-0.22175)*x49))+((x22*x25))))))+(((-1.0)*x15*x50))+(((-0.425001)*x29))+((x2*((((x17*x25))+((x13*x29))))))+((x9*(((((-1.0)*x14*x50))+(((0.22175)*x44))))))+(((-0.39225)*x49))+(((-0.032446)*x1)));
eerot[3]=(((x11*((((x10*x46))+((x41*x9))))))+((x45*x8)));
eerot[4]=(((x8*(((((-1.0)*x12*x41))+(((-1.0)*x16*x46))))))+((x11*x45)));
eerot[5]=(((x10*x41))+((x9*(((((-1.0)*x32))+x43)))));
IkReal x51=(x1*x23);
IkReal x52=((1.0)*x28);
IkReal x53=((1.0)*x0);
eetrans[1]=((0.001091)+((x10*(((((0.22175)*x51))+(((-1.0)*x22*x52))))))+(((-1.0)*x15*x53))+(((0.425001)*x24))+(((-1.0)*x18*x52))+((x9*(((((-1.0)*x14*x53))+(((0.22175)*x43))))))+((x2*(((((-1.0)*x17*x52))+(((-1.0)*x13*x24))))))+(((0.39225)*x51))+(((-0.032446)*x0)));
eerot[6]=(((x37*x8))+((x11*((((x10*x38))+((x35*x9)))))));
eerot[7]=(((x8*(((((-1.0)*x12*x35))+(((-1.0)*x16*x38))))))+((x11*x37)));
eerot[8]=(((x10*x35))+((x30*x34)));
eetrans[2]=((0.187444)+((x18*x7))+((x2*((((x17*x7))+(((-1.0)*x13*x4))))))+((x30*(((((-0.22175)*x23))+((x22*x4))))))+((x10*((((x22*x7))+(((0.22175)*x27))))))+(((0.425001)*x4))+(((0.39225)*x27)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((-0.06828)+px+(((-0.22175)*r02)));
new_r10=r10;
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((-0.001091)+(((-0.22175)*r12))+py);
new_r20=r20;
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((-0.187444)+(((-0.22175)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x57=((0.06575615472)*npy);
IkReal x58=((0.03287807736)*npx);
IkReal x59=((0.3334132845)*npz);
IkReal x60=((0.425001)*pp);
IkReal x61=((0.032446)*r12);
IkReal x62=((0.03868)*r21);
IkReal x63=((0.032446)*r02);
IkReal x64=((0.07736)*r20);
IkReal x65=((0.666826569)*npy);
IkReal x66=((1.333653138)*npx);
IkReal x67=((2.0)*rxp1_2);
IkReal x68=((0.07736)*r22);
IkReal x69=((0.064892)*r11);
IkReal x70=((4.0)*rxp0_2);
IkReal x71=((0.129784)*r10);
IkReal x72=((0.064892)*r01);
IkReal x73=((1.0)*rxp2_2);
IkReal x74=((-0.666826569)*npy);
IkReal x75=((-0.064892)*r01);
IkReal x76=((-0.129784)*r00);
IkReal x77=((-0.032446)*r02);
IkReal x78=((-0.07736)*r20);
IkReal x79=((0.011187041229613)+x59);
IkReal x80=(x61+x62);
IkReal x81=(x59+x60);
IkReal x82=(x68+x69);
IkReal x83=((0.011187041229613)+(((-1.0)*x81))+(((-1.0)*x58)));
IkReal x84=((0.011187041229613)+x58+(((-1.0)*x81)));
IkReal x85=(x79+(((-1.0)*x60))+(((-1.0)*x58)));
IkReal x86=(x79+x58+(((-1.0)*x60)));
op[0]=x83;
op[1]=x83;
op[2]=x57;
op[3]=x57;
op[4]=x84;
op[5]=x84;
op[6]=(rxp2_2+x62+(((-1.0)*x61)));
op[7]=x63;
op[8]=x64;
op[9]=0;
op[10]=(rxp2_2+(((-1.0)*x80)));
op[11]=x63;
op[12]=x63;
op[13]=(rxp2_2+x80);
op[14]=0;
op[15]=x64;
op[16]=x63;
op[17]=(rxp2_2+x61+(((-1.0)*x62)));
op[18]=0;
op[19]=x83;
op[20]=0;
op[21]=x57;
op[22]=0;
op[23]=x84;
op[24]=x65;
op[25]=x65;
op[26]=x66;
op[27]=x66;
op[28]=x74;
op[29]=x74;
op[30]=(x82+(((-1.0)*x67)));
op[31]=x75;
op[32]=((((-1.0)*x70))+x71);
op[33]=x76;
op[34]=(x67+x68+(((-1.0)*x69)));
op[35]=x72;
op[36]=x75;
op[37]=(x68+(((-1.0)*x69))+(((-1.0)*x67)));
op[38]=x76;
op[39]=((((-1.0)*x71))+(((-1.0)*x70)));
op[40]=x72;
op[41]=(x67+x82);
op[42]=0;
op[43]=x65;
op[44]=0;
op[45]=x66;
op[46]=0;
op[47]=x74;
op[48]=x85;
op[49]=x85;
op[50]=x57;
op[51]=x57;
op[52]=x86;
op[53]=x86;
op[54]=((((-1.0)*x73))+x61+(((-1.0)*x62)));
op[55]=x77;
op[56]=x78;
op[57]=0;
op[58]=((((-1.0)*x73))+x80);
op[59]=x77;
op[60]=x77;
op[61]=((((-1.0)*x73))+(((-1.0)*x80)));
op[62]=0;
op[63]=x78;
op[64]=x77;
op[65]=((((-1.0)*x73))+x62+(((-1.0)*x61)));
op[66]=0;
op[67]=x85;
op[68]=0;
op[69]=x57;
op[70]=0;
op[71]=x86;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x87=htj4*htj4;
CheckValue<IkReal> x88=IKPowWithIntegerCheck(((1.0)+x87),-1);
if(!x88.valid){
continue;
}
cj4array[numsolutions]=((x88.value)*(((1.0)+(((-1.0)*x87)))));
CheckValue<IkReal> x89=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x89.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x89.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x90=htj5*htj5;
CheckValue<IkReal> x91=IKPowWithIntegerCheck(((1.0)+x90),-1);
if(!x91.valid){
continue;
}
cj5array[numsolutions]=((x91.value)*(((1.0)+(((-1.0)*x90)))));
CheckValue<IkReal> x92=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x92.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x92.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x93=htj0*htj0;
CheckValue<IkReal> x94=IKPowWithIntegerCheck(((1.0)+x93),-1);
if(!x94.valid){
continue;
}
cj0array[numsolutions]=((x94.value)*(((1.0)+(((-1.0)*x93)))));
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x95.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x95.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x96=(cj0*sj5);
IkReal x97=(cj0*cj5);
IkReal x98=(((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*cj4*r12)));
j3eval[0]=x98;
j3eval[1]=IKsign(x98);
j3eval[2]=((IKabs((((r21*x96))+(((-1.0)*r20*x97)))))+(IKabs((((cj4*r21*x97))+((cj4*r20*x96))+((cj0*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x99=(r20*sj0);
IkReal x100=((1.0)*sj4);
IkReal x101=(r21*sj0);
IkReal x102=((((-1.0)*cj5*r01*x100))+(((-1.0)*r00*sj5*x100))+((cj4*r02)));
j3eval[0]=x102;
j3eval[1]=IKsign(x102);
j3eval[2]=((IKabs((((r22*sj0*sj4))+((cj4*sj5*x99))+((cj4*cj5*x101)))))+(IKabs((((sj5*x101))+(((-1.0)*cj5*x99))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x103=((1.0)*sj4);
IkReal x104=((((-1.0)*cj5*r21*x103))+((cj4*r22))+(((-1.0)*r20*sj5*x103)));
j3eval[0]=x104;
j3eval[1]=IKsign(x104);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x105=(((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*cj4*r12)));
j3eval[0]=x105;
j3eval[1]=((IKabs((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*r20))))));
j3eval[2]=IKsign(x105);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x106=((1.0)*sj4);
IkReal x107=((((-1.0)*cj5*r21*x106))+((cj4*r22))+(((-1.0)*r20*sj5*x106)));
j3eval[0]=x107;
j3eval[1]=IKsign(x107);
j3eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs((((cj4*cj5*r11))+((r12*sj4))+((cj4*r10*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x108=cj4*cj4;
IkReal x109=r00*r00;
IkReal x110=cj5*cj5;
IkReal x111=r01*r01;
IkReal x112=r02*r02;
IkReal x113=(r00*sj5);
IkReal x114=((2.0)*cj5*r01);
IkReal x115=(cj4*r02*sj4);
IkReal x116=((1.0)*x110);
IkReal x117=(x108*x109);
IkReal x118=((((-1.0)*x111*x116))+(((-1.0)*x108*x112))+((x114*x115))+(((-1.0)*x116*x117))+(((-1.0)*x113*x114))+((x108*x110*x111))+(((2.0)*x113*x115))+((x109*x110))+x112+x111+x117+((x108*x113*x114)));
j3eval[0]=x118;
j3eval[1]=((IKabs(((((-1.0)*r01*sj5))+((cj5*r00)))))+(IKabs((((r02*sj4))+((cj4*cj5*r01))+((cj4*x113))))));
j3eval[2]=IKsign(x118);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x119=cj4*cj4;
IkReal x120=r00*r00;
IkReal x121=cj5*cj5;
IkReal x122=r01*r01;
IkReal x123=r02*r02;
IkReal x124=(r00*sj5);
IkReal x125=((2.0)*cj5*r01);
IkReal x126=(cj4*r02*sj4);
IkReal x127=(x119*x121);
CheckValue<IkReal> x128=IKPowWithIntegerCheck(IKsign((((x122*x127))+x122+x123+(((-1.0)*x124*x125))+((x125*x126))+((x120*x121))+((x119*x124*x125))+(((2.0)*x124*x126))+(((-1.0)*x121*x122))+(((-1.0)*x120*x127))+((x119*x120))+(((-1.0)*x119*x123)))),-1);
if(!x128.valid){
continue;
}
CheckValue<IkReal> x129 = IKatan2WithCheck(IkReal((((r02*sj4))+((cj4*cj5*r01))+((cj4*x124)))),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x129.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x128.value)))+(x129.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x130=IKcos(j3);
IkReal x131=IKsin(j3);
IkReal x132=((1.0)*cj5);
IkReal x133=(r01*sj5);
IkReal x134=((1.0)*sj5);
IkReal x135=(r00*x131);
IkReal x136=(cj4*x131);
IkReal x137=(r00*x130);
IkReal x138=(sj5*x130);
IkReal x139=((1.0)*sj4*x131);
evalcond[0]=(((cj4*cj5*r01*x130))+((cj4*sj5*x137))+((r02*sj4*x130))+((x131*x133))+(((-1.0)*x132*x135)));
evalcond[1]=(((r21*x138))+(((-1.0)*r21*x132*x136))+(((-1.0)*r20*x134*x136))+(((-1.0)*r22*x139))+(((-1.0)*r20*x130*x132)));
evalcond[2]=((((-1.0)*r12*x139))+((r11*x138))+(((-1.0)*r11*x132*x136))+(((-1.0)*r10*x134*x136))+(((-1.0)*r10*x130*x132)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x134*x135))+(((-1.0)*r02*x139))+(((-1.0)*x132*x137))+((x130*x133))+(((-1.0)*r01*x132*x136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x140=((0.9229390048494)*cj4);
IkReal x141=((0.9229390048494)*sj4);
IkReal x142=((0.0910115505610575)*cj5);
IkReal x143=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x141))+(((-1.0)*r11*x143))+((r10*x142))+((r12*x140))+(((-1.0)*r10*sj5*x141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x141))+((r20*x142))+(((-1.0)*cj5*r21*x141))+(((-1.0)*r21*x143))+((r22*x140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x141))+(((-1.0)*r11*x143))+((r10*x142))+((r12*x140))+(((-1.0)*r10*sj5*x141))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x141))+((r20*x142))+(((-1.0)*cj5*r21*x141))+(((-1.0)*r21*x143))+((r22*x140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x141))+(((-1.0)*r11*x143))+((r10*x142))+((r12*x140))+(((-1.0)*r10*sj5*x141))), ((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x141))+((r20*x142))+(((-1.0)*cj5*r21*x141))+(((-1.0)*r21*x143))+((r22*x140))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x144=((0.39225)*r10);
IkReal x145=(sj4*sj5);
IkReal x146=(cj5*sj3);
IkReal x147=((0.39225)*r11);
IkReal x148=(sj3*sj5);
IkReal x149=(cj3*cj4);
IkReal x150=((0.03868)*sj5);
IkReal x151=((0.39225)*r21);
IkReal x152=((0.03868)*cj5);
IkReal x153=((0.39225)*cj4);
IkReal x154=((0.39225)*r20);
IkReal x155=(cj5*sj4);
IkReal x156=(r10*x152);
IkReal x157=(r11*x150);
IkReal x158=((0.425001)*(IKsin(j1)));
IkReal x159=(r21*x150);
IkReal x160=((0.425001)*(IKcos(j1)));
IkReal x161=(r20*x152);
IkReal x162=((0.39225)*cj3*sj4);
IkReal x163=(x156+py);
IkReal x164=(x157+x158);
IkReal x165=(x160+x159);
evalcond[0]=((((-1.0)*x164))+(((-1.0)*x144*x145))+x163+(((-1.0)*x147*x155))+((r12*x153)));
evalcond[1]=((((-1.0)*x165))+(((-1.0)*x151*x155))+x161+pz+(((-1.0)*x145*x154))+((r22*x153)));
evalcond[2]=((((-1.0)*sj5*x149*x154))+(((-1.0)*r22*x162))+(((-1.0)*x164))+(((-1.0)*cj5*x149*x151))+x163+((x146*x154))+(((-1.0)*x148*x151)));
evalcond[3]=((((-1.0)*r12*x162))+(((-1.0)*x161))+(((-1.0)*sj5*x144*x149))+((x144*x146))+x165+(((-1.0)*pz))+(((-1.0)*x147*x148))+(((-1.0)*cj5*x147*x149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x166=(cj1*cj4);
IkReal x167=((1.0)*r22);
IkReal x168=(cj4*sj1);
IkReal x169=(sj4*sj5);
IkReal x170=(cj1*cj5*sj4);
IkReal x171=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*cj1*r10*x169))+((r20*sj1*x169))+((r21*x171))+((r12*x166))+(((-1.0)*x167*x168))+(((-1.0)*r11*x170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x166*x167))+((cj1*r20*x169))+((r10*sj1*x169))+((r21*x170))+(((-1.0)*r12*x168))+((r11*x171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r10*x169))+((r20*sj1*x169))+((r21*x171))+((r12*x166))+(((-1.0)*x167*x168))+(((-1.0)*r11*x170))))+IKsqr(((((-1.0)*x166*x167))+((cj1*r20*x169))+((r10*sj1*x169))+((r21*x170))+(((-1.0)*r12*x168))+((r11*x171))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r10*x169))+((r20*sj1*x169))+((r21*x171))+((r12*x166))+(((-1.0)*x167*x168))+(((-1.0)*r11*x170))), ((((-1.0)*x166*x167))+((cj1*r20*x169))+((r10*sj1*x169))+((r21*x170))+(((-1.0)*r12*x168))+((r11*x171))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x172=IKcos(j2);
IkReal x173=IKsin(j2);
IkReal x174=(cj3*cj4);
IkReal x175=(cj5*r21);
IkReal x176=(sj3*sj5);
IkReal x177=(r10*sj5);
IkReal x178=((1.0)*sj4);
IkReal x179=(cj3*sj4);
IkReal x180=(cj5*r11);
IkReal x181=((0.03868)*cj5);
IkReal x182=(r20*sj5);
IkReal x183=((0.03868)*sj5);
IkReal x184=(cj1*x172);
IkReal x185=(sj1*x173);
IkReal x186=((1.0)*cj5*sj3);
IkReal x187=(cj1*x173);
IkReal x188=(sj1*x172);
IkReal x189=(x184+x185);
evalcond[0]=((((-1.0)*x175*x178))+(((-1.0)*x178*x182))+((cj4*r22))+x189);
evalcond[1]=((((-1.0)*x178*x180))+(((-1.0)*x177*x178))+(((-1.0)*x187))+x188+((cj4*r12)));
evalcond[2]=((((0.39225)*x184))+(((0.39225)*x185))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x183))+(((-1.0)*r20*x181)));
evalcond[3]=((((-0.39225)*x187))+(((0.39225)*x188))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x181))+((r11*x183)));
evalcond[4]=(((x174*x180))+x189+((x174*x177))+(((-1.0)*r10*x186))+((r12*x179))+((r11*x176)));
evalcond[5]=(((r22*x179))+((x174*x182))+(((-1.0)*x188))+x187+((x174*x175))+((r21*x176))+(((-1.0)*r20*x186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x190=((1.0)*sj4);
CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal((((cj4*cj5*r11))+((r12*sj4))+((cj4*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x191.valid){
continue;
}
CheckValue<IkReal> x192=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*cj5*r21*x190))+(((-1.0)*r20*sj5*x190)))),-1);
if(!x192.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x191.value)+(((1.5707963267949)*(x192.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x193=IKcos(j3);
IkReal x194=IKsin(j3);
IkReal x195=((1.0)*cj5);
IkReal x196=(r01*sj5);
IkReal x197=((1.0)*sj5);
IkReal x198=(r00*x194);
IkReal x199=(cj4*x194);
IkReal x200=(r00*x193);
IkReal x201=(sj5*x193);
IkReal x202=((1.0)*sj4*x194);
evalcond[0]=((((-1.0)*x195*x198))+((x194*x196))+((r02*sj4*x193))+((cj4*sj5*x200))+((cj4*cj5*r01*x193)));
evalcond[1]=((((-1.0)*r22*x202))+(((-1.0)*r20*x197*x199))+(((-1.0)*r20*x193*x195))+(((-1.0)*r21*x195*x199))+((r21*x201)));
evalcond[2]=((((-1.0)*r12*x202))+((r11*x201))+(((-1.0)*r10*x193*x195))+(((-1.0)*r11*x195*x199))+(((-1.0)*r10*x197*x199)));
evalcond[3]=((1.0)+(((-1.0)*x195*x200))+((x193*x196))+(((-1.0)*r02*x202))+(((-1.0)*cj4*x197*x198))+(((-1.0)*r01*x195*x199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x203=((0.9229390048494)*cj4);
IkReal x204=((0.9229390048494)*sj4);
IkReal x205=((0.0910115505610575)*cj5);
IkReal x206=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*r11*x206))+(((-1.0)*r10*sj5*x204))+((r10*x205))+(((-1.0)*cj5*r11*x204))+((r12*x203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r22*x203))+(((-1.0)*r20*sj5*x204))+(((-1.0)*r21*x206))+((r20*x205))+(((-1.0)*cj5*r21*x204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*r11*x206))+(((-1.0)*r10*sj5*x204))+((r10*x205))+(((-1.0)*cj5*r11*x204))+((r12*x203))))+IKsqr(((((2.35293564015143)*pz))+((r22*x203))+(((-1.0)*r20*sj5*x204))+(((-1.0)*r21*x206))+((r20*x205))+(((-1.0)*cj5*r21*x204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*r11*x206))+(((-1.0)*r10*sj5*x204))+((r10*x205))+(((-1.0)*cj5*r11*x204))+((r12*x203))), ((((2.35293564015143)*pz))+((r22*x203))+(((-1.0)*r20*sj5*x204))+(((-1.0)*r21*x206))+((r20*x205))+(((-1.0)*cj5*r21*x204))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x207=((0.39225)*r10);
IkReal x208=(sj4*sj5);
IkReal x209=(cj5*sj3);
IkReal x210=((0.39225)*r11);
IkReal x211=(sj3*sj5);
IkReal x212=(cj3*cj4);
IkReal x213=((0.03868)*sj5);
IkReal x214=((0.39225)*r21);
IkReal x215=((0.03868)*cj5);
IkReal x216=((0.39225)*cj4);
IkReal x217=((0.39225)*r20);
IkReal x218=(cj5*sj4);
IkReal x219=(r10*x215);
IkReal x220=(r11*x213);
IkReal x221=((0.425001)*(IKsin(j1)));
IkReal x222=(r21*x213);
IkReal x223=((0.425001)*(IKcos(j1)));
IkReal x224=(r20*x215);
IkReal x225=((0.39225)*cj3*sj4);
IkReal x226=(x219+py);
IkReal x227=(x221+x220);
IkReal x228=(x223+x222);
evalcond[0]=(((r12*x216))+(((-1.0)*x207*x208))+x226+(((-1.0)*x210*x218))+(((-1.0)*x227)));
evalcond[1]=(x224+pz+((r22*x216))+(((-1.0)*x214*x218))+(((-1.0)*x208*x217))+(((-1.0)*x228)));
evalcond[2]=((((-1.0)*sj5*x212*x217))+(((-1.0)*cj5*x212*x214))+((x209*x217))+x226+(((-1.0)*x211*x214))+(((-1.0)*x227))+(((-1.0)*r22*x225)));
evalcond[3]=((((-1.0)*cj5*x210*x212))+(((-1.0)*sj5*x207*x212))+(((-1.0)*pz))+x228+(((-1.0)*x210*x211))+(((-1.0)*r12*x225))+(((-1.0)*x224))+((x207*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x229=(cj1*cj4);
IkReal x230=((1.0)*r22);
IkReal x231=(cj4*sj1);
IkReal x232=(sj4*sj5);
IkReal x233=(cj1*cj5*sj4);
IkReal x234=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*x230*x231))+((r20*sj1*x232))+((r12*x229))+(((-1.0)*cj1*r10*x232))+(((-1.0)*r11*x233))+((r21*x234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x234))+(((-1.0)*r12*x231))+((cj1*r20*x232))+(((-1.0)*x229*x230))+((r21*x233))+((r10*sj1*x232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x230*x231))+((r20*sj1*x232))+((r12*x229))+(((-1.0)*cj1*r10*x232))+(((-1.0)*r11*x233))+((r21*x234))))+IKsqr((((r11*x234))+(((-1.0)*r12*x231))+((cj1*r20*x232))+(((-1.0)*x229*x230))+((r21*x233))+((r10*sj1*x232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x230*x231))+((r20*sj1*x232))+((r12*x229))+(((-1.0)*cj1*r10*x232))+(((-1.0)*r11*x233))+((r21*x234))), (((r11*x234))+(((-1.0)*r12*x231))+((cj1*r20*x232))+(((-1.0)*x229*x230))+((r21*x233))+((r10*sj1*x232))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x235=IKcos(j2);
IkReal x236=IKsin(j2);
IkReal x237=(cj3*cj4);
IkReal x238=(cj5*r21);
IkReal x239=(sj3*sj5);
IkReal x240=(r10*sj5);
IkReal x241=((1.0)*sj4);
IkReal x242=(cj3*sj4);
IkReal x243=(cj5*r11);
IkReal x244=((0.03868)*cj5);
IkReal x245=(r20*sj5);
IkReal x246=((0.03868)*sj5);
IkReal x247=(cj1*x235);
IkReal x248=(sj1*x236);
IkReal x249=((1.0)*cj5*sj3);
IkReal x250=(cj1*x236);
IkReal x251=(sj1*x235);
IkReal x252=(x247+x248);
evalcond[0]=(((cj4*r22))+(((-1.0)*x241*x245))+x252+(((-1.0)*x238*x241)));
evalcond[1]=((((-1.0)*x241*x243))+x251+(((-1.0)*x240*x241))+(((-1.0)*x250))+((cj4*r12)));
evalcond[2]=((((0.425001)*cj1))+(((-1.0)*pz))+((r21*x246))+(((0.39225)*x248))+(((0.39225)*x247))+(((-1.0)*r20*x244)));
evalcond[3]=((((0.39225)*x251))+(((-0.39225)*x250))+(((-1.0)*r10*x244))+(((-1.0)*py))+(((0.425001)*sj1))+((r11*x246)));
evalcond[4]=(((r11*x239))+((x237*x240))+((x237*x243))+(((-1.0)*r10*x249))+x252+((r12*x242)));
evalcond[5]=(((x237*x238))+((x237*x245))+((r22*x242))+x250+((r21*x239))+(((-1.0)*x251))+(((-1.0)*r20*x249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x253=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x253.valid){
continue;
}
CheckValue<IkReal> x254 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x254.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x253.value)))+(x254.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x255=IKcos(j3);
IkReal x256=IKsin(j3);
IkReal x257=((1.0)*cj5);
IkReal x258=(r01*sj5);
IkReal x259=((1.0)*sj5);
IkReal x260=(r00*x256);
IkReal x261=(cj4*x256);
IkReal x262=(r00*x255);
IkReal x263=(sj5*x255);
IkReal x264=((1.0)*sj4*x256);
evalcond[0]=(((r02*sj4*x255))+((x256*x258))+((cj4*cj5*r01*x255))+((cj4*sj5*x262))+(((-1.0)*x257*x260)));
evalcond[1]=((((-1.0)*r21*x257*x261))+(((-1.0)*r20*x255*x257))+(((-1.0)*r20*x259*x261))+((r21*x263))+(((-1.0)*r22*x264)));
evalcond[2]=((((-1.0)*r12*x264))+(((-1.0)*r11*x257*x261))+(((-1.0)*r10*x259*x261))+(((-1.0)*r10*x255*x257))+((r11*x263)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x259*x260))+(((-1.0)*r01*x257*x261))+(((-1.0)*r02*x264))+((x255*x258))+(((-1.0)*x257*x262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x265=((0.9229390048494)*cj4);
IkReal x266=((0.9229390048494)*sj4);
IkReal x267=((0.0910115505610575)*cj5);
IkReal x268=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x266))+(((-1.0)*r11*x268))+((r12*x265))+((r10*x267))+(((-1.0)*r10*sj5*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x266))+(((-1.0)*r20*sj5*x266))+((r22*x265))+(((-1.0)*r21*x268))+((r20*x267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x266))+(((-1.0)*r11*x268))+((r12*x265))+((r10*x267))+(((-1.0)*r10*sj5*x266))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x266))+(((-1.0)*r20*sj5*x266))+((r22*x265))+(((-1.0)*r21*x268))+((r20*x267))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x266))+(((-1.0)*r11*x268))+((r12*x265))+((r10*x267))+(((-1.0)*r10*sj5*x266))), ((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x266))+(((-1.0)*r20*sj5*x266))+((r22*x265))+(((-1.0)*r21*x268))+((r20*x267))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x269=((0.39225)*r10);
IkReal x270=(sj4*sj5);
IkReal x271=(cj5*sj3);
IkReal x272=((0.39225)*r11);
IkReal x273=(sj3*sj5);
IkReal x274=(cj3*cj4);
IkReal x275=((0.03868)*sj5);
IkReal x276=((0.39225)*r21);
IkReal x277=((0.03868)*cj5);
IkReal x278=((0.39225)*cj4);
IkReal x279=((0.39225)*r20);
IkReal x280=(cj5*sj4);
IkReal x281=(r10*x277);
IkReal x282=(r11*x275);
IkReal x283=((0.425001)*(IKsin(j1)));
IkReal x284=(r21*x275);
IkReal x285=((0.425001)*(IKcos(j1)));
IkReal x286=(r20*x277);
IkReal x287=((0.39225)*cj3*sj4);
IkReal x288=(x281+py);
IkReal x289=(x283+x282);
IkReal x290=(x285+x284);
evalcond[0]=((((-1.0)*x269*x270))+x288+((r12*x278))+(((-1.0)*x289))+(((-1.0)*x272*x280)));
evalcond[1]=((((-1.0)*x276*x280))+((r22*x278))+(((-1.0)*x290))+x286+pz+(((-1.0)*x270*x279)));
evalcond[2]=((((-1.0)*x273*x276))+((x271*x279))+(((-1.0)*sj5*x274*x279))+(((-1.0)*r22*x287))+x288+(((-1.0)*x289))+(((-1.0)*cj5*x274*x276)));
evalcond[3]=((((-1.0)*x272*x273))+(((-1.0)*pz))+(((-1.0)*r12*x287))+x290+(((-1.0)*cj5*x272*x274))+(((-1.0)*x286))+((x269*x271))+(((-1.0)*sj5*x269*x274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x291=(cj1*cj4);
IkReal x292=((1.0)*r22);
IkReal x293=(cj4*sj1);
IkReal x294=(sj4*sj5);
IkReal x295=(cj1*cj5*sj4);
IkReal x296=(cj5*sj1*sj4);
if( IKabs((((r20*sj1*x294))+((r12*x291))+(((-1.0)*r11*x295))+(((-1.0)*cj1*r10*x294))+((r21*x296))+(((-1.0)*x292*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x294))+(((-1.0)*x291*x292))+((cj1*r20*x294))+(((-1.0)*r12*x293))+((r21*x295))+((r11*x296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x294))+((r12*x291))+(((-1.0)*r11*x295))+(((-1.0)*cj1*r10*x294))+((r21*x296))+(((-1.0)*x292*x293))))+IKsqr((((r10*sj1*x294))+(((-1.0)*x291*x292))+((cj1*r20*x294))+(((-1.0)*r12*x293))+((r21*x295))+((r11*x296))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x294))+((r12*x291))+(((-1.0)*r11*x295))+(((-1.0)*cj1*r10*x294))+((r21*x296))+(((-1.0)*x292*x293))), (((r10*sj1*x294))+(((-1.0)*x291*x292))+((cj1*r20*x294))+(((-1.0)*r12*x293))+((r21*x295))+((r11*x296))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x297=IKcos(j2);
IkReal x298=IKsin(j2);
IkReal x299=(cj3*cj4);
IkReal x300=(cj5*r21);
IkReal x301=(sj3*sj5);
IkReal x302=(r10*sj5);
IkReal x303=((1.0)*sj4);
IkReal x304=(cj3*sj4);
IkReal x305=(cj5*r11);
IkReal x306=((0.03868)*cj5);
IkReal x307=(r20*sj5);
IkReal x308=((0.03868)*sj5);
IkReal x309=(cj1*x297);
IkReal x310=(sj1*x298);
IkReal x311=((1.0)*cj5*sj3);
IkReal x312=(cj1*x298);
IkReal x313=(sj1*x297);
IkReal x314=(x309+x310);
evalcond[0]=(((cj4*r22))+(((-1.0)*x303*x307))+x314+(((-1.0)*x300*x303)));
evalcond[1]=((((-1.0)*x303*x305))+(((-1.0)*x302*x303))+x313+(((-1.0)*x312))+((cj4*r12)));
evalcond[2]=(((r21*x308))+(((-1.0)*r20*x306))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x309))+(((0.39225)*x310)));
evalcond[3]=(((r11*x308))+(((-0.39225)*x312))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x306))+(((0.39225)*x313)));
evalcond[4]=(((r11*x301))+((x299*x302))+((x299*x305))+x314+(((-1.0)*r10*x311))+((r12*x304)));
evalcond[5]=(((r22*x304))+(((-1.0)*r20*x311))+((r21*x301))+((x299*x307))+((x299*x300))+x312+(((-1.0)*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x315=(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)));
j3eval[0]=x315;
j3eval[1]=IKsign(x315);
j3eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs((((cj4*cj5*r11))+((r12*sj4))+((cj4*r10*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x316=((1.0)*sj4);
IkReal x317=((((-1.0)*r10*sj5*x316))+(((-1.0)*cj5*r11*x316))+((cj4*r12)));
j3eval[0]=x317;
j3eval[1]=((IKabs((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*r20))))));
j3eval[2]=IKsign(x317);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x318=cj5*cj5;
IkReal x319=cj4*cj4;
IkReal x320=r00*r00;
IkReal x321=r01*r01;
IkReal x322=r02*r02;
IkReal x323=(r00*sj5);
IkReal x324=((2.0)*cj5*r01);
IkReal x325=(cj4*r02*sj4);
IkReal x326=((1.0)*x319);
IkReal x327=(x318*x320);
IkReal x328=(x318*x321);
IkReal x329=((((-2.0)*x323*x325))+((x323*x324))+(((-1.0)*x326*x328))+(((-1.0)*x321))+(((-1.0)*x322))+(((-1.0)*x327))+(((-1.0)*x320*x326))+x328+(((-1.0)*x319*x323*x324))+(((-1.0)*x324*x325))+((x319*x322))+((x319*x327)));
j3eval[0]=x329;
j3eval[1]=((IKabs(((((-1.0)*r01*sj5))+((cj5*r00)))))+(IKabs((((r02*sj4))+((cj4*cj5*r01))+((cj4*x323))))));
j3eval[2]=IKsign(x329);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x330=cj5*cj5;
IkReal x331=cj4*cj4;
IkReal x332=r00*r00;
IkReal x333=r01*r01;
IkReal x334=r02*r02;
IkReal x335=(r00*sj5);
IkReal x336=((2.0)*cj5*r01);
IkReal x337=(cj4*r02*sj4);
IkReal x338=((1.0)*x331);
IkReal x339=(x330*x332);
IkReal x340=(x330*x333);
CheckValue<IkReal> x341 = IKatan2WithCheck(IkReal((((r02*sj4))+((cj4*cj5*r01))+((cj4*x335)))),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x341.valid){
continue;
}
CheckValue<IkReal> x342=IKPowWithIntegerCheck(IKsign((((x335*x336))+((x331*x339))+((x331*x334))+(((-2.0)*x335*x337))+x340+(((-1.0)*x334))+(((-1.0)*x333))+(((-1.0)*x339))+(((-1.0)*x332*x338))+(((-1.0)*x338*x340))+(((-1.0)*x331*x335*x336))+(((-1.0)*x336*x337)))),-1);
if(!x342.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x341.value)+(((1.5707963267949)*(x342.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x343=IKcos(j3);
IkReal x344=IKsin(j3);
IkReal x345=((1.0)*cj5);
IkReal x346=(r01*sj5);
IkReal x347=((1.0)*sj5);
IkReal x348=(r00*x344);
IkReal x349=(cj4*x344);
IkReal x350=(r00*x343);
IkReal x351=(sj5*x343);
IkReal x352=((1.0)*sj4*x344);
evalcond[0]=(((cj4*sj5*x350))+((x344*x346))+((r02*sj4*x343))+(((-1.0)*x345*x348))+((cj4*cj5*r01*x343)));
evalcond[1]=((((-1.0)*r22*x352))+(((-1.0)*r20*x347*x349))+((r21*x351))+(((-1.0)*r20*x343*x345))+(((-1.0)*r21*x345*x349)));
evalcond[2]=((((-1.0)*r10*x347*x349))+(((-1.0)*r11*x345*x349))+(((-1.0)*r12*x352))+((r11*x351))+(((-1.0)*r10*x343*x345)));
evalcond[3]=((-1.0)+(((-1.0)*x345*x350))+(((-1.0)*r01*x345*x349))+(((-1.0)*r02*x352))+((x343*x346))+(((-1.0)*cj4*x347*x348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x353=((0.9229390048494)*sj4);
IkReal x354=((0.0910115505610575)*cj5);
IkReal x355=((0.9229390048494)*cj4);
IkReal x356=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r12*x355))+((r11*x356))+((cj5*r11*x353))+(((-1.0)*r10*x354))+((r10*sj5*x353))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x353))+(((-1.0)*r20*sj5*x353))+((r22*x355))+(((-1.0)*r21*x356))+((r20*x354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x355))+((r11*x356))+((cj5*r11*x353))+(((-1.0)*r10*x354))+((r10*sj5*x353))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x353))+(((-1.0)*r20*sj5*x353))+((r22*x355))+(((-1.0)*r21*x356))+((r20*x354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x355))+((r11*x356))+((cj5*r11*x353))+(((-1.0)*r10*x354))+((r10*sj5*x353))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x353))+(((-1.0)*r20*sj5*x353))+((r22*x355))+(((-1.0)*r21*x356))+((r20*x354))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x357=((0.39225)*r10);
IkReal x358=(sj4*sj5);
IkReal x359=(cj5*sj3);
IkReal x360=((0.39225)*r11);
IkReal x361=(sj3*sj5);
IkReal x362=(cj3*cj4);
IkReal x363=((0.03868)*sj5);
IkReal x364=((0.39225)*r21);
IkReal x365=((0.03868)*cj5);
IkReal x366=((0.39225)*cj4);
IkReal x367=((0.39225)*r20);
IkReal x368=(cj5*sj4);
IkReal x369=((0.425001)*(IKsin(j1)));
IkReal x370=(r10*x365);
IkReal x371=(r11*x363);
IkReal x372=(r20*x365);
IkReal x373=(r21*x363);
IkReal x374=((0.425001)*(IKcos(j1)));
IkReal x375=((0.39225)*cj3*sj4);
IkReal x376=(x372+pz);
IkReal x377=(x374+x373);
IkReal x378=(x370+x369);
evalcond[0]=((((-1.0)*x377))+(((-1.0)*x358*x367))+x376+(((-1.0)*x364*x368))+((r22*x366)));
evalcond[1]=((((-1.0)*x378))+x371+(((-1.0)*py))+(((-1.0)*r12*x366))+((x360*x368))+((x357*x358)));
evalcond[2]=(((x361*x364))+(((-1.0)*x371))+x378+py+(((-1.0)*x359*x367))+((sj5*x362*x367))+((r22*x375))+((cj5*x362*x364)));
evalcond[3]=((((-1.0)*x360*x361))+(((-1.0)*x377))+(((-1.0)*cj5*x360*x362))+(((-1.0)*sj5*x357*x362))+x376+(((-1.0)*r12*x375))+((x357*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x379=(cj4*r12);
IkReal x380=(r10*sj5);
IkReal x381=(cj1*sj4);
IkReal x382=(sj1*sj4);
IkReal x383=(r20*sj5);
IkReal x384=((1.0)*cj4*r22);
IkReal x385=((1.0)*x382);
IkReal x386=(cj5*x381);
if( IKabs((((r11*x386))+(((-1.0)*cj1*x379))+((x382*x383))+((cj5*r21*x382))+((x380*x381))+(((-1.0)*sj1*x384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x384))+(((-1.0)*x380*x385))+((sj1*x379))+(((-1.0)*cj5*r11*x385))+((r21*x386))+((x381*x383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x386))+(((-1.0)*cj1*x379))+((x382*x383))+((cj5*r21*x382))+((x380*x381))+(((-1.0)*sj1*x384))))+IKsqr(((((-1.0)*cj1*x384))+(((-1.0)*x380*x385))+((sj1*x379))+(((-1.0)*cj5*r11*x385))+((r21*x386))+((x381*x383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x386))+(((-1.0)*cj1*x379))+((x382*x383))+((cj5*r21*x382))+((x380*x381))+(((-1.0)*sj1*x384))), ((((-1.0)*cj1*x384))+(((-1.0)*x380*x385))+((sj1*x379))+(((-1.0)*cj5*r11*x385))+((r21*x386))+((x381*x383))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x387=IKsin(j2);
IkReal x388=IKcos(j2);
IkReal x389=(sj3*sj5);
IkReal x390=(r10*sj5);
IkReal x391=((1.0)*sj4);
IkReal x392=((1.0)*sj1);
IkReal x393=(cj3*sj4);
IkReal x394=(cj3*cj4);
IkReal x395=(cj5*r21);
IkReal x396=((0.03868)*cj5);
IkReal x397=(r20*sj5);
IkReal x398=((0.39225)*sj1);
IkReal x399=((0.03868)*sj5);
IkReal x400=(cj5*r11);
IkReal x401=(cj1*x387);
IkReal x402=(cj1*x388);
IkReal x403=((1.0)*cj5*sj3);
IkReal x404=(x388*x392);
evalcond[0]=(((cj4*r22))+(((-1.0)*x391*x395))+(((-1.0)*x391*x397))+x402+((sj1*x387)));
evalcond[1]=((((-1.0)*x391*x400))+x401+(((-1.0)*x390*x391))+(((-1.0)*x404))+((cj4*r12)));
evalcond[2]=((((-1.0)*r20*x396))+(((0.39225)*x402))+(((0.425001)*cj1))+(((-1.0)*pz))+((x387*x398))+((r21*x399)));
evalcond[3]=((((-1.0)*x388*x398))+(((0.39225)*x401))+(((-1.0)*py))+((r11*x399))+(((-1.0)*r10*x396))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*r20*x403))+((x394*x395))+((x394*x397))+((r21*x389))+x401+((r22*x393))+(((-1.0)*x404)));
evalcond[5]=((((-1.0)*x387*x392))+((r11*x389))+(((-1.0)*r10*x403))+((r12*x393))+((x394*x400))+((x390*x394))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x405=((1.0)*sj4);
CheckValue<IkReal> x406=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11*x405))+(((-1.0)*r10*sj5*x405))+((cj4*r12)))),-1);
if(!x406.valid){
continue;
}
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x406.value)))+(x407.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x408=IKcos(j3);
IkReal x409=IKsin(j3);
IkReal x410=((1.0)*cj5);
IkReal x411=(r01*sj5);
IkReal x412=((1.0)*sj5);
IkReal x413=(r00*x409);
IkReal x414=(cj4*x409);
IkReal x415=(r00*x408);
IkReal x416=(sj5*x408);
IkReal x417=((1.0)*sj4*x409);
evalcond[0]=(((cj4*cj5*r01*x408))+((x409*x411))+((r02*sj4*x408))+((cj4*sj5*x415))+(((-1.0)*x410*x413)));
evalcond[1]=((((-1.0)*r21*x410*x414))+(((-1.0)*r20*x412*x414))+((r21*x416))+(((-1.0)*r22*x417))+(((-1.0)*r20*x408*x410)));
evalcond[2]=((((-1.0)*r11*x410*x414))+((r11*x416))+(((-1.0)*r10*x408*x410))+(((-1.0)*r10*x412*x414))+(((-1.0)*r12*x417)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x412*x413))+(((-1.0)*r02*x417))+((x408*x411))+(((-1.0)*r01*x410*x414))+(((-1.0)*x410*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x418=((0.9229390048494)*sj4);
IkReal x419=((0.0910115505610575)*cj5);
IkReal x420=((0.9229390048494)*cj4);
IkReal x421=((0.0910115505610575)*sj5);
if( IKabs((((cj5*r11*x418))+((r10*sj5*x418))+(((-1.0)*r10*x419))+(((-1.0)*r12*x420))+((r11*x421))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x418))+(((-1.0)*r21*x421))+((r22*x420))+((r20*x419))+(((-1.0)*r20*sj5*x418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11*x418))+((r10*sj5*x418))+(((-1.0)*r10*x419))+(((-1.0)*r12*x420))+((r11*x421))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x418))+(((-1.0)*r21*x421))+((r22*x420))+((r20*x419))+(((-1.0)*r20*sj5*x418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r11*x418))+((r10*sj5*x418))+(((-1.0)*r10*x419))+(((-1.0)*r12*x420))+((r11*x421))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x418))+(((-1.0)*r21*x421))+((r22*x420))+((r20*x419))+(((-1.0)*r20*sj5*x418))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x422=((0.39225)*r10);
IkReal x423=(sj4*sj5);
IkReal x424=(cj5*sj3);
IkReal x425=((0.39225)*r11);
IkReal x426=(sj3*sj5);
IkReal x427=(cj3*cj4);
IkReal x428=((0.03868)*sj5);
IkReal x429=((0.39225)*r21);
IkReal x430=((0.03868)*cj5);
IkReal x431=((0.39225)*cj4);
IkReal x432=((0.39225)*r20);
IkReal x433=(cj5*sj4);
IkReal x434=((0.425001)*(IKsin(j1)));
IkReal x435=(r10*x430);
IkReal x436=(r11*x428);
IkReal x437=(r20*x430);
IkReal x438=(r21*x428);
IkReal x439=((0.425001)*(IKcos(j1)));
IkReal x440=((0.39225)*cj3*sj4);
IkReal x441=(x437+pz);
IkReal x442=(x438+x439);
IkReal x443=(x434+x435);
evalcond[0]=((((-1.0)*x442))+(((-1.0)*x429*x433))+((r22*x431))+x441+(((-1.0)*x423*x432)));
evalcond[1]=((((-1.0)*x443))+(((-1.0)*r12*x431))+((x425*x433))+(((-1.0)*py))+x436+((x422*x423)));
evalcond[2]=(((x426*x429))+((sj5*x427*x432))+(((-1.0)*x436))+(((-1.0)*x424*x432))+x443+((r22*x440))+py+((cj5*x427*x429)));
evalcond[3]=((((-1.0)*x442))+(((-1.0)*r12*x440))+(((-1.0)*cj5*x425*x427))+x441+(((-1.0)*x425*x426))+(((-1.0)*sj5*x422*x427))+((x422*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x444=(cj4*r12);
IkReal x445=(r10*sj5);
IkReal x446=(cj1*sj4);
IkReal x447=(sj1*sj4);
IkReal x448=(r20*sj5);
IkReal x449=((1.0)*cj4*r22);
IkReal x450=((1.0)*x447);
IkReal x451=(cj5*x446);
if( IKabs((((x447*x448))+((x445*x446))+((r11*x451))+(((-1.0)*cj1*x444))+((cj5*r21*x447))+(((-1.0)*sj1*x449)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x446*x448))+(((-1.0)*cj5*r11*x450))+((sj1*x444))+(((-1.0)*cj1*x449))+(((-1.0)*x445*x450))+((r21*x451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x447*x448))+((x445*x446))+((r11*x451))+(((-1.0)*cj1*x444))+((cj5*r21*x447))+(((-1.0)*sj1*x449))))+IKsqr((((x446*x448))+(((-1.0)*cj5*r11*x450))+((sj1*x444))+(((-1.0)*cj1*x449))+(((-1.0)*x445*x450))+((r21*x451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x447*x448))+((x445*x446))+((r11*x451))+(((-1.0)*cj1*x444))+((cj5*r21*x447))+(((-1.0)*sj1*x449))), (((x446*x448))+(((-1.0)*cj5*r11*x450))+((sj1*x444))+(((-1.0)*cj1*x449))+(((-1.0)*x445*x450))+((r21*x451))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x452=IKsin(j2);
IkReal x453=IKcos(j2);
IkReal x454=(sj3*sj5);
IkReal x455=(r10*sj5);
IkReal x456=((1.0)*sj4);
IkReal x457=((1.0)*sj1);
IkReal x458=(cj3*sj4);
IkReal x459=(cj3*cj4);
IkReal x460=(cj5*r21);
IkReal x461=((0.03868)*cj5);
IkReal x462=(r20*sj5);
IkReal x463=((0.39225)*sj1);
IkReal x464=((0.03868)*sj5);
IkReal x465=(cj5*r11);
IkReal x466=(cj1*x452);
IkReal x467=(cj1*x453);
IkReal x468=((1.0)*cj5*sj3);
IkReal x469=(x453*x457);
evalcond[0]=(((cj4*r22))+(((-1.0)*x456*x460))+(((-1.0)*x456*x462))+x467+((sj1*x452)));
evalcond[1]=((((-1.0)*x456*x465))+(((-1.0)*x469))+x466+(((-1.0)*x455*x456))+((cj4*r12)));
evalcond[2]=((((0.39225)*x467))+((x452*x463))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x464))+(((-1.0)*r20*x461)));
evalcond[3]=((((0.39225)*x466))+(((-1.0)*py))+(((-1.0)*r10*x461))+(((-1.0)*x453*x463))+((r11*x464))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*x469))+x466+((x459*x462))+((x459*x460))+(((-1.0)*r20*x468))+((r21*x454))+((r22*x458)));
evalcond[5]=(((x455*x459))+(((-1.0)*x467))+(((-1.0)*r10*x468))+(((-1.0)*x452*x457))+((r12*x458))+((r11*x454))+((x459*x465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal((((cj4*cj5*r11))+((r12*sj4))+((cj4*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
CheckValue<IkReal> x471=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))),-1);
if(!x471.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x470.value)+(((1.5707963267949)*(x471.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x472=IKcos(j3);
IkReal x473=IKsin(j3);
IkReal x474=((1.0)*cj5);
IkReal x475=(r01*sj5);
IkReal x476=((1.0)*sj5);
IkReal x477=(r00*x473);
IkReal x478=(cj4*x473);
IkReal x479=(r00*x472);
IkReal x480=(sj5*x472);
IkReal x481=((1.0)*sj4*x473);
evalcond[0]=(((cj4*cj5*r01*x472))+((x473*x475))+((cj4*sj5*x479))+(((-1.0)*x474*x477))+((r02*sj4*x472)));
evalcond[1]=((((-1.0)*r21*x474*x478))+(((-1.0)*r20*x476*x478))+(((-1.0)*r20*x472*x474))+((r21*x480))+(((-1.0)*r22*x481)));
evalcond[2]=((((-1.0)*r11*x474*x478))+((r11*x480))+(((-1.0)*r10*x476*x478))+(((-1.0)*r10*x472*x474))+(((-1.0)*r12*x481)));
evalcond[3]=((-1.0)+((x472*x475))+(((-1.0)*cj4*x476*x477))+(((-1.0)*r01*x474*x478))+(((-1.0)*x474*x479))+(((-1.0)*r02*x481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x482=((0.9229390048494)*sj4);
IkReal x483=((0.0910115505610575)*cj5);
IkReal x484=((0.9229390048494)*cj4);
IkReal x485=((0.0910115505610575)*sj5);
if( IKabs((((r11*x485))+((r10*sj5*x482))+(((-1.0)*r10*x483))+(((-2.35293564015143)*py))+(((-1.0)*r12*x484))+((cj5*r11*x482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*x483))+(((-1.0)*cj5*r21*x482))+((r22*x484))+(((-1.0)*r20*sj5*x482))+(((-1.0)*r21*x485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x485))+((r10*sj5*x482))+(((-1.0)*r10*x483))+(((-2.35293564015143)*py))+(((-1.0)*r12*x484))+((cj5*r11*x482))))+IKsqr(((((2.35293564015143)*pz))+((r20*x483))+(((-1.0)*cj5*r21*x482))+((r22*x484))+(((-1.0)*r20*sj5*x482))+(((-1.0)*r21*x485))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x485))+((r10*sj5*x482))+(((-1.0)*r10*x483))+(((-2.35293564015143)*py))+(((-1.0)*r12*x484))+((cj5*r11*x482))), ((((2.35293564015143)*pz))+((r20*x483))+(((-1.0)*cj5*r21*x482))+((r22*x484))+(((-1.0)*r20*sj5*x482))+(((-1.0)*r21*x485))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x486=((0.39225)*r10);
IkReal x487=(sj4*sj5);
IkReal x488=(cj5*sj3);
IkReal x489=((0.39225)*r11);
IkReal x490=(sj3*sj5);
IkReal x491=(cj3*cj4);
IkReal x492=((0.03868)*sj5);
IkReal x493=((0.39225)*r21);
IkReal x494=((0.03868)*cj5);
IkReal x495=((0.39225)*cj4);
IkReal x496=((0.39225)*r20);
IkReal x497=(cj5*sj4);
IkReal x498=((0.425001)*(IKsin(j1)));
IkReal x499=(r10*x494);
IkReal x500=(r11*x492);
IkReal x501=(r20*x494);
IkReal x502=(r21*x492);
IkReal x503=((0.425001)*(IKcos(j1)));
IkReal x504=((0.39225)*cj3*sj4);
IkReal x505=(pz+x501);
IkReal x506=(x502+x503);
IkReal x507=(x498+x499);
evalcond[0]=((((-1.0)*x506))+(((-1.0)*x493*x497))+((r22*x495))+(((-1.0)*x487*x496))+x505);
evalcond[1]=((((-1.0)*x507))+((x489*x497))+(((-1.0)*py))+x500+(((-1.0)*r12*x495))+((x486*x487)));
evalcond[2]=((((-1.0)*x488*x496))+((cj5*x491*x493))+(((-1.0)*x500))+((x490*x493))+((r22*x504))+py+x507+((sj5*x491*x496)));
evalcond[3]=((((-1.0)*x489*x490))+(((-1.0)*x506))+(((-1.0)*sj5*x486*x491))+(((-1.0)*cj5*x489*x491))+x505+((x486*x488))+(((-1.0)*r12*x504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x508=(cj4*r12);
IkReal x509=(r10*sj5);
IkReal x510=(cj1*sj4);
IkReal x511=(sj1*sj4);
IkReal x512=(r20*sj5);
IkReal x513=((1.0)*cj4*r22);
IkReal x514=((1.0)*x511);
IkReal x515=(cj5*x510);
if( IKabs((((x511*x512))+((r11*x515))+((cj5*r21*x511))+(((-1.0)*sj1*x513))+(((-1.0)*cj1*x508))+((x509*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x510*x512))+(((-1.0)*cj1*x513))+(((-1.0)*cj5*r11*x514))+((sj1*x508))+((r21*x515))+(((-1.0)*x509*x514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x511*x512))+((r11*x515))+((cj5*r21*x511))+(((-1.0)*sj1*x513))+(((-1.0)*cj1*x508))+((x509*x510))))+IKsqr((((x510*x512))+(((-1.0)*cj1*x513))+(((-1.0)*cj5*r11*x514))+((sj1*x508))+((r21*x515))+(((-1.0)*x509*x514))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x511*x512))+((r11*x515))+((cj5*r21*x511))+(((-1.0)*sj1*x513))+(((-1.0)*cj1*x508))+((x509*x510))), (((x510*x512))+(((-1.0)*cj1*x513))+(((-1.0)*cj5*r11*x514))+((sj1*x508))+((r21*x515))+(((-1.0)*x509*x514))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x516=IKsin(j2);
IkReal x517=IKcos(j2);
IkReal x518=(sj3*sj5);
IkReal x519=(r10*sj5);
IkReal x520=((1.0)*sj4);
IkReal x521=((1.0)*sj1);
IkReal x522=(cj3*sj4);
IkReal x523=(cj3*cj4);
IkReal x524=(cj5*r21);
IkReal x525=((0.03868)*cj5);
IkReal x526=(r20*sj5);
IkReal x527=((0.39225)*sj1);
IkReal x528=((0.03868)*sj5);
IkReal x529=(cj5*r11);
IkReal x530=(cj1*x516);
IkReal x531=(cj1*x517);
IkReal x532=((1.0)*cj5*sj3);
IkReal x533=(x517*x521);
evalcond[0]=(((cj4*r22))+(((-1.0)*x520*x524))+(((-1.0)*x520*x526))+x531+((sj1*x516)));
evalcond[1]=((((-1.0)*x520*x529))+(((-1.0)*x533))+x530+((cj4*r12))+(((-1.0)*x519*x520)));
evalcond[2]=(((r21*x528))+(((0.39225)*x531))+((x516*x527))+(((0.425001)*cj1))+(((-1.0)*r20*x525))+(((-1.0)*pz)));
evalcond[3]=((((0.39225)*x530))+((r11*x528))+(((-1.0)*r10*x525))+(((-1.0)*py))+(((-1.0)*x517*x527))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*x533))+(((-1.0)*r20*x532))+((r22*x522))+x530+((r21*x518))+((x523*x524))+((x523*x526)));
evalcond[5]=(((r11*x518))+((x519*x523))+(((-1.0)*x531))+((r12*x522))+(((-1.0)*r10*x532))+(((-1.0)*x516*x521))+((x523*x529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x534=(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)));
j3eval[0]=x534;
j3eval[1]=IKsign(x534);
j3eval[2]=((IKabs((((cj4*r00*sj5))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x535=((1.0)*sj4);
IkReal x536=((((-1.0)*cj5*r01*x535))+(((-1.0)*r00*sj5*x535))+((cj4*r02)));
j3eval[0]=x536;
j3eval[1]=IKsign(x536);
j3eval[2]=((IKabs((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x537=cj4*cj4;
IkReal x538=r11*r11;
IkReal x539=cj5*cj5;
IkReal x540=r10*r10;
IkReal x541=r12*r12;
IkReal x542=(cj5*r11);
IkReal x543=((1.0)*x537);
IkReal x544=((2.0)*r10*sj5);
IkReal x545=(cj4*r12*sj4);
IkReal x546=(x539*x540);
IkReal x547=(x538*x539);
IkReal x548=((((-1.0)*x541*x543))+(((-1.0)*x542*x544))+(((-1.0)*x547))+((x544*x545))+((x537*x542*x544))+(((2.0)*x542*x545))+((x537*x540))+((x537*x547))+x546+x541+x538+(((-1.0)*x543*x546)));
j3eval[0]=x548;
j3eval[1]=IKsign(x548);
j3eval[2]=((IKabs((((cj4*x542))+((r12*sj4))+((cj4*r10*sj5)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x549=cj4*cj4;
IkReal x550=r11*r11;
IkReal x551=cj5*cj5;
IkReal x552=r10*r10;
IkReal x553=r12*r12;
IkReal x554=(cj5*r11);
IkReal x555=((1.0)*x549);
IkReal x556=((2.0)*r10*sj5);
IkReal x557=(cj4*r12*sj4);
IkReal x558=(x551*x552);
IkReal x559=(x550*x551);
CheckValue<IkReal> x560 = IKatan2WithCheck(IkReal((((cj4*x554))+((r12*sj4))+((cj4*r10*sj5)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x560.valid){
continue;
}
CheckValue<IkReal> x561=IKPowWithIntegerCheck(IKsign(((((-1.0)*x555*x558))+(((2.0)*x554*x557))+(((-1.0)*x559))+(((-1.0)*x554*x556))+(((-1.0)*x553*x555))+((x549*x554*x556))+x558+x553+x550+((x549*x559))+((x549*x552))+((x556*x557)))),-1);
if(!x561.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x560.value)+(((1.5707963267949)*(x561.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x562=IKcos(j3);
IkReal x563=IKsin(j3);
IkReal x564=((1.0)*cj5);
IkReal x565=(r12*sj4);
IkReal x566=(sj5*x562);
IkReal x567=(r11*x563);
IkReal x568=((1.0)*x563);
IkReal x569=(cj4*x563);
IkReal x570=(cj4*sj5*x568);
evalcond[0]=(((x562*x565))+((cj4*r10*x566))+(((-1.0)*r10*x563*x564))+((sj5*x567))+((cj4*cj5*r11*x562)));
evalcond[1]=(((r21*x566))+(((-1.0)*r21*x564*x569))+(((-1.0)*r20*x562*x564))+(((-1.0)*r22*sj4*x568))+(((-1.0)*r20*x570)));
evalcond[2]=((((-1.0)*r00*x562*x564))+((r01*x566))+(((-1.0)*r01*x564*x569))+(((-1.0)*r00*x570))+(((-1.0)*r02*sj4*x568)));
evalcond[3]=((1.0)+(((-1.0)*r10*x570))+(((-1.0)*cj4*x564*x567))+(((-1.0)*r10*x562*x564))+((r11*x566))+(((-1.0)*x565*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x571=((0.9229390048494)*cj4);
IkReal x572=((0.9229390048494)*sj4);
IkReal x573=((0.0910115505610575)*cj5);
IkReal x574=((0.0910115505610575)*sj5);
if( IKabs((((r01*x574))+(((-1.0)*r00*x573))+(((-1.0)*r02*x571))+((r00*sj5*x572))+(((-2.35293564015143)*px))+((cj5*r01*x572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x572))+((r20*x573))+(((-1.0)*r20*sj5*x572))+(((-1.0)*r21*x574))+((r22*x571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x574))+(((-1.0)*r00*x573))+(((-1.0)*r02*x571))+((r00*sj5*x572))+(((-2.35293564015143)*px))+((cj5*r01*x572))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x572))+((r20*x573))+(((-1.0)*r20*sj5*x572))+(((-1.0)*r21*x574))+((r22*x571))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x574))+(((-1.0)*r00*x573))+(((-1.0)*r02*x571))+((r00*sj5*x572))+(((-2.35293564015143)*px))+((cj5*r01*x572))), ((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x572))+((r20*x573))+(((-1.0)*r20*sj5*x572))+(((-1.0)*r21*x574))+((r22*x571))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x575=((0.39225)*sj3);
IkReal x576=(cj5*r00);
IkReal x577=((0.39225)*cj4);
IkReal x578=(r01*sj5);
IkReal x579=(r21*sj5);
IkReal x580=(cj5*r20);
IkReal x581=((0.39225)*sj4);
IkReal x582=(r20*sj5);
IkReal x583=(r00*sj5);
IkReal x584=(cj5*r01);
IkReal x585=(cj5*r21);
IkReal x586=((0.425001)*(IKsin(j1)));
IkReal x587=((0.03868)*x576);
IkReal x588=((0.03868)*x578);
IkReal x589=((0.03868)*x580);
IkReal x590=((0.03868)*x579);
IkReal x591=((0.425001)*(IKcos(j1)));
IkReal x592=(pz+x589);
IkReal x593=(x591+x590);
IkReal x594=(x586+x587);
evalcond[0]=((((-1.0)*x593))+x592+((r22*x577))+(((-1.0)*x581*x582))+(((-1.0)*x581*x585)));
evalcond[1]=(((x581*x584))+((x581*x583))+(((-1.0)*x594))+(((-1.0)*px))+x588+(((-1.0)*r02*x577)));
evalcond[2]=(((x575*x579))+((cj3*x577*x582))+((cj3*x577*x585))+px+((cj3*r22*x581))+x594+(((-1.0)*x575*x580))+(((-1.0)*x588)));
evalcond[3]=((((-1.0)*cj3*r02*x581))+((x575*x576))+(((-1.0)*x593))+(((-1.0)*x575*x578))+x592+(((-1.0)*cj3*x577*x584))+(((-1.0)*cj3*x577*x583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x595=(cj4*r02);
IkReal x596=(cj5*sj4);
IkReal x597=((1.0)*sj1);
IkReal x598=(sj4*sj5);
IkReal x599=((1.0)*cj4*r22);
if( IKabs((((r21*sj1*x596))+((r20*sj1*x598))+(((-1.0)*cj4*r22*x597))+(((-1.0)*cj1*x595))+((cj1*r00*x598))+((cj1*r01*x596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x596*x597))+(((-1.0)*r00*x597*x598))+(((-1.0)*cj1*x599))+((sj1*x595))+((cj1*r20*x598))+((cj1*r21*x596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x596))+((r20*sj1*x598))+(((-1.0)*cj4*r22*x597))+(((-1.0)*cj1*x595))+((cj1*r00*x598))+((cj1*r01*x596))))+IKsqr(((((-1.0)*r01*x596*x597))+(((-1.0)*r00*x597*x598))+(((-1.0)*cj1*x599))+((sj1*x595))+((cj1*r20*x598))+((cj1*r21*x596))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x596))+((r20*sj1*x598))+(((-1.0)*cj4*r22*x597))+(((-1.0)*cj1*x595))+((cj1*r00*x598))+((cj1*r01*x596))), ((((-1.0)*r01*x596*x597))+(((-1.0)*r00*x597*x598))+(((-1.0)*cj1*x599))+((sj1*x595))+((cj1*r20*x598))+((cj1*r21*x596))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x600=IKsin(j2);
IkReal x601=IKcos(j2);
IkReal x602=(cj3*cj4);
IkReal x603=(cj5*r21);
IkReal x604=(r00*sj5);
IkReal x605=(r21*sj5);
IkReal x606=(r20*sj5);
IkReal x607=((1.0)*sj1);
IkReal x608=((0.03868)*cj5);
IkReal x609=((1.0)*sj4);
IkReal x610=(cj3*sj4);
IkReal x611=((0.39225)*sj1);
IkReal x612=(cj5*r01);
IkReal x613=(r01*sj5);
IkReal x614=(cj1*x600);
IkReal x615=(cj1*x601);
IkReal x616=((1.0)*cj5*sj3);
IkReal x617=(x601*x607);
evalcond[0]=(((sj1*x600))+(((-1.0)*x603*x609))+((cj4*r22))+x615+(((-1.0)*x606*x609)));
evalcond[1]=((((-1.0)*x609*x612))+(((-1.0)*x604*x609))+(((-1.0)*x617))+x614+((cj4*r02)));
evalcond[2]=((((-1.0)*r20*x608))+(((0.39225)*x615))+((x600*x611))+(((0.425001)*cj1))+(((0.03868)*x605))+(((-1.0)*pz)));
evalcond[3]=((((0.39225)*x614))+(((-1.0)*r00*x608))+(((0.03868)*x613))+(((-1.0)*px))+(((-0.425001)*sj1))+(((-1.0)*x601*x611)));
evalcond[4]=((((-1.0)*r20*x616))+(((-1.0)*x617))+x614+((r22*x610))+((x602*x603))+((x602*x606))+((sj3*x605)));
evalcond[5]=((((-1.0)*r00*x616))+(((-1.0)*x615))+((r02*x610))+(((-1.0)*x600*x607))+((sj3*x613))+((x602*x604))+((x602*x612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x618=((1.0)*sj4);
CheckValue<IkReal> x619=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x618))+(((-1.0)*r00*sj5*x618))+((cj4*r02)))),-1);
if(!x619.valid){
continue;
}
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x619.value)))+(x620.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x621=IKcos(j3);
IkReal x622=IKsin(j3);
IkReal x623=((1.0)*cj5);
IkReal x624=(r12*sj4);
IkReal x625=(sj5*x621);
IkReal x626=(r11*x622);
IkReal x627=((1.0)*x622);
IkReal x628=(cj4*x622);
IkReal x629=(cj4*sj5*x627);
evalcond[0]=((((-1.0)*r10*x622*x623))+((cj4*cj5*r11*x621))+((sj5*x626))+((cj4*r10*x625))+((x621*x624)));
evalcond[1]=(((r21*x625))+(((-1.0)*r21*x623*x628))+(((-1.0)*r20*x621*x623))+(((-1.0)*r20*x629))+(((-1.0)*r22*sj4*x627)));
evalcond[2]=((((-1.0)*r00*x629))+(((-1.0)*r00*x621*x623))+(((-1.0)*r02*sj4*x627))+((r01*x625))+(((-1.0)*r01*x623*x628)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x623*x626))+(((-1.0)*x624*x627))+(((-1.0)*r10*x629))+(((-1.0)*r10*x621*x623))+((r11*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x630=((0.9229390048494)*cj4);
IkReal x631=((0.9229390048494)*sj4);
IkReal x632=((0.0910115505610575)*cj5);
IkReal x633=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r02*x630))+(((-1.0)*r00*x632))+((cj5*r01*x631))+((r01*x633))+((r00*sj5*x631))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x631))+((r22*x630))+(((-1.0)*r20*sj5*x631))+(((-1.0)*r21*x633))+((r20*x632)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x630))+(((-1.0)*r00*x632))+((cj5*r01*x631))+((r01*x633))+((r00*sj5*x631))+(((-2.35293564015143)*px))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x631))+((r22*x630))+(((-1.0)*r20*sj5*x631))+(((-1.0)*r21*x633))+((r20*x632))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x630))+(((-1.0)*r00*x632))+((cj5*r01*x631))+((r01*x633))+((r00*sj5*x631))+(((-2.35293564015143)*px))), ((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x631))+((r22*x630))+(((-1.0)*r20*sj5*x631))+(((-1.0)*r21*x633))+((r20*x632))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x634=((0.39225)*sj3);
IkReal x635=(cj5*r00);
IkReal x636=((0.39225)*cj4);
IkReal x637=(r01*sj5);
IkReal x638=(r21*sj5);
IkReal x639=(cj5*r20);
IkReal x640=((0.39225)*sj4);
IkReal x641=(r20*sj5);
IkReal x642=(r00*sj5);
IkReal x643=(cj5*r01);
IkReal x644=(cj5*r21);
IkReal x645=((0.425001)*(IKsin(j1)));
IkReal x646=((0.03868)*x635);
IkReal x647=((0.03868)*x637);
IkReal x648=((0.03868)*x639);
IkReal x649=((0.03868)*x638);
IkReal x650=((0.425001)*(IKcos(j1)));
IkReal x651=(pz+x648);
IkReal x652=(x649+x650);
IkReal x653=(x646+x645);
evalcond[0]=((((-1.0)*x640*x644))+(((-1.0)*x640*x641))+((r22*x636))+(((-1.0)*x652))+x651);
evalcond[1]=((((-1.0)*r02*x636))+((x640*x643))+((x640*x642))+(((-1.0)*x653))+(((-1.0)*px))+x647);
evalcond[2]=(((x634*x638))+(((-1.0)*x634*x639))+((cj3*r22*x640))+(((-1.0)*x647))+px+x653+((cj3*x636*x644))+((cj3*x636*x641)));
evalcond[3]=(((x634*x635))+(((-1.0)*cj3*r02*x640))+(((-1.0)*x634*x637))+(((-1.0)*x652))+x651+(((-1.0)*cj3*x636*x643))+(((-1.0)*cj3*x636*x642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x654=(cj4*r02);
IkReal x655=(cj5*sj4);
IkReal x656=((1.0)*sj1);
IkReal x657=(sj4*sj5);
IkReal x658=((1.0)*cj4*r22);
if( IKabs((((cj1*r01*x655))+(((-1.0)*cj4*r22*x656))+(((-1.0)*cj1*x654))+((r20*sj1*x657))+((r21*sj1*x655))+((cj1*r00*x657)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x658))+(((-1.0)*r01*x655*x656))+((sj1*x654))+(((-1.0)*r00*x656*x657))+((cj1*r20*x657))+((cj1*r21*x655)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x655))+(((-1.0)*cj4*r22*x656))+(((-1.0)*cj1*x654))+((r20*sj1*x657))+((r21*sj1*x655))+((cj1*r00*x657))))+IKsqr(((((-1.0)*cj1*x658))+(((-1.0)*r01*x655*x656))+((sj1*x654))+(((-1.0)*r00*x656*x657))+((cj1*r20*x657))+((cj1*r21*x655))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x655))+(((-1.0)*cj4*r22*x656))+(((-1.0)*cj1*x654))+((r20*sj1*x657))+((r21*sj1*x655))+((cj1*r00*x657))), ((((-1.0)*cj1*x658))+(((-1.0)*r01*x655*x656))+((sj1*x654))+(((-1.0)*r00*x656*x657))+((cj1*r20*x657))+((cj1*r21*x655))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x659=IKsin(j2);
IkReal x660=IKcos(j2);
IkReal x661=(cj3*cj4);
IkReal x662=(cj5*r21);
IkReal x663=(r00*sj5);
IkReal x664=(r21*sj5);
IkReal x665=(r20*sj5);
IkReal x666=((1.0)*sj1);
IkReal x667=((0.03868)*cj5);
IkReal x668=((1.0)*sj4);
IkReal x669=(cj3*sj4);
IkReal x670=((0.39225)*sj1);
IkReal x671=(cj5*r01);
IkReal x672=(r01*sj5);
IkReal x673=(cj1*x659);
IkReal x674=(cj1*x660);
IkReal x675=((1.0)*cj5*sj3);
IkReal x676=(x660*x666);
evalcond[0]=((((-1.0)*x665*x668))+(((-1.0)*x662*x668))+((cj4*r22))+((sj1*x659))+x674);
evalcond[1]=((((-1.0)*x663*x668))+(((-1.0)*x668*x671))+x673+(((-1.0)*x676))+((cj4*r02)));
evalcond[2]=((((-1.0)*r20*x667))+((x659*x670))+(((0.03868)*x664))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x674)));
evalcond[3]=((((0.03868)*x672))+(((-1.0)*x660*x670))+(((-1.0)*r00*x667))+(((-1.0)*px))+(((-0.425001)*sj1))+(((0.39225)*x673)));
evalcond[4]=((((-1.0)*r20*x675))+((x661*x665))+((x661*x662))+x673+((sj3*x664))+((r22*x669))+(((-1.0)*x676)));
evalcond[5]=(((x661*x671))+(((-1.0)*x659*x666))+((sj3*x672))+((r02*x669))+((x661*x663))+(((-1.0)*x674))+(((-1.0)*r00*x675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x677=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)))),-1);
if(!x677.valid){
continue;
}
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal((((cj4*r00*sj5))+((r02*sj4))+((cj4*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x677.value)))+(x678.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x679=IKcos(j3);
IkReal x680=IKsin(j3);
IkReal x681=((1.0)*cj5);
IkReal x682=(r12*sj4);
IkReal x683=(sj5*x679);
IkReal x684=(r11*x680);
IkReal x685=((1.0)*x680);
IkReal x686=(cj4*x680);
IkReal x687=(cj4*sj5*x685);
evalcond[0]=(((cj4*cj5*r11*x679))+(((-1.0)*r10*x680*x681))+((sj5*x684))+((x679*x682))+((cj4*r10*x683)));
evalcond[1]=(((r21*x683))+(((-1.0)*r20*x679*x681))+(((-1.0)*r20*x687))+(((-1.0)*r22*sj4*x685))+(((-1.0)*r21*x681*x686)));
evalcond[2]=((((-1.0)*r00*x679*x681))+(((-1.0)*r02*sj4*x685))+(((-1.0)*r00*x687))+((r01*x683))+(((-1.0)*r01*x681*x686)));
evalcond[3]=((1.0)+(((-1.0)*r10*x687))+(((-1.0)*r10*x679*x681))+(((-1.0)*cj4*x681*x684))+(((-1.0)*x682*x685))+((r11*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x688=((0.9229390048494)*cj4);
IkReal x689=((0.9229390048494)*sj4);
IkReal x690=((0.0910115505610575)*cj5);
IkReal x691=((0.0910115505610575)*sj5);
if( IKabs((((r00*sj5*x689))+(((-1.0)*r00*x690))+((cj5*r01*x689))+(((-1.0)*r02*x688))+((r01*x691))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r22*x688))+((r20*x690))+(((-1.0)*cj5*r21*x689))+(((-1.0)*r20*sj5*x689))+(((-1.0)*r21*x691)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5*x689))+(((-1.0)*r00*x690))+((cj5*r01*x689))+(((-1.0)*r02*x688))+((r01*x691))+(((-2.35293564015143)*px))))+IKsqr(((((2.35293564015143)*pz))+((r22*x688))+((r20*x690))+(((-1.0)*cj5*r21*x689))+(((-1.0)*r20*sj5*x689))+(((-1.0)*r21*x691))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*sj5*x689))+(((-1.0)*r00*x690))+((cj5*r01*x689))+(((-1.0)*r02*x688))+((r01*x691))+(((-2.35293564015143)*px))), ((((2.35293564015143)*pz))+((r22*x688))+((r20*x690))+(((-1.0)*cj5*r21*x689))+(((-1.0)*r20*sj5*x689))+(((-1.0)*r21*x691))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x692=((0.39225)*sj3);
IkReal x693=(cj5*r00);
IkReal x694=((0.39225)*cj4);
IkReal x695=(r01*sj5);
IkReal x696=(r21*sj5);
IkReal x697=(cj5*r20);
IkReal x698=((0.39225)*sj4);
IkReal x699=(r20*sj5);
IkReal x700=(r00*sj5);
IkReal x701=(cj5*r01);
IkReal x702=(cj5*r21);
IkReal x703=((0.425001)*(IKsin(j1)));
IkReal x704=((0.03868)*x693);
IkReal x705=((0.03868)*x695);
IkReal x706=((0.03868)*x697);
IkReal x707=((0.03868)*x696);
IkReal x708=((0.425001)*(IKcos(j1)));
IkReal x709=(pz+x706);
IkReal x710=(x708+x707);
IkReal x711=(x703+x704);
evalcond[0]=(((r22*x694))+(((-1.0)*x710))+(((-1.0)*x698*x699))+x709+(((-1.0)*x698*x702)));
evalcond[1]=((((-1.0)*px))+(((-1.0)*x711))+(((-1.0)*r02*x694))+((x698*x701))+((x698*x700))+x705);
evalcond[2]=(((cj3*x694*x699))+((cj3*x694*x702))+((x692*x696))+((cj3*r22*x698))+(((-1.0)*x692*x697))+px+(((-1.0)*x705))+x711);
evalcond[3]=((((-1.0)*cj3*x694*x701))+(((-1.0)*cj3*x694*x700))+((x692*x693))+(((-1.0)*x710))+(((-1.0)*x692*x695))+x709+(((-1.0)*cj3*r02*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x712=(cj4*r02);
IkReal x713=(cj5*sj4);
IkReal x714=((1.0)*sj1);
IkReal x715=(sj4*sj5);
IkReal x716=((1.0)*cj4*r22);
if( IKabs((((cj1*r01*x713))+(((-1.0)*cj4*r22*x714))+((cj1*r00*x715))+(((-1.0)*cj1*x712))+((r21*sj1*x713))+((r20*sj1*x715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x713*x714))+(((-1.0)*r00*x714*x715))+(((-1.0)*cj1*x716))+((sj1*x712))+((cj1*r21*x713))+((cj1*r20*x715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x713))+(((-1.0)*cj4*r22*x714))+((cj1*r00*x715))+(((-1.0)*cj1*x712))+((r21*sj1*x713))+((r20*sj1*x715))))+IKsqr(((((-1.0)*r01*x713*x714))+(((-1.0)*r00*x714*x715))+(((-1.0)*cj1*x716))+((sj1*x712))+((cj1*r21*x713))+((cj1*r20*x715))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x713))+(((-1.0)*cj4*r22*x714))+((cj1*r00*x715))+(((-1.0)*cj1*x712))+((r21*sj1*x713))+((r20*sj1*x715))), ((((-1.0)*r01*x713*x714))+(((-1.0)*r00*x714*x715))+(((-1.0)*cj1*x716))+((sj1*x712))+((cj1*r21*x713))+((cj1*r20*x715))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x717=IKsin(j2);
IkReal x718=IKcos(j2);
IkReal x719=(cj3*cj4);
IkReal x720=(cj5*r21);
IkReal x721=(r00*sj5);
IkReal x722=(r21*sj5);
IkReal x723=(r20*sj5);
IkReal x724=((1.0)*sj1);
IkReal x725=((0.03868)*cj5);
IkReal x726=((1.0)*sj4);
IkReal x727=(cj3*sj4);
IkReal x728=((0.39225)*sj1);
IkReal x729=(cj5*r01);
IkReal x730=(r01*sj5);
IkReal x731=(cj1*x717);
IkReal x732=(cj1*x718);
IkReal x733=((1.0)*cj5*sj3);
IkReal x734=(x718*x724);
evalcond[0]=(((cj4*r22))+(((-1.0)*x723*x726))+((sj1*x717))+(((-1.0)*x720*x726))+x732);
evalcond[1]=((((-1.0)*x734))+(((-1.0)*x721*x726))+(((-1.0)*x726*x729))+x731+((cj4*r02)));
evalcond[2]=((((0.39225)*x732))+(((0.03868)*x722))+((x717*x728))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x725)));
evalcond[3]=((((-1.0)*r00*x725))+(((0.39225)*x731))+(((0.03868)*x730))+(((-1.0)*px))+(((-0.425001)*sj1))+(((-1.0)*x718*x728)));
evalcond[4]=(((sj3*x722))+(((-1.0)*x734))+(((-1.0)*r20*x733))+((x719*x723))+((x719*x720))+x731+((r22*x727)));
evalcond[5]=(((sj3*x730))+(((-1.0)*x717*x724))+(((-1.0)*x732))+((r02*x727))+((x719*x729))+((x719*x721))+(((-1.0)*r00*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x735=((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)));
j3eval[0]=x735;
j3eval[1]=((IKabs((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*r20))))));
j3eval[2]=IKsign(x735);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x736=((1.0)*sj4);
IkReal x737=(((cj4*r22))+(((-1.0)*r20*sj5*x736))+(((-1.0)*cj5*r21*x736)));
j3eval[0]=x737;
j3eval[1]=((IKabs((((cj4*r00*sj5))+((r02*sj4))+((cj4*cj5*r01)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x737);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x738=cj4*cj4;
IkReal x739=cj5*cj5;
IkReal x740=r10*r10;
IkReal x741=r11*r11;
IkReal x742=r12*r12;
IkReal x743=(cj5*r11);
IkReal x744=((1.0)*x738);
IkReal x745=((2.0)*r10*sj5);
IkReal x746=(cj4*r12*sj4);
IkReal x747=(x739*x741);
IkReal x748=(x739*x740);
IkReal x749=(((x738*x742))+((x738*x748))+(((-1.0)*x745*x746))+(((-2.0)*x743*x746))+(((-1.0)*x744*x747))+(((-1.0)*x738*x743*x745))+((x743*x745))+(((-1.0)*x740*x744))+(((-1.0)*x741))+(((-1.0)*x742))+(((-1.0)*x748))+x747);
j3eval[0]=x749;
j3eval[1]=IKsign(x749);
j3eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs((((r12*sj4))+((cj4*r10*sj5))+((cj4*x743))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x750=cj4*cj4;
IkReal x751=cj5*cj5;
IkReal x752=r10*r10;
IkReal x753=r11*r11;
IkReal x754=r12*r12;
IkReal x755=(cj5*r11);
IkReal x756=((1.0)*x750);
IkReal x757=((2.0)*r10*sj5);
IkReal x758=(cj4*r12*sj4);
IkReal x759=(x751*x753);
IkReal x760=(x751*x752);
CheckValue<IkReal> x761 = IKatan2WithCheck(IkReal((((r12*sj4))+((cj4*r10*sj5))+((cj4*x755)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x761.valid){
continue;
}
CheckValue<IkReal> x762=IKPowWithIntegerCheck(IKsign(((((-1.0)*x750*x755*x757))+(((-2.0)*x755*x758))+(((-1.0)*x760))+(((-1.0)*x753))+(((-1.0)*x754))+(((-1.0)*x756*x759))+(((-1.0)*x752*x756))+((x755*x757))+x759+((x750*x760))+((x750*x754))+(((-1.0)*x757*x758)))),-1);
if(!x762.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x761.value)+(((1.5707963267949)*(x762.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x763=IKcos(j3);
IkReal x764=IKsin(j3);
IkReal x765=((1.0)*cj5);
IkReal x766=(r12*sj4);
IkReal x767=(sj5*x763);
IkReal x768=(r11*x764);
IkReal x769=((1.0)*x764);
IkReal x770=(cj4*x764);
IkReal x771=(cj4*sj5*x769);
evalcond[0]=(((cj4*r10*x767))+((x763*x766))+(((-1.0)*r10*x764*x765))+((cj4*cj5*r11*x763))+((sj5*x768)));
evalcond[1]=((((-1.0)*r20*x771))+(((-1.0)*r21*x765*x770))+((r21*x767))+(((-1.0)*r22*sj4*x769))+(((-1.0)*r20*x763*x765)));
evalcond[2]=((((-1.0)*r00*x763*x765))+(((-1.0)*r00*x771))+(((-1.0)*r02*sj4*x769))+(((-1.0)*r01*x765*x770))+((r01*x767)));
evalcond[3]=((-1.0)+(((-1.0)*x766*x769))+(((-1.0)*r10*x771))+(((-1.0)*r10*x763*x765))+(((-1.0)*cj4*x765*x768))+((r11*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x772=((0.9229390048494)*cj4);
IkReal x773=((0.9229390048494)*sj4);
IkReal x774=((0.0910115505610575)*cj5);
IkReal x775=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+(((-1.0)*r00*sj5*x773))+(((-1.0)*cj5*r01*x773))+(((-1.0)*r01*x775))+((r00*x774))+((r02*x772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r22*x772))+((r20*x774))+(((-1.0)*r20*sj5*x773))+(((-1.0)*cj5*r21*x773))+(((-1.0)*r21*x775)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+(((-1.0)*r00*sj5*x773))+(((-1.0)*cj5*r01*x773))+(((-1.0)*r01*x775))+((r00*x774))+((r02*x772))))+IKsqr(((((2.35293564015143)*pz))+((r22*x772))+((r20*x774))+(((-1.0)*r20*sj5*x773))+(((-1.0)*cj5*r21*x773))+(((-1.0)*r21*x775))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+(((-1.0)*r00*sj5*x773))+(((-1.0)*cj5*r01*x773))+(((-1.0)*r01*x775))+((r00*x774))+((r02*x772))), ((((2.35293564015143)*pz))+((r22*x772))+((r20*x774))+(((-1.0)*r20*sj5*x773))+(((-1.0)*cj5*r21*x773))+(((-1.0)*r21*x775))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x776=((0.39225)*sj3);
IkReal x777=(cj5*r00);
IkReal x778=((0.39225)*cj4);
IkReal x779=(r01*sj5);
IkReal x780=(r21*sj5);
IkReal x781=(cj5*r20);
IkReal x782=((0.39225)*sj4);
IkReal x783=(r20*sj5);
IkReal x784=(r00*sj5);
IkReal x785=(cj5*r01);
IkReal x786=(cj5*r21);
IkReal x787=((0.03868)*x777);
IkReal x788=((0.425001)*(IKsin(j1)));
IkReal x789=((0.03868)*x779);
IkReal x790=((0.03868)*x780);
IkReal x791=((0.425001)*(IKcos(j1)));
IkReal x792=((0.03868)*x781);
IkReal x793=(px+x787);
IkReal x794=(x788+x789);
IkReal x795=(x791+x790);
evalcond[0]=((((-1.0)*x794))+(((-1.0)*x782*x785))+(((-1.0)*x782*x784))+x793+((r02*x778)));
evalcond[1]=(((r22*x778))+(((-1.0)*x795))+pz+(((-1.0)*x782*x786))+(((-1.0)*x782*x783))+x792);
evalcond[2]=((((-1.0)*x794))+(((-1.0)*cj3*r22*x782))+(((-1.0)*x776*x780))+(((-1.0)*cj3*x778*x783))+(((-1.0)*cj3*x778*x786))+x793+((x776*x781)));
evalcond[3]=(((x776*x777))+(((-1.0)*cj3*r02*x782))+(((-1.0)*x792))+(((-1.0)*pz))+(((-1.0)*cj3*x778*x784))+(((-1.0)*cj3*x778*x785))+(((-1.0)*x776*x779))+x795);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x796=(cj5*sj4);
IkReal x797=(cj4*r02);
IkReal x798=((1.0)*cj1);
IkReal x799=(sj4*sj5);
IkReal x800=((1.0)*cj4*r22);
IkReal x801=(sj1*x799);
if( IKabs(((((-1.0)*r00*x798*x799))+(((-1.0)*sj1*x800))+((cj1*x797))+(((-1.0)*r01*x796*x798))+((r20*x801))+((r21*sj1*x796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x799))+(((-1.0)*cj4*r22*x798))+((r01*sj1*x796))+((cj1*r21*x796))+((r00*x801))+(((-1.0)*sj1*x797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x798*x799))+(((-1.0)*sj1*x800))+((cj1*x797))+(((-1.0)*r01*x796*x798))+((r20*x801))+((r21*sj1*x796))))+IKsqr((((cj1*r20*x799))+(((-1.0)*cj4*r22*x798))+((r01*sj1*x796))+((cj1*r21*x796))+((r00*x801))+(((-1.0)*sj1*x797))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x798*x799))+(((-1.0)*sj1*x800))+((cj1*x797))+(((-1.0)*r01*x796*x798))+((r20*x801))+((r21*sj1*x796))), (((cj1*r20*x799))+(((-1.0)*cj4*r22*x798))+((r01*sj1*x796))+((cj1*r21*x796))+((r00*x801))+(((-1.0)*sj1*x797))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x802=IKcos(j2);
IkReal x803=IKsin(j2);
IkReal x804=(cj3*sj4);
IkReal x805=((0.03868)*cj5);
IkReal x806=(r21*sj5);
IkReal x807=(cj3*cj4);
IkReal x808=(r20*sj5);
IkReal x809=((1.0)*sj4);
IkReal x810=(r00*sj5);
IkReal x811=(cj5*r21);
IkReal x812=((0.39225)*sj1);
IkReal x813=(cj5*r01);
IkReal x814=(r01*sj5);
IkReal x815=(cj1*x802);
IkReal x816=(sj1*x803);
IkReal x817=((1.0)*cj5*sj3);
IkReal x818=(cj1*x803);
IkReal x819=(sj1*x802);
IkReal x820=(x816+x815);
evalcond[0]=(((cj4*r22))+(((-1.0)*x809*x811))+(((-1.0)*x808*x809))+x820);
evalcond[1]=((((-1.0)*x809*x813))+(((-1.0)*x809*x810))+(((-1.0)*x818))+x819+((cj4*r02)));
evalcond[2]=((((0.39225)*x815))+(((0.03868)*x806))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x805))+((x803*x812)));
evalcond[3]=((((-0.39225)*x818))+((x802*x812))+(((-1.0)*px))+(((-1.0)*r00*x805))+(((0.425001)*sj1))+(((0.03868)*x814)));
evalcond[4]=(((r02*x804))+((x807*x813))+((x807*x810))+((sj3*x814))+x820+(((-1.0)*r00*x817)));
evalcond[5]=(((sj3*x806))+((r22*x804))+(((-1.0)*x819))+((x807*x811))+x818+(((-1.0)*r20*x817))+((x807*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x821=((1.0)*sj4);
CheckValue<IkReal> x822=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*cj5*r21*x821))+(((-1.0)*r20*sj5*x821)))),-1);
if(!x822.valid){
continue;
}
CheckValue<IkReal> x823 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal((((cj4*r00*sj5))+((r02*sj4))+((cj4*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x823.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x822.value)))+(x823.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x824=IKcos(j3);
IkReal x825=IKsin(j3);
IkReal x826=((1.0)*cj5);
IkReal x827=(r12*sj4);
IkReal x828=(sj5*x824);
IkReal x829=(r11*x825);
IkReal x830=((1.0)*x825);
IkReal x831=(cj4*x825);
IkReal x832=(cj4*sj5*x830);
evalcond[0]=(((x824*x827))+(((-1.0)*r10*x825*x826))+((sj5*x829))+((cj4*cj5*r11*x824))+((cj4*r10*x828)));
evalcond[1]=(((r21*x828))+(((-1.0)*r20*x832))+(((-1.0)*r21*x826*x831))+(((-1.0)*r20*x824*x826))+(((-1.0)*r22*sj4*x830)));
evalcond[2]=((((-1.0)*r00*x824*x826))+((r01*x828))+(((-1.0)*r02*sj4*x830))+(((-1.0)*r01*x826*x831))+(((-1.0)*r00*x832)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x826*x829))+(((-1.0)*x827*x830))+(((-1.0)*r10*x824*x826))+(((-1.0)*r10*x832))+((r11*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x833=((0.9229390048494)*cj4);
IkReal x834=((0.9229390048494)*sj4);
IkReal x835=((0.0910115505610575)*cj5);
IkReal x836=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+(((-1.0)*r00*sj5*x834))+((r02*x833))+((r00*x835))+(((-1.0)*cj5*r01*x834))+(((-1.0)*r01*x836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r22*x833))+(((-1.0)*r21*x836))+((r20*x835))+(((-1.0)*r20*sj5*x834))+(((-1.0)*cj5*r21*x834)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+(((-1.0)*r00*sj5*x834))+((r02*x833))+((r00*x835))+(((-1.0)*cj5*r01*x834))+(((-1.0)*r01*x836))))+IKsqr(((((2.35293564015143)*pz))+((r22*x833))+(((-1.0)*r21*x836))+((r20*x835))+(((-1.0)*r20*sj5*x834))+(((-1.0)*cj5*r21*x834))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+(((-1.0)*r00*sj5*x834))+((r02*x833))+((r00*x835))+(((-1.0)*cj5*r01*x834))+(((-1.0)*r01*x836))), ((((2.35293564015143)*pz))+((r22*x833))+(((-1.0)*r21*x836))+((r20*x835))+(((-1.0)*r20*sj5*x834))+(((-1.0)*cj5*r21*x834))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x837=((0.39225)*sj3);
IkReal x838=(cj5*r00);
IkReal x839=((0.39225)*cj4);
IkReal x840=(r01*sj5);
IkReal x841=(r21*sj5);
IkReal x842=(cj5*r20);
IkReal x843=((0.39225)*sj4);
IkReal x844=(r20*sj5);
IkReal x845=(r00*sj5);
IkReal x846=(cj5*r01);
IkReal x847=(cj5*r21);
IkReal x848=((0.03868)*x838);
IkReal x849=((0.425001)*(IKsin(j1)));
IkReal x850=((0.03868)*x840);
IkReal x851=((0.03868)*x841);
IkReal x852=((0.425001)*(IKcos(j1)));
IkReal x853=((0.03868)*x842);
IkReal x854=(px+x848);
IkReal x855=(x850+x849);
IkReal x856=(x852+x851);
evalcond[0]=((((-1.0)*x855))+((r02*x839))+(((-1.0)*x843*x846))+(((-1.0)*x843*x845))+x854);
evalcond[1]=(((r22*x839))+(((-1.0)*x856))+(((-1.0)*x843*x844))+(((-1.0)*x843*x847))+pz+x853);
evalcond[2]=((((-1.0)*x855))+(((-1.0)*cj3*x839*x844))+(((-1.0)*cj3*x839*x847))+(((-1.0)*cj3*r22*x843))+((x837*x842))+(((-1.0)*x837*x841))+x854);
evalcond[3]=((((-1.0)*x853))+(((-1.0)*cj3*x839*x845))+(((-1.0)*cj3*x839*x846))+(((-1.0)*x837*x840))+(((-1.0)*pz))+((x837*x838))+(((-1.0)*cj3*r02*x843))+x856);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x857=(cj5*sj4);
IkReal x858=(cj4*r02);
IkReal x859=((1.0)*cj1);
IkReal x860=(sj4*sj5);
IkReal x861=((1.0)*cj4*r22);
IkReal x862=(sj1*x860);
if( IKabs((((r21*sj1*x857))+(((-1.0)*r01*x857*x859))+(((-1.0)*r00*x859*x860))+(((-1.0)*sj1*x861))+((cj1*x858))+((r20*x862)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x858))+(((-1.0)*cj4*r22*x859))+((r00*x862))+((cj1*r21*x857))+((cj1*r20*x860))+((r01*sj1*x857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x857))+(((-1.0)*r01*x857*x859))+(((-1.0)*r00*x859*x860))+(((-1.0)*sj1*x861))+((cj1*x858))+((r20*x862))))+IKsqr(((((-1.0)*sj1*x858))+(((-1.0)*cj4*r22*x859))+((r00*x862))+((cj1*r21*x857))+((cj1*r20*x860))+((r01*sj1*x857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x857))+(((-1.0)*r01*x857*x859))+(((-1.0)*r00*x859*x860))+(((-1.0)*sj1*x861))+((cj1*x858))+((r20*x862))), ((((-1.0)*sj1*x858))+(((-1.0)*cj4*r22*x859))+((r00*x862))+((cj1*r21*x857))+((cj1*r20*x860))+((r01*sj1*x857))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x863=IKcos(j2);
IkReal x864=IKsin(j2);
IkReal x865=(cj3*sj4);
IkReal x866=((0.03868)*cj5);
IkReal x867=(r21*sj5);
IkReal x868=(cj3*cj4);
IkReal x869=(r20*sj5);
IkReal x870=((1.0)*sj4);
IkReal x871=(r00*sj5);
IkReal x872=(cj5*r21);
IkReal x873=((0.39225)*sj1);
IkReal x874=(cj5*r01);
IkReal x875=(r01*sj5);
IkReal x876=(cj1*x863);
IkReal x877=(sj1*x864);
IkReal x878=((1.0)*cj5*sj3);
IkReal x879=(cj1*x864);
IkReal x880=(sj1*x863);
IkReal x881=(x876+x877);
evalcond[0]=(((cj4*r22))+(((-1.0)*x869*x870))+(((-1.0)*x870*x872))+x881);
evalcond[1]=((((-1.0)*x879))+(((-1.0)*x870*x871))+(((-1.0)*x870*x874))+x880+((cj4*r02)));
evalcond[2]=((((0.03868)*x867))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x876))+(((-1.0)*r20*x866))+((x864*x873)));
evalcond[3]=((((0.03868)*x875))+((x863*x873))+(((-1.0)*r00*x866))+(((-1.0)*px))+(((0.425001)*sj1))+(((-0.39225)*x879)));
evalcond[4]=(((sj3*x875))+((x868*x874))+((x868*x871))+(((-1.0)*r00*x878))+((r02*x865))+x881);
evalcond[5]=(((sj3*x867))+((x868*x869))+((x868*x872))+((r22*x865))+(((-1.0)*x880))+x879+(((-1.0)*r20*x878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x882=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((r00*sj4*sj5))+((cj5*r01*sj4)))),-1);
if(!x882.valid){
continue;
}
CheckValue<IkReal> x883 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal((((cj4*r20*sj5))+((r22*sj4))+((cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x883.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x882.value)))+(x883.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x884=IKcos(j3);
IkReal x885=IKsin(j3);
IkReal x886=((1.0)*cj5);
IkReal x887=(r12*sj4);
IkReal x888=(sj5*x884);
IkReal x889=(r11*x885);
IkReal x890=((1.0)*x885);
IkReal x891=(cj4*x885);
IkReal x892=(cj4*sj5*x890);
evalcond[0]=(((sj5*x889))+(((-1.0)*r10*x885*x886))+((cj4*r10*x888))+((cj4*cj5*r11*x884))+((x884*x887)));
evalcond[1]=((((-1.0)*r22*sj4*x890))+(((-1.0)*r20*x884*x886))+((r21*x888))+(((-1.0)*r21*x886*x891))+(((-1.0)*r20*x892)));
evalcond[2]=((((-1.0)*r02*sj4*x890))+((r01*x888))+(((-1.0)*r00*x884*x886))+(((-1.0)*r01*x886*x891))+(((-1.0)*r00*x892)));
evalcond[3]=((-1.0)+((r11*x888))+(((-1.0)*r10*x892))+(((-1.0)*cj4*x886*x889))+(((-1.0)*r10*x884*x886))+(((-1.0)*x887*x890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x893=((0.9229390048494)*cj4);
IkReal x894=((0.9229390048494)*sj4);
IkReal x895=((0.0910115505610575)*cj5);
IkReal x896=((0.0910115505610575)*sj5);
if( IKabs((((r02*x893))+(((2.35293564015143)*px))+((r00*x895))+(((-1.0)*r00*sj5*x894))+(((-1.0)*cj5*r01*x894))+(((-1.0)*r01*x896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*x895))+(((-1.0)*r20*sj5*x894))+(((-1.0)*cj5*r21*x894))+((r22*x893))+(((-1.0)*r21*x896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x893))+(((2.35293564015143)*px))+((r00*x895))+(((-1.0)*r00*sj5*x894))+(((-1.0)*cj5*r01*x894))+(((-1.0)*r01*x896))))+IKsqr(((((2.35293564015143)*pz))+((r20*x895))+(((-1.0)*r20*sj5*x894))+(((-1.0)*cj5*r21*x894))+((r22*x893))+(((-1.0)*r21*x896))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x893))+(((2.35293564015143)*px))+((r00*x895))+(((-1.0)*r00*sj5*x894))+(((-1.0)*cj5*r01*x894))+(((-1.0)*r01*x896))), ((((2.35293564015143)*pz))+((r20*x895))+(((-1.0)*r20*sj5*x894))+(((-1.0)*cj5*r21*x894))+((r22*x893))+(((-1.0)*r21*x896))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x897=((0.39225)*sj3);
IkReal x898=(cj5*r00);
IkReal x899=((0.39225)*cj4);
IkReal x900=(r01*sj5);
IkReal x901=(r21*sj5);
IkReal x902=(cj5*r20);
IkReal x903=((0.39225)*sj4);
IkReal x904=(r20*sj5);
IkReal x905=(r00*sj5);
IkReal x906=(cj5*r01);
IkReal x907=(cj5*r21);
IkReal x908=((0.03868)*x898);
IkReal x909=((0.425001)*(IKsin(j1)));
IkReal x910=((0.03868)*x900);
IkReal x911=((0.03868)*x901);
IkReal x912=((0.425001)*(IKcos(j1)));
IkReal x913=((0.03868)*x902);
IkReal x914=(px+x908);
IkReal x915=(x910+x909);
IkReal x916=(x912+x911);
evalcond[0]=(((r02*x899))+(((-1.0)*x903*x905))+(((-1.0)*x903*x906))+(((-1.0)*x915))+x914);
evalcond[1]=((((-1.0)*x903*x904))+(((-1.0)*x903*x907))+(((-1.0)*x916))+pz+x913+((r22*x899)));
evalcond[2]=((((-1.0)*x897*x901))+(((-1.0)*cj3*r22*x903))+(((-1.0)*x915))+((x897*x902))+x914+(((-1.0)*cj3*x899*x904))+(((-1.0)*cj3*x899*x907)));
evalcond[3]=((((-1.0)*x897*x900))+(((-1.0)*x913))+((x897*x898))+(((-1.0)*pz))+(((-1.0)*cj3*r02*x903))+x916+(((-1.0)*cj3*x899*x905))+(((-1.0)*cj3*x899*x906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x917=(cj5*sj4);
IkReal x918=(cj4*r02);
IkReal x919=((1.0)*cj1);
IkReal x920=(sj4*sj5);
IkReal x921=((1.0)*cj4*r22);
IkReal x922=(sj1*x920);
if( IKabs(((((-1.0)*sj1*x921))+(((-1.0)*r01*x917*x919))+(((-1.0)*r00*x919*x920))+((r20*x922))+((r21*sj1*x917))+((cj1*x918)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x917))+((cj1*r20*x920))+((r01*sj1*x917))+(((-1.0)*cj4*r22*x919))+(((-1.0)*sj1*x918))+((r00*x922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x921))+(((-1.0)*r01*x917*x919))+(((-1.0)*r00*x919*x920))+((r20*x922))+((r21*sj1*x917))+((cj1*x918))))+IKsqr((((cj1*r21*x917))+((cj1*r20*x920))+((r01*sj1*x917))+(((-1.0)*cj4*r22*x919))+(((-1.0)*sj1*x918))+((r00*x922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x921))+(((-1.0)*r01*x917*x919))+(((-1.0)*r00*x919*x920))+((r20*x922))+((r21*sj1*x917))+((cj1*x918))), (((cj1*r21*x917))+((cj1*r20*x920))+((r01*sj1*x917))+(((-1.0)*cj4*r22*x919))+(((-1.0)*sj1*x918))+((r00*x922))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x923=IKcos(j2);
IkReal x924=IKsin(j2);
IkReal x925=(cj3*sj4);
IkReal x926=((0.03868)*cj5);
IkReal x927=(r21*sj5);
IkReal x928=(cj3*cj4);
IkReal x929=(r20*sj5);
IkReal x930=((1.0)*sj4);
IkReal x931=(r00*sj5);
IkReal x932=(cj5*r21);
IkReal x933=((0.39225)*sj1);
IkReal x934=(cj5*r01);
IkReal x935=(r01*sj5);
IkReal x936=(cj1*x923);
IkReal x937=(sj1*x924);
IkReal x938=((1.0)*cj5*sj3);
IkReal x939=(cj1*x924);
IkReal x940=(sj1*x923);
IkReal x941=(x937+x936);
evalcond[0]=((((-1.0)*x930*x932))+((cj4*r22))+(((-1.0)*x929*x930))+x941);
evalcond[1]=((((-1.0)*x930*x931))+(((-1.0)*x930*x934))+(((-1.0)*x939))+x940+((cj4*r02)));
evalcond[2]=(((x924*x933))+(((-1.0)*r20*x926))+(((0.425001)*cj1))+(((0.03868)*x927))+(((-1.0)*pz))+(((0.39225)*x936)));
evalcond[3]=((((0.03868)*x935))+(((-1.0)*px))+(((0.425001)*sj1))+((x923*x933))+(((-1.0)*r00*x926))+(((-0.39225)*x939)));
evalcond[4]=(((x928*x931))+((x928*x934))+(((-1.0)*r00*x938))+x941+((r02*x925))+((sj3*x935)));
evalcond[5]=((((-1.0)*r20*x938))+((r22*x925))+((x928*x929))+((x928*x932))+(((-1.0)*x940))+x939+((sj3*x927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x942=(cj0*sj5);
IkReal x943=(cj4*cj5);
IkReal x944=((1.0)*sj4);
IkReal x945=(r00*sj0);
IkReal x946=((1.0)*r01*sj0);
CheckValue<IkReal> x947 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*cj5*r10))+((r11*x942))+(((-1.0)*sj5*x946))+((cj5*x945)))),IkReal(((((-1.0)*cj4*sj5*x945))+((cj0*r12*sj4))+((cj4*r10*x942))+(((-1.0)*x943*x946))+(((-1.0)*r02*sj0*x944))+((cj0*r11*x943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*cj5*r21*x944))+(((-1.0)*r20*sj5*x944)))),-1);
if(!x948.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x947.value)+(((1.5707963267949)*(x948.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x949=IKsin(j3);
IkReal x950=IKcos(j3);
IkReal x951=((1.0)*cj5);
IkReal x952=((1.0)*sj5);
IkReal x953=(cj4*x949);
IkReal x954=(sj5*x950);
IkReal x955=((1.0)*sj4*x949);
evalcond[0]=((((-1.0)*r20*x950*x951))+(((-1.0)*r21*x951*x953))+(((-1.0)*r20*x952*x953))+((r21*x954))+(((-1.0)*r22*x955)));
evalcond[1]=(cj0+(((-1.0)*r00*x950*x951))+((r01*x954))+(((-1.0)*r00*x952*x953))+(((-1.0)*r01*x951*x953))+(((-1.0)*r02*x955)));
evalcond[2]=(sj0+(((-1.0)*r10*x950*x951))+((r11*x954))+(((-1.0)*r10*x952*x953))+(((-1.0)*r11*x951*x953))+(((-1.0)*r12*x955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x956=((0.9229390048494)*cj4);
IkReal x957=((0.9229390048494)*sj4);
IkReal x958=((0.0910115505610575)*cj5);
IkReal x959=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*r11*x959))+((r12*x956))+(((-1.0)*r10*sj5*x957))+(((-1.0)*cj5*r11*x957))+((r10*x958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r22*x956))+(((-1.0)*r21*x959))+(((-1.0)*r20*sj5*x957))+((r20*x958))+(((-1.0)*cj5*r21*x957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*r11*x959))+((r12*x956))+(((-1.0)*r10*sj5*x957))+(((-1.0)*cj5*r11*x957))+((r10*x958))))+IKsqr(((((2.35293564015143)*pz))+((r22*x956))+(((-1.0)*r21*x959))+(((-1.0)*r20*sj5*x957))+((r20*x958))+(((-1.0)*cj5*r21*x957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*r11*x959))+((r12*x956))+(((-1.0)*r10*sj5*x957))+(((-1.0)*cj5*r11*x957))+((r10*x958))), ((((2.35293564015143)*pz))+((r22*x956))+(((-1.0)*r21*x959))+(((-1.0)*r20*sj5*x957))+((r20*x958))+(((-1.0)*cj5*r21*x957))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x960=((0.39225)*r10);
IkReal x961=(sj4*sj5);
IkReal x962=(cj5*sj3);
IkReal x963=((0.39225)*r11);
IkReal x964=(sj3*sj5);
IkReal x965=(cj3*cj4);
IkReal x966=((0.03868)*sj5);
IkReal x967=((0.39225)*r21);
IkReal x968=((0.03868)*cj5);
IkReal x969=((0.39225)*cj4);
IkReal x970=((0.39225)*r20);
IkReal x971=(cj5*sj4);
IkReal x972=(r10*x968);
IkReal x973=(r11*x966);
IkReal x974=((0.425001)*(IKsin(j1)));
IkReal x975=(r21*x966);
IkReal x976=((0.425001)*(IKcos(j1)));
IkReal x977=(r20*x968);
IkReal x978=((0.39225)*cj3*sj4);
IkReal x979=(py+x972);
IkReal x980=(x973+x974);
IkReal x981=(x975+x976);
evalcond[0]=((((-1.0)*x980))+(((-1.0)*x963*x971))+(((-1.0)*x960*x961))+((r12*x969))+x979);
evalcond[1]=((((-1.0)*x981))+(((-1.0)*x967*x971))+pz+x977+(((-1.0)*x961*x970))+((r22*x969)));
evalcond[2]=((((-1.0)*x980))+((x962*x970))+(((-1.0)*x964*x967))+(((-1.0)*cj5*x965*x967))+x979+(((-1.0)*r22*x978))+(((-1.0)*sj5*x965*x970)));
evalcond[3]=((((-1.0)*x963*x964))+(((-1.0)*cj5*x963*x965))+((x960*x962))+(((-1.0)*pz))+(((-1.0)*r12*x978))+x981+(((-1.0)*sj5*x960*x965))+(((-1.0)*x977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x982=(cj1*cj4);
IkReal x983=((1.0)*r22);
IkReal x984=(cj4*sj1);
IkReal x985=(sj4*sj5);
IkReal x986=(cj1*cj5*sj4);
IkReal x987=(cj5*sj1*sj4);
if( IKabs((((r21*x987))+(((-1.0)*r11*x986))+((r12*x982))+(((-1.0)*cj1*r10*x985))+((r20*sj1*x985))+(((-1.0)*x983*x984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x985))+((r10*sj1*x985))+((r21*x986))+(((-1.0)*x982*x983))+(((-1.0)*r12*x984))+((r11*x987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x987))+(((-1.0)*r11*x986))+((r12*x982))+(((-1.0)*cj1*r10*x985))+((r20*sj1*x985))+(((-1.0)*x983*x984))))+IKsqr((((cj1*r20*x985))+((r10*sj1*x985))+((r21*x986))+(((-1.0)*x982*x983))+(((-1.0)*r12*x984))+((r11*x987))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x987))+(((-1.0)*r11*x986))+((r12*x982))+(((-1.0)*cj1*r10*x985))+((r20*sj1*x985))+(((-1.0)*x983*x984))), (((cj1*r20*x985))+((r10*sj1*x985))+((r21*x986))+(((-1.0)*x982*x983))+(((-1.0)*r12*x984))+((r11*x987))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x988=IKcos(j2);
IkReal x989=IKsin(j2);
IkReal x990=(cj3*cj4);
IkReal x991=(cj5*r21);
IkReal x992=(sj3*sj5);
IkReal x993=(r10*sj5);
IkReal x994=((1.0)*sj4);
IkReal x995=(cj3*sj4);
IkReal x996=(cj5*r11);
IkReal x997=((0.03868)*cj5);
IkReal x998=(r20*sj5);
IkReal x999=((0.03868)*sj5);
IkReal x1000=(cj1*x988);
IkReal x1001=(sj1*x989);
IkReal x1002=((1.0)*cj5*sj3);
IkReal x1003=(cj1*x989);
IkReal x1004=(sj1*x988);
IkReal x1005=(x1001+x1000);
evalcond[0]=(((cj4*r22))+x1005+(((-1.0)*x994*x998))+(((-1.0)*x991*x994)));
evalcond[1]=((((-1.0)*x1003))+x1004+(((-1.0)*x994*x996))+(((-1.0)*x993*x994))+((cj4*r12)));
evalcond[2]=((((0.39225)*x1000))+(((0.39225)*x1001))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x999))+(((-1.0)*r20*x997)));
evalcond[3]=((((-0.39225)*x1003))+(((0.39225)*x1004))+(((-1.0)*r10*x997))+(((-1.0)*py))+(((0.425001)*sj1))+((r11*x999)));
evalcond[4]=(((r12*x995))+(((-1.0)*r10*x1002))+x1005+((x990*x996))+((x990*x993))+((r11*x992)));
evalcond[5]=((((-1.0)*x1004))+x1003+((x990*x998))+((x990*x991))+(((-1.0)*r20*x1002))+((r21*x992))+((r22*x995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1006=((0.9229390048494)*sj4);
IkReal x1007=((0.0910115505610575)*cj5);
IkReal x1008=((0.9229390048494)*cj4);
IkReal x1009=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*x1007))+((r10*sj5*x1006))+(((-1.0)*r12*x1008))+((cj5*r11*x1006))+((r11*x1009))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x1006))+(((-1.0)*r21*x1009))+((r20*x1007))+(((-1.0)*cj5*r21*x1006))+((r22*x1008)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1007))+((r10*sj5*x1006))+(((-1.0)*r12*x1008))+((cj5*r11*x1006))+((r11*x1009))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x1006))+(((-1.0)*r21*x1009))+((r20*x1007))+(((-1.0)*cj5*r21*x1006))+((r22*x1008))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x1007))+((r10*sj5*x1006))+(((-1.0)*r12*x1008))+((cj5*r11*x1006))+((r11*x1009))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x1006))+(((-1.0)*r21*x1009))+((r20*x1007))+(((-1.0)*cj5*r21*x1006))+((r22*x1008))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1010=((0.39225)*r10);
IkReal x1011=(sj4*sj5);
IkReal x1012=(cj5*sj3);
IkReal x1013=((0.39225)*r11);
IkReal x1014=(sj3*sj5);
IkReal x1015=(cj3*cj4);
IkReal x1016=((0.03868)*sj5);
IkReal x1017=((0.39225)*r21);
IkReal x1018=((0.03868)*cj5);
IkReal x1019=((0.39225)*cj4);
IkReal x1020=((0.39225)*r20);
IkReal x1021=(cj5*sj4);
IkReal x1022=((0.425001)*(IKsin(j1)));
IkReal x1023=(r10*x1018);
IkReal x1024=(r11*x1016);
IkReal x1025=(r20*x1018);
IkReal x1026=(r21*x1016);
IkReal x1027=((0.425001)*(IKcos(j1)));
IkReal x1028=((0.39225)*cj3*sj4);
IkReal x1029=(x1025+pz);
IkReal x1030=(x1027+x1026);
IkReal x1031=(x1023+x1022);
evalcond[0]=((((-1.0)*x1030))+x1029+((r22*x1019))+(((-1.0)*x1017*x1021))+(((-1.0)*x1011*x1020)));
evalcond[1]=((((-1.0)*x1031))+x1024+(((-1.0)*py))+(((-1.0)*r12*x1019))+((x1013*x1021))+((x1010*x1011)));
evalcond[2]=(((x1014*x1017))+x1031+((r22*x1028))+(((-1.0)*x1024))+((cj5*x1015*x1017))+py+((sj5*x1015*x1020))+(((-1.0)*x1012*x1020)));
evalcond[3]=((((-1.0)*r12*x1028))+(((-1.0)*x1030))+x1029+(((-1.0)*sj5*x1010*x1015))+(((-1.0)*x1013*x1014))+(((-1.0)*cj5*x1013*x1015))+((x1010*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1032=(cj4*r12);
IkReal x1033=(r10*sj5);
IkReal x1034=(cj1*sj4);
IkReal x1035=(sj1*sj4);
IkReal x1036=(r20*sj5);
IkReal x1037=((1.0)*cj4*r22);
IkReal x1038=((1.0)*x1035);
IkReal x1039=(cj5*x1034);
if( IKabs(((((-1.0)*cj1*x1032))+(((-1.0)*sj1*x1037))+((r11*x1039))+((cj5*r21*x1035))+((x1035*x1036))+((x1033*x1034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1033*x1038))+((sj1*x1032))+(((-1.0)*cj5*r11*x1038))+((r21*x1039))+(((-1.0)*cj1*x1037))+((x1034*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1032))+(((-1.0)*sj1*x1037))+((r11*x1039))+((cj5*r21*x1035))+((x1035*x1036))+((x1033*x1034))))+IKsqr(((((-1.0)*x1033*x1038))+((sj1*x1032))+(((-1.0)*cj5*r11*x1038))+((r21*x1039))+(((-1.0)*cj1*x1037))+((x1034*x1036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1032))+(((-1.0)*sj1*x1037))+((r11*x1039))+((cj5*r21*x1035))+((x1035*x1036))+((x1033*x1034))), ((((-1.0)*x1033*x1038))+((sj1*x1032))+(((-1.0)*cj5*r11*x1038))+((r21*x1039))+(((-1.0)*cj1*x1037))+((x1034*x1036))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1040=IKsin(j2);
IkReal x1041=IKcos(j2);
IkReal x1042=(sj3*sj5);
IkReal x1043=(r10*sj5);
IkReal x1044=((1.0)*sj4);
IkReal x1045=((1.0)*sj1);
IkReal x1046=(cj3*sj4);
IkReal x1047=(cj3*cj4);
IkReal x1048=(cj5*r21);
IkReal x1049=((0.03868)*cj5);
IkReal x1050=(r20*sj5);
IkReal x1051=((0.39225)*sj1);
IkReal x1052=((0.03868)*sj5);
IkReal x1053=(cj5*r11);
IkReal x1054=(cj1*x1040);
IkReal x1055=(cj1*x1041);
IkReal x1056=((1.0)*cj5*sj3);
IkReal x1057=(x1041*x1045);
evalcond[0]=(((cj4*r22))+x1055+(((-1.0)*x1044*x1048))+(((-1.0)*x1044*x1050))+((sj1*x1040)));
evalcond[1]=((((-1.0)*x1057))+x1054+(((-1.0)*x1044*x1053))+(((-1.0)*x1043*x1044))+((cj4*r12)));
evalcond[2]=(((x1040*x1051))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x1052))+(((0.39225)*x1055))+(((-1.0)*r20*x1049)));
evalcond[3]=(((r11*x1052))+(((-1.0)*r10*x1049))+(((-1.0)*py))+(((-1.0)*x1041*x1051))+(((0.39225)*x1054))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*x1057))+x1054+((r21*x1042))+((x1047*x1048))+((x1047*x1050))+(((-1.0)*r20*x1056))+((r22*x1046)));
evalcond[5]=(((x1043*x1047))+((r11*x1042))+(((-1.0)*r10*x1056))+(((-1.0)*x1055))+(((-1.0)*x1040*x1045))+((x1047*x1053))+((r12*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1058=((0.9229390048494)*cj4);
IkReal x1059=((0.9229390048494)*sj4);
IkReal x1060=((0.0910115505610575)*cj5);
IkReal x1061=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r02*x1058))+(((-1.0)*r00*x1060))+((r00*sj5*x1059))+((r01*x1061))+((cj5*r01*x1059))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r21*x1061))+(((-1.0)*cj5*r21*x1059))+(((-1.0)*r20*sj5*x1059))+((r20*x1060))+((r22*x1058)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1058))+(((-1.0)*r00*x1060))+((r00*sj5*x1059))+((r01*x1061))+((cj5*r01*x1059))+(((-2.35293564015143)*px))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r21*x1061))+(((-1.0)*cj5*r21*x1059))+(((-1.0)*r20*sj5*x1059))+((r20*x1060))+((r22*x1058))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x1058))+(((-1.0)*r00*x1060))+((r00*sj5*x1059))+((r01*x1061))+((cj5*r01*x1059))+(((-2.35293564015143)*px))), ((((2.35293564015143)*pz))+(((-1.0)*r21*x1061))+(((-1.0)*cj5*r21*x1059))+(((-1.0)*r20*sj5*x1059))+((r20*x1060))+((r22*x1058))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1062=((0.39225)*sj3);
IkReal x1063=(cj5*r00);
IkReal x1064=((0.39225)*cj4);
IkReal x1065=(r01*sj5);
IkReal x1066=(r21*sj5);
IkReal x1067=(cj5*r20);
IkReal x1068=((0.39225)*sj4);
IkReal x1069=(r20*sj5);
IkReal x1070=(r00*sj5);
IkReal x1071=(cj5*r01);
IkReal x1072=(cj5*r21);
IkReal x1073=((0.425001)*(IKsin(j1)));
IkReal x1074=((0.03868)*x1063);
IkReal x1075=((0.03868)*x1065);
IkReal x1076=((0.03868)*x1067);
IkReal x1077=((0.03868)*x1066);
IkReal x1078=((0.425001)*(IKcos(j1)));
IkReal x1079=(x1076+pz);
IkReal x1080=(x1078+x1077);
IkReal x1081=(x1074+x1073);
evalcond[0]=(x1079+(((-1.0)*x1068*x1072))+(((-1.0)*x1068*x1069))+((r22*x1064))+(((-1.0)*x1080)));
evalcond[1]=(((x1068*x1070))+((x1068*x1071))+x1075+(((-1.0)*r02*x1064))+(((-1.0)*px))+(((-1.0)*x1081)));
evalcond[2]=(x1081+((cj3*x1064*x1072))+((cj3*x1064*x1069))+(((-1.0)*x1062*x1067))+((x1062*x1066))+px+((cj3*r22*x1068))+(((-1.0)*x1075)));
evalcond[3]=(x1079+(((-1.0)*x1062*x1065))+((x1062*x1063))+(((-1.0)*cj3*r02*x1068))+(((-1.0)*cj3*x1064*x1070))+(((-1.0)*cj3*x1064*x1071))+(((-1.0)*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1082=(cj4*r02);
IkReal x1083=(cj5*sj4);
IkReal x1084=((1.0)*sj1);
IkReal x1085=(sj4*sj5);
IkReal x1086=((1.0)*cj4*r22);
if( IKabs((((cj1*r01*x1083))+((r20*sj1*x1085))+((cj1*r00*x1085))+((r21*sj1*x1083))+(((-1.0)*cj4*r22*x1084))+(((-1.0)*cj1*x1082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1084*x1085))+((cj1*r21*x1083))+(((-1.0)*cj1*x1086))+((sj1*x1082))+((cj1*r20*x1085))+(((-1.0)*r01*x1083*x1084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x1083))+((r20*sj1*x1085))+((cj1*r00*x1085))+((r21*sj1*x1083))+(((-1.0)*cj4*r22*x1084))+(((-1.0)*cj1*x1082))))+IKsqr(((((-1.0)*r00*x1084*x1085))+((cj1*r21*x1083))+(((-1.0)*cj1*x1086))+((sj1*x1082))+((cj1*r20*x1085))+(((-1.0)*r01*x1083*x1084))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x1083))+((r20*sj1*x1085))+((cj1*r00*x1085))+((r21*sj1*x1083))+(((-1.0)*cj4*r22*x1084))+(((-1.0)*cj1*x1082))), ((((-1.0)*r00*x1084*x1085))+((cj1*r21*x1083))+(((-1.0)*cj1*x1086))+((sj1*x1082))+((cj1*r20*x1085))+(((-1.0)*r01*x1083*x1084))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1087=IKsin(j2);
IkReal x1088=IKcos(j2);
IkReal x1089=(cj3*cj4);
IkReal x1090=(cj5*r21);
IkReal x1091=(r00*sj5);
IkReal x1092=(r21*sj5);
IkReal x1093=(r20*sj5);
IkReal x1094=((1.0)*sj1);
IkReal x1095=((0.03868)*cj5);
IkReal x1096=((1.0)*sj4);
IkReal x1097=(cj3*sj4);
IkReal x1098=((0.39225)*sj1);
IkReal x1099=(cj5*r01);
IkReal x1100=(r01*sj5);
IkReal x1101=(cj1*x1087);
IkReal x1102=(cj1*x1088);
IkReal x1103=((1.0)*cj5*sj3);
IkReal x1104=(x1088*x1094);
evalcond[0]=(x1102+((cj4*r22))+(((-1.0)*x1090*x1096))+(((-1.0)*x1093*x1096))+((sj1*x1087)));
evalcond[1]=(x1101+(((-1.0)*x1091*x1096))+(((-1.0)*x1096*x1099))+(((-1.0)*x1104))+((cj4*r02)));
evalcond[2]=(((x1087*x1098))+(((0.03868)*x1092))+(((0.39225)*x1102))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1095)));
evalcond[3]=((((-1.0)*x1088*x1098))+(((0.03868)*x1100))+(((0.39225)*x1101))+(((-1.0)*px))+(((-0.425001)*sj1))+(((-1.0)*r00*x1095)));
evalcond[4]=(x1101+((x1089*x1093))+((x1089*x1090))+((r22*x1097))+(((-1.0)*r20*x1103))+(((-1.0)*x1104))+((sj3*x1092)));
evalcond[5]=(((sj3*x1100))+(((-1.0)*r00*x1103))+((x1089*x1099))+((x1089*x1091))+((r02*x1097))+(((-1.0)*x1102))+(((-1.0)*x1087*x1094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1105=((0.9229390048494)*cj4);
IkReal x1106=((0.9229390048494)*sj4);
IkReal x1107=((0.0910115505610575)*cj5);
IkReal x1108=((0.0910115505610575)*sj5);
if( IKabs((((r02*x1105))+(((2.35293564015143)*px))+(((-1.0)*r01*x1108))+((r00*x1107))+(((-1.0)*r00*sj5*x1106))+(((-1.0)*cj5*r01*x1106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*x1107))+(((-1.0)*r20*sj5*x1106))+(((-1.0)*r21*x1108))+((r22*x1105))+(((-1.0)*cj5*r21*x1106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1105))+(((2.35293564015143)*px))+(((-1.0)*r01*x1108))+((r00*x1107))+(((-1.0)*r00*sj5*x1106))+(((-1.0)*cj5*r01*x1106))))+IKsqr(((((2.35293564015143)*pz))+((r20*x1107))+(((-1.0)*r20*sj5*x1106))+(((-1.0)*r21*x1108))+((r22*x1105))+(((-1.0)*cj5*r21*x1106))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x1105))+(((2.35293564015143)*px))+(((-1.0)*r01*x1108))+((r00*x1107))+(((-1.0)*r00*sj5*x1106))+(((-1.0)*cj5*r01*x1106))), ((((2.35293564015143)*pz))+((r20*x1107))+(((-1.0)*r20*sj5*x1106))+(((-1.0)*r21*x1108))+((r22*x1105))+(((-1.0)*cj5*r21*x1106))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1109=((0.39225)*sj3);
IkReal x1110=(cj5*r00);
IkReal x1111=((0.39225)*cj4);
IkReal x1112=(r01*sj5);
IkReal x1113=(r21*sj5);
IkReal x1114=(cj5*r20);
IkReal x1115=((0.39225)*sj4);
IkReal x1116=(r20*sj5);
IkReal x1117=(r00*sj5);
IkReal x1118=(cj5*r01);
IkReal x1119=(cj5*r21);
IkReal x1120=((0.03868)*x1110);
IkReal x1121=((0.425001)*(IKsin(j1)));
IkReal x1122=((0.03868)*x1112);
IkReal x1123=((0.03868)*x1113);
IkReal x1124=((0.425001)*(IKcos(j1)));
IkReal x1125=((0.03868)*x1114);
IkReal x1126=(x1120+px);
IkReal x1127=(x1121+x1122);
IkReal x1128=(x1123+x1124);
evalcond[0]=(x1126+(((-1.0)*x1127))+(((-1.0)*x1115*x1117))+(((-1.0)*x1115*x1118))+((r02*x1111)));
evalcond[1]=(x1125+pz+((r22*x1111))+(((-1.0)*x1128))+(((-1.0)*x1115*x1116))+(((-1.0)*x1115*x1119)));
evalcond[2]=(((x1109*x1114))+x1126+(((-1.0)*x1109*x1113))+(((-1.0)*cj3*r22*x1115))+(((-1.0)*x1127))+(((-1.0)*cj3*x1111*x1119))+(((-1.0)*cj3*x1111*x1116)));
evalcond[3]=(((x1109*x1110))+x1128+(((-1.0)*x1109*x1112))+(((-1.0)*pz))+(((-1.0)*cj3*r02*x1115))+(((-1.0)*x1125))+(((-1.0)*cj3*x1111*x1118))+(((-1.0)*cj3*x1111*x1117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1129=(cj5*sj4);
IkReal x1130=(cj4*r02);
IkReal x1131=((1.0)*cj1);
IkReal x1132=(sj4*sj5);
IkReal x1133=((1.0)*cj4*r22);
IkReal x1134=(sj1*x1132);
if( IKabs(((((-1.0)*r00*x1131*x1132))+(((-1.0)*sj1*x1133))+((r21*sj1*x1129))+(((-1.0)*r01*x1129*x1131))+((cj1*x1130))+((r20*x1134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1134))+((r01*sj1*x1129))+(((-1.0)*cj4*r22*x1131))+((cj1*r21*x1129))+((cj1*r20*x1132))+(((-1.0)*sj1*x1130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1131*x1132))+(((-1.0)*sj1*x1133))+((r21*sj1*x1129))+(((-1.0)*r01*x1129*x1131))+((cj1*x1130))+((r20*x1134))))+IKsqr((((r00*x1134))+((r01*sj1*x1129))+(((-1.0)*cj4*r22*x1131))+((cj1*r21*x1129))+((cj1*r20*x1132))+(((-1.0)*sj1*x1130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1131*x1132))+(((-1.0)*sj1*x1133))+((r21*sj1*x1129))+(((-1.0)*r01*x1129*x1131))+((cj1*x1130))+((r20*x1134))), (((r00*x1134))+((r01*sj1*x1129))+(((-1.0)*cj4*r22*x1131))+((cj1*r21*x1129))+((cj1*r20*x1132))+(((-1.0)*sj1*x1130))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1135=IKcos(j2);
IkReal x1136=IKsin(j2);
IkReal x1137=(cj3*sj4);
IkReal x1138=((0.03868)*cj5);
IkReal x1139=(r21*sj5);
IkReal x1140=(cj3*cj4);
IkReal x1141=(r20*sj5);
IkReal x1142=((1.0)*sj4);
IkReal x1143=(r00*sj5);
IkReal x1144=(cj5*r21);
IkReal x1145=((0.39225)*sj1);
IkReal x1146=(cj5*r01);
IkReal x1147=(r01*sj5);
IkReal x1148=(cj1*x1135);
IkReal x1149=(sj1*x1136);
IkReal x1150=((1.0)*cj5*sj3);
IkReal x1151=(cj1*x1136);
IkReal x1152=(sj1*x1135);
IkReal x1153=(x1148+x1149);
evalcond[0]=(x1153+((cj4*r22))+(((-1.0)*x1141*x1142))+(((-1.0)*x1142*x1144)));
evalcond[1]=(x1152+(((-1.0)*x1151))+(((-1.0)*x1142*x1146))+(((-1.0)*x1142*x1143))+((cj4*r02)));
evalcond[2]=((((0.03868)*x1139))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1148))+(((-1.0)*r20*x1138))+((x1136*x1145)));
evalcond[3]=((((-0.39225)*x1151))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x1147))+(((-1.0)*r00*x1138))+((x1135*x1145)));
evalcond[4]=(((x1140*x1143))+((x1140*x1146))+x1153+(((-1.0)*r00*x1150))+((sj3*x1147))+((r02*x1137)));
evalcond[5]=(((x1140*x1144))+((x1140*x1141))+x1151+((r22*x1137))+(((-1.0)*x1152))+(((-1.0)*r20*x1150))+((sj3*x1139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1154=(r01*sj0);
IkReal x1155=((0.9229390048494)*sj4);
IkReal x1156=((0.39225)*sj4);
IkReal x1157=(r00*sj0);
CheckValue<IkReal> x1158=IKPowWithIntegerCheck(sj0,-2);
if(!x1158.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1158.value)*((((cj5*x1154*x1156))+(((0.03868)*sj5*x1154))+(((-0.39225)*cj4*r02*sj0))+((sj5*x1156*x1157))+(((-0.03868)*cj5*x1157))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1155))+(((-1.0)*cj5*r21*x1155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1158.value)*((((cj5*x1154*x1156))+(((0.03868)*sj5*x1154))+(((-0.39225)*cj4*r02*sj0))+((sj5*x1156*x1157))+(((-0.03868)*cj5*x1157))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))))))+IKsqr(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1155))+(((-1.0)*cj5*r21*x1155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1158.value)*((((cj5*x1154*x1156))+(((0.03868)*sj5*x1154))+(((-0.39225)*cj4*r02*sj0))+((sj5*x1156*x1157))+(((-0.03868)*cj5*x1157))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))))), ((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1155))+(((-1.0)*cj5*r21*x1155))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1159=IKsin(j1);
IkReal x1160=IKcos(j1);
IkReal x1161=cj0*cj0;
IkReal x1162=sj0*sj0;
IkReal x1163=((0.425001)*cj0);
IkReal x1164=((0.39225)*sj5);
IkReal x1165=(cj3*cj4);
IkReal x1166=(cj0*r20);
IkReal x1167=(cj5*r00);
IkReal x1168=((0.03868)*sj0);
IkReal x1169=(sj0*sj4);
IkReal x1170=((0.39225)*sj3);
IkReal x1171=((0.39225)*cj5);
IkReal x1172=(cj0*sj4);
IkReal x1173=(cj5*r10);
IkReal x1174=(r11*sj5);
IkReal x1175=((0.39225)*r22);
IkReal x1176=((1.0)*sj0);
IkReal x1177=((0.03868)*cj0);
IkReal x1178=((0.03868)*cj5);
IkReal x1179=((0.032446)*cj0);
IkReal x1180=(cj0*r21);
IkReal x1181=((0.39225)*r02);
IkReal x1182=(cj0*cj4);
IkReal x1183=(r01*sj5);
IkReal x1184=(cj3*sj4);
IkReal x1185=(r20*sj0);
IkReal x1186=(r21*sj0);
IkReal x1187=((0.39225)*r12);
IkReal x1188=(sj0*x1179);
IkReal x1189=((0.39225)*cj4*sj0);
IkReal x1190=((0.03868)*r21*sj5);
IkReal x1191=((0.425001)*x1159);
IkReal x1192=((0.425001)*x1160);
IkReal x1193=(sj0*x1159*x1163);
evalcond[0]=(((r20*x1178))+((cj4*x1175))+(((-1.0)*x1192))+(((-1.0)*x1190))+pz+(((-1.0)*r21*sj4*x1171))+(((-1.0)*r20*sj4*x1164)));
evalcond[1]=(x1188+((x1173*x1177))+((x1182*x1187))+(((-1.0)*r10*x1164*x1172))+(((-1.0)*x1161*x1191))+((cj0*py))+(((-1.0)*r11*x1171*x1172))+(((-1.0)*x1174*x1177)));
evalcond[2]=((((-1.0)*cj4*sj0*x1181))+((r00*x1164*x1169))+((r01*x1169*x1171))+(((-1.0)*x1188))+(((-1.0)*px*x1176))+(((-1.0)*x1167*x1168))+(((-1.0)*x1162*x1191))+((x1168*x1183)));
evalcond[3]=((((-1.0)*x1181*x1184))+(((-1.0)*r01*sj3*x1164))+(((-1.0)*r21*sj5*x1168))+((cj5*r20*x1168))+(((-1.0)*r00*x1164*x1165))+((x1167*x1170))+(((-1.0)*sj0*x1192))+((pz*sj0))+(((-1.0)*r01*x1165*x1171)));
evalcond[4]=(((r21*sj5*x1177))+(((-1.0)*r11*sj3*x1164))+(((-1.0)*r11*x1165*x1171))+(((-1.0)*x1184*x1187))+(((-1.0)*r10*x1164*x1165))+((x1170*x1173))+((x1160*x1163))+(((-1.0)*x1166*x1178))+(((-1.0)*cj0*pz)));
evalcond[5]=((((-1.0)*x1165*x1171*x1180))+(((-1.0)*sj3*x1164*x1180))+(((0.03868)*x1173))+(((-1.0)*x1159*x1163))+(((-0.03868)*x1174))+((cj5*x1166*x1170))+(((0.032446)*sj0))+(((-1.0)*x1164*x1165*x1166))+py+(((-1.0)*cj3*x1172*x1175)));
evalcond[6]=(((x1165*x1171*x1186))+x1179+(((0.03868)*x1167))+(((-1.0)*cj5*x1170*x1185))+((sj0*x1191))+((x1164*x1165*x1185))+((cj3*x1169*x1175))+px+((sj3*x1164*x1186))+(((-0.03868)*x1183)));
evalcond[7]=(x1193+(((-1.0)*cj4*sj0*x1187))+((r11*x1169*x1171))+(((0.032446)*x1161))+((r10*x1164*x1169))+((x1167*x1177))+((cj0*px))+(((-1.0)*x1177*x1183)));
evalcond[8]=(x1193+(((-1.0)*x1168*x1173))+((x1168*x1174))+(((-0.032446)*x1162))+(((-1.0)*py*x1176))+(((-1.0)*r00*x1164*x1172))+((x1181*x1182))+(((-1.0)*r01*x1171*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1194=(cj4*r02);
IkReal x1195=(cj5*sj4);
IkReal x1196=((1.0)*sj1);
IkReal x1197=(sj4*sj5);
IkReal x1198=((1.0)*cj4*r22);
if( IKabs((((r21*sj1*x1195))+(((-1.0)*cj4*r22*x1196))+(((-1.0)*cj1*x1194))+((r20*sj1*x1197))+((cj1*r00*x1197))+((cj1*r01*x1195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1196*x1197))+((sj1*x1194))+((cj1*r20*x1197))+(((-1.0)*cj1*x1198))+(((-1.0)*r01*x1195*x1196))+((cj1*r21*x1195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1195))+(((-1.0)*cj4*r22*x1196))+(((-1.0)*cj1*x1194))+((r20*sj1*x1197))+((cj1*r00*x1197))+((cj1*r01*x1195))))+IKsqr(((((-1.0)*r00*x1196*x1197))+((sj1*x1194))+((cj1*r20*x1197))+(((-1.0)*cj1*x1198))+(((-1.0)*r01*x1195*x1196))+((cj1*r21*x1195))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1195))+(((-1.0)*cj4*r22*x1196))+(((-1.0)*cj1*x1194))+((r20*sj1*x1197))+((cj1*r00*x1197))+((cj1*r01*x1195))), ((((-1.0)*r00*x1196*x1197))+((sj1*x1194))+((cj1*r20*x1197))+(((-1.0)*cj1*x1198))+(((-1.0)*r01*x1195*x1196))+((cj1*r21*x1195))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1199=IKsin(j2);
IkReal x1200=IKcos(j2);
IkReal x1201=(cj3*cj4);
IkReal x1202=(cj5*r21);
IkReal x1203=(r00*sj5);
IkReal x1204=(r21*sj5);
IkReal x1205=(r20*sj5);
IkReal x1206=((1.0)*sj1);
IkReal x1207=((0.03868)*cj5);
IkReal x1208=((1.0)*sj4);
IkReal x1209=(cj3*sj4);
IkReal x1210=((0.39225)*sj1);
IkReal x1211=(cj5*r01);
IkReal x1212=(r01*sj5);
IkReal x1213=(cj1*x1199);
IkReal x1214=(cj1*x1200);
IkReal x1215=((1.0)*cj5*sj3);
IkReal x1216=(x1200*x1206);
evalcond[0]=(x1214+((cj4*r22))+((sj1*x1199))+(((-1.0)*x1202*x1208))+(((-1.0)*x1205*x1208)));
evalcond[1]=(x1213+(((-1.0)*x1208*x1211))+(((-1.0)*x1203*x1208))+(((-1.0)*x1216))+((cj4*r02)));
evalcond[2]=(((x1199*x1210))+(((0.39225)*x1214))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1207))+(((0.03868)*x1204)));
evalcond[3]=((((0.03868)*x1212))+(((0.39225)*x1213))+(((-1.0)*x1200*x1210))+(((-1.0)*px))+(((-1.0)*r00*x1207))+(((-0.425001)*sj1)));
evalcond[4]=(x1213+((sj3*x1204))+(((-1.0)*r20*x1215))+((x1201*x1202))+((x1201*x1205))+(((-1.0)*x1216))+((r22*x1209)));
evalcond[5]=((((-1.0)*x1199*x1206))+(((-1.0)*r00*x1215))+((x1201*x1211))+((sj3*x1212))+((x1201*x1203))+((r02*x1209))+(((-1.0)*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1217=(cj5*sj4);
IkReal x1218=(cj4*r02);
IkReal x1219=((1.0)*cj1);
IkReal x1220=(sj4*sj5);
IkReal x1221=((1.0)*cj4*r22);
IkReal x1222=(sj1*x1220);
if( IKabs((((r20*x1222))+(((-1.0)*r00*x1219*x1220))+(((-1.0)*r01*x1217*x1219))+(((-1.0)*sj1*x1221))+((r21*sj1*x1217))+((cj1*x1218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1220))+(((-1.0)*cj4*r22*x1219))+((r00*x1222))+((r01*sj1*x1217))+((cj1*r21*x1217))+(((-1.0)*sj1*x1218)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1222))+(((-1.0)*r00*x1219*x1220))+(((-1.0)*r01*x1217*x1219))+(((-1.0)*sj1*x1221))+((r21*sj1*x1217))+((cj1*x1218))))+IKsqr((((cj1*r20*x1220))+(((-1.0)*cj4*r22*x1219))+((r00*x1222))+((r01*sj1*x1217))+((cj1*r21*x1217))+(((-1.0)*sj1*x1218))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1222))+(((-1.0)*r00*x1219*x1220))+(((-1.0)*r01*x1217*x1219))+(((-1.0)*sj1*x1221))+((r21*sj1*x1217))+((cj1*x1218))), (((cj1*r20*x1220))+(((-1.0)*cj4*r22*x1219))+((r00*x1222))+((r01*sj1*x1217))+((cj1*r21*x1217))+(((-1.0)*sj1*x1218))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1223=IKcos(j2);
IkReal x1224=IKsin(j2);
IkReal x1225=(cj3*sj4);
IkReal x1226=((0.03868)*cj5);
IkReal x1227=(r21*sj5);
IkReal x1228=(cj3*cj4);
IkReal x1229=(r20*sj5);
IkReal x1230=((1.0)*sj4);
IkReal x1231=(r00*sj5);
IkReal x1232=(cj5*r21);
IkReal x1233=((0.39225)*sj1);
IkReal x1234=(cj5*r01);
IkReal x1235=(r01*sj5);
IkReal x1236=(cj1*x1223);
IkReal x1237=(sj1*x1224);
IkReal x1238=((1.0)*cj5*sj3);
IkReal x1239=(cj1*x1224);
IkReal x1240=(sj1*x1223);
IkReal x1241=(x1236+x1237);
evalcond[0]=(x1241+((cj4*r22))+(((-1.0)*x1230*x1232))+(((-1.0)*x1229*x1230)));
evalcond[1]=((((-1.0)*x1239))+x1240+(((-1.0)*x1230*x1234))+(((-1.0)*x1230*x1231))+((cj4*r02)));
evalcond[2]=((((-1.0)*r20*x1226))+(((0.03868)*x1227))+((x1224*x1233))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1236)));
evalcond[3]=((((-1.0)*r00*x1226))+((x1223*x1233))+(((0.03868)*x1235))+(((-1.0)*px))+(((-0.39225)*x1239))+(((0.425001)*sj1)));
evalcond[4]=((((-1.0)*r00*x1238))+x1241+((sj3*x1235))+((r02*x1225))+((x1228*x1234))+((x1228*x1231)));
evalcond[5]=(x1239+((sj3*x1227))+(((-1.0)*r20*x1238))+(((-1.0)*x1240))+((r22*x1225))+((x1228*x1232))+((x1228*x1229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1242=(cj1*cj4);
IkReal x1243=((1.0)*r22);
IkReal x1244=(cj4*sj1);
IkReal x1245=(sj4*sj5);
IkReal x1246=(cj1*cj5*sj4);
IkReal x1247=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*cj1*r10*x1245))+(((-1.0)*r11*x1246))+(((-1.0)*x1243*x1244))+((r20*sj1*x1245))+((r21*x1247))+((r12*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1244))+((r10*sj1*x1245))+(((-1.0)*x1242*x1243))+((r11*x1247))+((cj1*r20*x1245))+((r21*x1246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r10*x1245))+(((-1.0)*r11*x1246))+(((-1.0)*x1243*x1244))+((r20*sj1*x1245))+((r21*x1247))+((r12*x1242))))+IKsqr(((((-1.0)*r12*x1244))+((r10*sj1*x1245))+(((-1.0)*x1242*x1243))+((r11*x1247))+((cj1*r20*x1245))+((r21*x1246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r10*x1245))+(((-1.0)*r11*x1246))+(((-1.0)*x1243*x1244))+((r20*sj1*x1245))+((r21*x1247))+((r12*x1242))), ((((-1.0)*r12*x1244))+((r10*sj1*x1245))+(((-1.0)*x1242*x1243))+((r11*x1247))+((cj1*r20*x1245))+((r21*x1246))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1248=IKcos(j2);
IkReal x1249=IKsin(j2);
IkReal x1250=(cj3*cj4);
IkReal x1251=(cj5*r21);
IkReal x1252=(sj3*sj5);
IkReal x1253=(r10*sj5);
IkReal x1254=((1.0)*sj4);
IkReal x1255=(cj3*sj4);
IkReal x1256=(cj5*r11);
IkReal x1257=((0.03868)*cj5);
IkReal x1258=(r20*sj5);
IkReal x1259=((0.03868)*sj5);
IkReal x1260=(cj1*x1248);
IkReal x1261=(sj1*x1249);
IkReal x1262=((1.0)*cj5*sj3);
IkReal x1263=(cj1*x1249);
IkReal x1264=(sj1*x1248);
IkReal x1265=(x1261+x1260);
evalcond[0]=(x1265+((cj4*r22))+(((-1.0)*x1254*x1258))+(((-1.0)*x1251*x1254)));
evalcond[1]=(x1264+(((-1.0)*x1253*x1254))+(((-1.0)*x1254*x1256))+(((-1.0)*x1263))+((cj4*r12)));
evalcond[2]=((((-1.0)*r20*x1257))+((r21*x1259))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1261))+(((0.39225)*x1260)));
evalcond[3]=(((r11*x1259))+(((-0.39225)*x1263))+(((-1.0)*py))+(((0.425001)*sj1))+(((0.39225)*x1264))+(((-1.0)*r10*x1257)));
evalcond[4]=((((-1.0)*r10*x1262))+((r11*x1252))+x1265+((r12*x1255))+((x1250*x1253))+((x1250*x1256)));
evalcond[5]=(x1263+((r22*x1255))+((r21*x1252))+((x1250*x1258))+((x1250*x1251))+(((-1.0)*x1264))+(((-1.0)*r20*x1262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1266=(cj4*r12);
IkReal x1267=(r10*sj5);
IkReal x1268=(cj1*sj4);
IkReal x1269=(sj1*sj4);
IkReal x1270=(r20*sj5);
IkReal x1271=((1.0)*cj4*r22);
IkReal x1272=((1.0)*x1269);
IkReal x1273=(cj5*x1268);
if( IKabs((((x1269*x1270))+((r11*x1273))+((cj5*r21*x1269))+(((-1.0)*cj1*x1266))+(((-1.0)*sj1*x1271))+((x1267*x1268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1273))+(((-1.0)*x1267*x1272))+(((-1.0)*cj5*r11*x1272))+((sj1*x1266))+(((-1.0)*cj1*x1271))+((x1268*x1270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1269*x1270))+((r11*x1273))+((cj5*r21*x1269))+(((-1.0)*cj1*x1266))+(((-1.0)*sj1*x1271))+((x1267*x1268))))+IKsqr((((r21*x1273))+(((-1.0)*x1267*x1272))+(((-1.0)*cj5*r11*x1272))+((sj1*x1266))+(((-1.0)*cj1*x1271))+((x1268*x1270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1269*x1270))+((r11*x1273))+((cj5*r21*x1269))+(((-1.0)*cj1*x1266))+(((-1.0)*sj1*x1271))+((x1267*x1268))), (((r21*x1273))+(((-1.0)*x1267*x1272))+(((-1.0)*cj5*r11*x1272))+((sj1*x1266))+(((-1.0)*cj1*x1271))+((x1268*x1270))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1274=IKsin(j2);
IkReal x1275=IKcos(j2);
IkReal x1276=(sj3*sj5);
IkReal x1277=(r10*sj5);
IkReal x1278=((1.0)*sj4);
IkReal x1279=((1.0)*sj1);
IkReal x1280=(cj3*sj4);
IkReal x1281=(cj3*cj4);
IkReal x1282=(cj5*r21);
IkReal x1283=((0.03868)*cj5);
IkReal x1284=(r20*sj5);
IkReal x1285=((0.39225)*sj1);
IkReal x1286=((0.03868)*sj5);
IkReal x1287=(cj5*r11);
IkReal x1288=(cj1*x1274);
IkReal x1289=(cj1*x1275);
IkReal x1290=((1.0)*cj5*sj3);
IkReal x1291=(x1275*x1279);
evalcond[0]=(x1289+((cj4*r22))+((sj1*x1274))+(((-1.0)*x1278*x1282))+(((-1.0)*x1278*x1284)));
evalcond[1]=(x1288+(((-1.0)*x1291))+(((-1.0)*x1277*x1278))+(((-1.0)*x1278*x1287))+((cj4*r12)));
evalcond[2]=((((0.39225)*x1289))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x1286))+(((-1.0)*r20*x1283))+((x1274*x1285)));
evalcond[3]=((((0.39225)*x1288))+((r11*x1286))+(((-1.0)*x1275*x1285))+(((-1.0)*py))+(((-1.0)*r10*x1283))+(((-0.425001)*sj1)));
evalcond[4]=(x1288+((r21*x1276))+(((-1.0)*x1291))+((r22*x1280))+(((-1.0)*r20*x1290))+((x1281*x1282))+((x1281*x1284)));
evalcond[5]=((((-1.0)*x1289))+((r11*x1276))+((x1277*x1281))+(((-1.0)*x1274*x1279))+((x1281*x1287))+((r12*x1280))+(((-1.0)*r10*x1290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1292=(cj1*cj4);
IkReal x1293=(cj4*sj1);
IkReal x1294=(cj1*sj4);
IkReal x1295=(r10*sj5);
IkReal x1296=(sj1*sj4);
IkReal x1297=(cj5*r11);
IkReal x1298=((1.0)*cj0*r22);
IkReal x1299=(cj0*cj5*r21);
IkReal x1300=(cj0*r20*sj5);
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1301.valid){
continue;
}
CheckValue<IkReal> x1302 = IKatan2WithCheck(IkReal((((x1296*x1299))+((r12*x1292))+(((-1.0)*x1293*x1298))+(((-1.0)*x1294*x1295))+(((-1.0)*x1294*x1297))+((x1296*x1300)))),IkReal((((x1296*x1297))+((x1295*x1296))+((x1294*x1299))+((x1294*x1300))+(((-1.0)*x1292*x1298))+(((-1.0)*r12*x1293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1302.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1301.value)))+(x1302.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1303=IKcos(j2);
IkReal x1304=IKsin(j2);
IkReal x1305=(cj3*sj4);
IkReal x1306=(sj0*sj1);
IkReal x1307=(sj3*sj5);
IkReal x1308=((0.03868)*sj5);
IkReal x1309=(cj3*cj4);
IkReal x1310=(cj5*r21);
IkReal x1311=((0.03868)*cj5);
IkReal x1312=(cj5*r01);
IkReal x1313=((1.0)*sj4);
IkReal x1314=(cj0*sj1);
IkReal x1315=(cj5*r11);
IkReal x1316=(cj1*x1303);
IkReal x1317=((1.0)*cj5*sj3);
IkReal x1318=(cj1*x1304);
IkReal x1319=((1.0)*x1303);
IkReal x1320=(sj5*x1313);
IkReal x1321=(sj1*x1304);
IkReal x1322=((0.39225)*sj1*x1303);
evalcond[0]=(x1316+x1321+((cj4*r22))+(((-1.0)*r20*x1320))+(((-1.0)*x1310*x1313)));
evalcond[1]=((((0.425001)*cj1))+((r21*x1308))+(((-1.0)*pz))+(((-1.0)*r20*x1311))+(((0.39225)*x1321))+(((0.39225)*x1316)));
evalcond[2]=((((-1.0)*x1306*x1319))+(((-1.0)*r00*x1320))+(((-1.0)*x1312*x1313))+((sj0*x1318))+((cj4*r02)));
evalcond[3]=((((-1.0)*x1313*x1315))+(((-1.0)*cj0*x1318))+(((-1.0)*r10*x1320))+((x1303*x1314))+((cj4*r12)));
evalcond[4]=((((-1.0)*r00*x1311))+(((-0.39225)*x1303*x1306))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-0.425001)*x1306))+(((0.39225)*sj0*x1318))+((r01*x1308)));
evalcond[5]=((((-0.032446)*sj0))+(((-1.0)*py))+((r11*x1308))+(((-0.39225)*cj0*x1318))+(((0.39225)*x1303*x1314))+(((-1.0)*r10*x1311))+(((0.425001)*x1314)));
evalcond[6]=(x1318+((x1309*x1310))+((r21*x1307))+(((-1.0)*sj1*x1319))+(((-1.0)*r20*x1317))+((r22*x1305))+((r20*sj5*x1309)));
evalcond[7]=(((r12*x1305))+((x1309*x1315))+((r11*x1307))+((x1304*x1314))+(((-1.0)*r10*x1317))+((r10*sj5*x1309))+((cj0*x1316)));
evalcond[8]=((((-1.0)*sj0*x1316))+(((-1.0)*r00*x1317))+((x1309*x1312))+((r00*sj5*x1309))+(((-1.0)*x1304*x1306))+((r02*x1305))+((r01*x1307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1323=(cj4*sj1);
IkReal x1324=(cj1*cj4);
IkReal x1325=((1.0)*sj1);
IkReal x1326=(cj1*sj4);
IkReal x1327=(r00*sj5);
IkReal x1328=((1.0)*r22*sj0);
IkReal x1329=(cj5*r01*sj4);
IkReal x1330=(cj5*r21*sj0);
IkReal x1331=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1332.valid){
continue;
}
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal(((((-1.0)*x1323*x1328))+((sj1*sj4*x1330))+((cj5*r01*x1326))+((x1326*x1327))+((sj1*x1331))+(((-1.0)*r02*x1324)))),IkReal(((((-1.0)*x1324*x1328))+(((-1.0)*sj4*x1325*x1327))+(((-1.0)*x1325*x1329))+((r02*x1323))+((x1326*x1330))+((r20*sj0*sj5*x1326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1332.value)))+(x1333.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1334=IKcos(j2);
IkReal x1335=IKsin(j2);
IkReal x1336=(cj3*sj4);
IkReal x1337=(sj0*sj1);
IkReal x1338=(sj3*sj5);
IkReal x1339=((0.03868)*sj5);
IkReal x1340=(cj3*cj4);
IkReal x1341=(cj5*r21);
IkReal x1342=((0.03868)*cj5);
IkReal x1343=(cj5*r01);
IkReal x1344=((1.0)*sj4);
IkReal x1345=(cj0*sj1);
IkReal x1346=(cj5*r11);
IkReal x1347=(cj1*x1334);
IkReal x1348=((1.0)*cj5*sj3);
IkReal x1349=(cj1*x1335);
IkReal x1350=((1.0)*x1334);
IkReal x1351=(sj5*x1344);
IkReal x1352=(sj1*x1335);
IkReal x1353=((0.39225)*sj1*x1334);
evalcond[0]=(x1347+x1352+((cj4*r22))+(((-1.0)*x1341*x1344))+(((-1.0)*r20*x1351)));
evalcond[1]=((((-1.0)*r20*x1342))+(((0.39225)*x1352))+(((0.39225)*x1347))+(((0.425001)*cj1))+((r21*x1339))+(((-1.0)*pz)));
evalcond[2]=(((sj0*x1349))+(((-1.0)*r00*x1351))+(((-1.0)*x1337*x1350))+(((-1.0)*x1343*x1344))+((cj4*r02)));
evalcond[3]=((((-1.0)*r10*x1351))+((x1334*x1345))+(((-1.0)*x1344*x1346))+((cj4*r12))+(((-1.0)*cj0*x1349)));
evalcond[4]=((((-0.39225)*x1334*x1337))+(((0.39225)*sj0*x1349))+((r01*x1339))+(((-1.0)*r00*x1342))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-0.425001)*x1337)));
evalcond[5]=((((-0.39225)*cj0*x1349))+(((-0.032446)*sj0))+((r11*x1339))+(((0.425001)*x1345))+(((-1.0)*py))+(((-1.0)*r10*x1342))+(((0.39225)*x1334*x1345)));
evalcond[6]=(x1349+(((-1.0)*r20*x1348))+(((-1.0)*sj1*x1350))+((x1340*x1341))+((r20*sj5*x1340))+((r21*x1338))+((r22*x1336)));
evalcond[7]=(((r12*x1336))+((r11*x1338))+((r10*sj5*x1340))+((x1340*x1346))+((cj0*x1347))+((x1335*x1345))+(((-1.0)*r10*x1348)));
evalcond[8]=((((-1.0)*sj0*x1347))+((x1340*x1343))+((r01*x1338))+(((-1.0)*r00*x1348))+(((-1.0)*x1335*x1337))+((r00*sj5*x1340))+((r02*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1354=((0.39225)*cj0);
IkReal x1355=((0.9229390048494)*sj4);
IkReal x1356=((0.03868)*cj0);
CheckValue<IkReal> x1357=IKPowWithIntegerCheck(cj0,-2);
if(!x1357.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1357.value)*((((cj5*r10*x1356))+(((-1.0)*r10*sj4*sj5*x1354))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1356))+((cj0*py))+(((-1.0)*cj5*r11*sj4*x1354))+((cj4*r12*x1354)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x1355))+(((-1.0)*r20*sj5*x1355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1357.value)*((((cj5*r10*x1356))+(((-1.0)*r10*sj4*sj5*x1354))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1356))+((cj0*py))+(((-1.0)*cj5*r11*sj4*x1354))+((cj4*r12*x1354))))))+IKsqr(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x1355))+(((-1.0)*r20*sj5*x1355))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1357.value)*((((cj5*r10*x1356))+(((-1.0)*r10*sj4*sj5*x1354))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1356))+((cj0*py))+(((-1.0)*cj5*r11*sj4*x1354))+((cj4*r12*x1354))))), ((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x1355))+(((-1.0)*r20*sj5*x1355))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1358=IKsin(j1);
IkReal x1359=IKcos(j1);
IkReal x1360=cj0*cj0;
IkReal x1361=sj0*sj0;
IkReal x1362=((0.425001)*cj0);
IkReal x1363=((0.39225)*sj5);
IkReal x1364=(cj3*cj4);
IkReal x1365=(cj0*r20);
IkReal x1366=(cj5*r00);
IkReal x1367=((0.03868)*sj0);
IkReal x1368=(sj0*sj4);
IkReal x1369=((0.39225)*sj3);
IkReal x1370=((0.39225)*cj5);
IkReal x1371=(cj0*sj4);
IkReal x1372=(cj5*r10);
IkReal x1373=(r11*sj5);
IkReal x1374=((0.39225)*r22);
IkReal x1375=((1.0)*sj0);
IkReal x1376=((0.03868)*cj0);
IkReal x1377=((0.03868)*cj5);
IkReal x1378=((0.032446)*cj0);
IkReal x1379=(cj0*r21);
IkReal x1380=((0.39225)*r02);
IkReal x1381=(cj0*cj4);
IkReal x1382=(r01*sj5);
IkReal x1383=(cj3*sj4);
IkReal x1384=(r20*sj0);
IkReal x1385=(r21*sj0);
IkReal x1386=((0.39225)*r12);
IkReal x1387=(sj0*x1378);
IkReal x1388=((0.39225)*cj4*sj0);
IkReal x1389=((0.03868)*r21*sj5);
IkReal x1390=((0.425001)*x1358);
IkReal x1391=((0.425001)*x1359);
IkReal x1392=(sj0*x1358*x1362);
evalcond[0]=((((-1.0)*x1389))+(((-1.0)*r20*sj4*x1363))+((cj4*x1374))+pz+(((-1.0)*r21*sj4*x1370))+((r20*x1377))+(((-1.0)*x1391)));
evalcond[1]=((((-1.0)*x1360*x1390))+x1387+((x1381*x1386))+((x1372*x1376))+(((-1.0)*r11*x1370*x1371))+(((-1.0)*x1373*x1376))+(((-1.0)*r10*x1363*x1371))+((cj0*py)));
evalcond[2]=((((-1.0)*x1366*x1367))+(((-1.0)*x1387))+(((-1.0)*px*x1375))+((r01*x1368*x1370))+(((-1.0)*cj4*sj0*x1380))+((r00*x1363*x1368))+((x1367*x1382))+(((-1.0)*x1361*x1390)));
evalcond[3]=(((x1366*x1369))+(((-1.0)*r01*x1364*x1370))+(((-1.0)*r00*x1363*x1364))+(((-1.0)*r21*sj5*x1367))+(((-1.0)*r01*sj3*x1363))+((cj5*r20*x1367))+(((-1.0)*x1380*x1383))+(((-1.0)*sj0*x1391))+((pz*sj0)));
evalcond[4]=((((-1.0)*x1365*x1377))+((r21*sj5*x1376))+(((-1.0)*x1383*x1386))+((x1359*x1362))+(((-1.0)*r11*x1364*x1370))+(((-1.0)*r10*x1363*x1364))+((x1369*x1372))+(((-1.0)*r11*sj3*x1363))+(((-1.0)*cj0*pz)));
evalcond[5]=((((-1.0)*cj3*x1371*x1374))+((cj5*x1365*x1369))+(((0.032446)*sj0))+(((0.03868)*x1372))+(((-0.03868)*x1373))+py+(((-1.0)*x1363*x1364*x1365))+(((-1.0)*x1364*x1370*x1379))+(((-1.0)*sj3*x1363*x1379))+(((-1.0)*x1358*x1362)));
evalcond[6]=(x1378+((x1364*x1370*x1385))+((x1363*x1364*x1384))+(((-0.03868)*x1382))+((cj3*x1368*x1374))+((sj0*x1390))+(((0.03868)*x1366))+px+(((-1.0)*cj5*x1369*x1384))+((sj3*x1363*x1385)));
evalcond[7]=(x1392+(((-1.0)*cj4*sj0*x1386))+((x1366*x1376))+(((-1.0)*x1376*x1382))+((r10*x1363*x1368))+(((0.032446)*x1360))+((cj0*px))+((r11*x1368*x1370)));
evalcond[8]=(x1392+((x1380*x1381))+((x1367*x1373))+(((-1.0)*r01*x1370*x1371))+(((-1.0)*x1367*x1372))+(((-1.0)*py*x1375))+(((-0.032446)*x1361))+(((-1.0)*r00*x1363*x1371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1393=(cj4*r02);
IkReal x1394=(cj5*sj4);
IkReal x1395=((1.0)*sj1);
IkReal x1396=(sj4*sj5);
IkReal x1397=((1.0)*cj4*r22);
if( IKabs((((cj1*r00*x1396))+((cj1*r01*x1394))+(((-1.0)*cj1*x1393))+((r21*sj1*x1394))+((r20*sj1*x1396))+(((-1.0)*cj4*r22*x1395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x1394))+(((-1.0)*r01*x1394*x1395))+((sj1*x1393))+(((-1.0)*r00*x1395*x1396))+(((-1.0)*cj1*x1397))+((cj1*r20*x1396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r00*x1396))+((cj1*r01*x1394))+(((-1.0)*cj1*x1393))+((r21*sj1*x1394))+((r20*sj1*x1396))+(((-1.0)*cj4*r22*x1395))))+IKsqr((((cj1*r21*x1394))+(((-1.0)*r01*x1394*x1395))+((sj1*x1393))+(((-1.0)*r00*x1395*x1396))+(((-1.0)*cj1*x1397))+((cj1*r20*x1396))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r00*x1396))+((cj1*r01*x1394))+(((-1.0)*cj1*x1393))+((r21*sj1*x1394))+((r20*sj1*x1396))+(((-1.0)*cj4*r22*x1395))), (((cj1*r21*x1394))+(((-1.0)*r01*x1394*x1395))+((sj1*x1393))+(((-1.0)*r00*x1395*x1396))+(((-1.0)*cj1*x1397))+((cj1*r20*x1396))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1398=IKsin(j2);
IkReal x1399=IKcos(j2);
IkReal x1400=(cj3*cj4);
IkReal x1401=(cj5*r21);
IkReal x1402=(r00*sj5);
IkReal x1403=(r21*sj5);
IkReal x1404=(r20*sj5);
IkReal x1405=((1.0)*sj1);
IkReal x1406=((0.03868)*cj5);
IkReal x1407=((1.0)*sj4);
IkReal x1408=(cj3*sj4);
IkReal x1409=((0.39225)*sj1);
IkReal x1410=(cj5*r01);
IkReal x1411=(r01*sj5);
IkReal x1412=(cj1*x1398);
IkReal x1413=(cj1*x1399);
IkReal x1414=((1.0)*cj5*sj3);
IkReal x1415=(x1399*x1405);
evalcond[0]=(((cj4*r22))+((sj1*x1398))+(((-1.0)*x1404*x1407))+x1413+(((-1.0)*x1401*x1407)));
evalcond[1]=((((-1.0)*x1415))+(((-1.0)*x1407*x1410))+(((-1.0)*x1402*x1407))+x1412+((cj4*r02)));
evalcond[2]=((((0.03868)*x1403))+(((0.425001)*cj1))+(((-1.0)*pz))+((x1398*x1409))+(((0.39225)*x1413))+(((-1.0)*r20*x1406)));
evalcond[3]=((((-1.0)*x1399*x1409))+(((0.03868)*x1411))+(((-1.0)*r00*x1406))+(((-1.0)*px))+(((0.39225)*x1412))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*x1415))+((sj3*x1403))+x1412+(((-1.0)*r20*x1414))+((r22*x1408))+((x1400*x1401))+((x1400*x1404)));
evalcond[5]=(((r02*x1408))+((x1400*x1410))+(((-1.0)*x1398*x1405))+(((-1.0)*r00*x1414))+((x1400*x1402))+((sj3*x1411))+(((-1.0)*x1413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1416=(cj5*sj4);
IkReal x1417=(cj4*r02);
IkReal x1418=((1.0)*cj1);
IkReal x1419=(sj4*sj5);
IkReal x1420=((1.0)*cj4*r22);
IkReal x1421=(sj1*x1419);
if( IKabs(((((-1.0)*r01*x1416*x1418))+(((-1.0)*sj1*x1420))+((r21*sj1*x1416))+((cj1*x1417))+(((-1.0)*r00*x1418*x1419))+((r20*x1421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1421))+((cj1*r20*x1419))+(((-1.0)*sj1*x1417))+((cj1*r21*x1416))+((r01*sj1*x1416))+(((-1.0)*cj4*r22*x1418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1416*x1418))+(((-1.0)*sj1*x1420))+((r21*sj1*x1416))+((cj1*x1417))+(((-1.0)*r00*x1418*x1419))+((r20*x1421))))+IKsqr((((r00*x1421))+((cj1*r20*x1419))+(((-1.0)*sj1*x1417))+((cj1*r21*x1416))+((r01*sj1*x1416))+(((-1.0)*cj4*r22*x1418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1416*x1418))+(((-1.0)*sj1*x1420))+((r21*sj1*x1416))+((cj1*x1417))+(((-1.0)*r00*x1418*x1419))+((r20*x1421))), (((r00*x1421))+((cj1*r20*x1419))+(((-1.0)*sj1*x1417))+((cj1*r21*x1416))+((r01*sj1*x1416))+(((-1.0)*cj4*r22*x1418))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1422=IKcos(j2);
IkReal x1423=IKsin(j2);
IkReal x1424=(cj3*sj4);
IkReal x1425=((0.03868)*cj5);
IkReal x1426=(r21*sj5);
IkReal x1427=(cj3*cj4);
IkReal x1428=(r20*sj5);
IkReal x1429=((1.0)*sj4);
IkReal x1430=(r00*sj5);
IkReal x1431=(cj5*r21);
IkReal x1432=((0.39225)*sj1);
IkReal x1433=(cj5*r01);
IkReal x1434=(r01*sj5);
IkReal x1435=(cj1*x1422);
IkReal x1436=(sj1*x1423);
IkReal x1437=((1.0)*cj5*sj3);
IkReal x1438=(cj1*x1423);
IkReal x1439=(sj1*x1422);
IkReal x1440=(x1436+x1435);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1429*x1431))+x1440+(((-1.0)*x1428*x1429)));
evalcond[1]=((((-1.0)*x1438))+(((-1.0)*x1429*x1430))+(((-1.0)*x1429*x1433))+x1439+((cj4*r02)));
evalcond[2]=((((-1.0)*r20*x1425))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1435))+(((0.03868)*x1426))+((x1423*x1432)));
evalcond[3]=((((0.03868)*x1434))+(((-0.39225)*x1438))+(((-1.0)*px))+(((0.425001)*sj1))+((x1422*x1432))+(((-1.0)*r00*x1425)));
evalcond[4]=(((x1427*x1430))+((x1427*x1433))+((sj3*x1434))+(((-1.0)*r00*x1437))+((r02*x1424))+x1440);
evalcond[5]=((((-1.0)*x1439))+((r22*x1424))+((x1427*x1431))+x1438+(((-1.0)*r20*x1437))+((sj3*x1426))+((x1427*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1441=(cj1*cj4);
IkReal x1442=((1.0)*r22);
IkReal x1443=(cj4*sj1);
IkReal x1444=(sj4*sj5);
IkReal x1445=(cj1*cj5*sj4);
IkReal x1446=(cj5*sj1*sj4);
if( IKabs((((r12*x1441))+((r21*x1446))+((r20*sj1*x1444))+(((-1.0)*r11*x1445))+(((-1.0)*x1442*x1443))+(((-1.0)*cj1*r10*x1444)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x1444))+((r11*x1446))+((cj1*r20*x1444))+((r21*x1445))+(((-1.0)*x1441*x1442))+(((-1.0)*r12*x1443)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1441))+((r21*x1446))+((r20*sj1*x1444))+(((-1.0)*r11*x1445))+(((-1.0)*x1442*x1443))+(((-1.0)*cj1*r10*x1444))))+IKsqr((((r10*sj1*x1444))+((r11*x1446))+((cj1*r20*x1444))+((r21*x1445))+(((-1.0)*x1441*x1442))+(((-1.0)*r12*x1443))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x1441))+((r21*x1446))+((r20*sj1*x1444))+(((-1.0)*r11*x1445))+(((-1.0)*x1442*x1443))+(((-1.0)*cj1*r10*x1444))), (((r10*sj1*x1444))+((r11*x1446))+((cj1*r20*x1444))+((r21*x1445))+(((-1.0)*x1441*x1442))+(((-1.0)*r12*x1443))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1447=IKcos(j2);
IkReal x1448=IKsin(j2);
IkReal x1449=(cj3*cj4);
IkReal x1450=(cj5*r21);
IkReal x1451=(sj3*sj5);
IkReal x1452=(r10*sj5);
IkReal x1453=((1.0)*sj4);
IkReal x1454=(cj3*sj4);
IkReal x1455=(cj5*r11);
IkReal x1456=((0.03868)*cj5);
IkReal x1457=(r20*sj5);
IkReal x1458=((0.03868)*sj5);
IkReal x1459=(cj1*x1447);
IkReal x1460=(sj1*x1448);
IkReal x1461=((1.0)*cj5*sj3);
IkReal x1462=(cj1*x1448);
IkReal x1463=(sj1*x1447);
IkReal x1464=(x1460+x1459);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1453*x1457))+x1464+(((-1.0)*x1450*x1453)));
evalcond[1]=((((-1.0)*x1453*x1455))+x1463+(((-1.0)*x1452*x1453))+(((-1.0)*x1462))+((cj4*r12)));
evalcond[2]=((((-1.0)*r20*x1456))+(((0.425001)*cj1))+(((0.39225)*x1459))+(((-1.0)*pz))+((r21*x1458))+(((0.39225)*x1460)));
evalcond[3]=((((-0.39225)*x1462))+((r11*x1458))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x1456))+(((0.39225)*x1463)));
evalcond[4]=(((r11*x1451))+((r12*x1454))+x1464+((x1449*x1455))+((x1449*x1452))+(((-1.0)*r10*x1461)));
evalcond[5]=((((-1.0)*r20*x1461))+((r21*x1451))+x1462+((r22*x1454))+((x1449*x1450))+((x1449*x1457))+(((-1.0)*x1463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1465=(cj4*r12);
IkReal x1466=(r10*sj5);
IkReal x1467=(cj1*sj4);
IkReal x1468=(sj1*sj4);
IkReal x1469=(r20*sj5);
IkReal x1470=((1.0)*cj4*r22);
IkReal x1471=((1.0)*x1468);
IkReal x1472=(cj5*x1467);
if( IKabs(((((-1.0)*sj1*x1470))+((r11*x1472))+((x1468*x1469))+((x1466*x1467))+((cj5*r21*x1468))+(((-1.0)*cj1*x1465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1472))+(((-1.0)*cj1*x1470))+(((-1.0)*cj5*r11*x1471))+((sj1*x1465))+((x1467*x1469))+(((-1.0)*x1466*x1471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1470))+((r11*x1472))+((x1468*x1469))+((x1466*x1467))+((cj5*r21*x1468))+(((-1.0)*cj1*x1465))))+IKsqr((((r21*x1472))+(((-1.0)*cj1*x1470))+(((-1.0)*cj5*r11*x1471))+((sj1*x1465))+((x1467*x1469))+(((-1.0)*x1466*x1471))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x1470))+((r11*x1472))+((x1468*x1469))+((x1466*x1467))+((cj5*r21*x1468))+(((-1.0)*cj1*x1465))), (((r21*x1472))+(((-1.0)*cj1*x1470))+(((-1.0)*cj5*r11*x1471))+((sj1*x1465))+((x1467*x1469))+(((-1.0)*x1466*x1471))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1473=IKsin(j2);
IkReal x1474=IKcos(j2);
IkReal x1475=(sj3*sj5);
IkReal x1476=(r10*sj5);
IkReal x1477=((1.0)*sj4);
IkReal x1478=((1.0)*sj1);
IkReal x1479=(cj3*sj4);
IkReal x1480=(cj3*cj4);
IkReal x1481=(cj5*r21);
IkReal x1482=((0.03868)*cj5);
IkReal x1483=(r20*sj5);
IkReal x1484=((0.39225)*sj1);
IkReal x1485=((0.03868)*sj5);
IkReal x1486=(cj5*r11);
IkReal x1487=(cj1*x1473);
IkReal x1488=(cj1*x1474);
IkReal x1489=((1.0)*cj5*sj3);
IkReal x1490=(x1474*x1478);
evalcond[0]=(((cj4*r22))+((sj1*x1473))+x1488+(((-1.0)*x1477*x1483))+(((-1.0)*x1477*x1481)));
evalcond[1]=((((-1.0)*x1476*x1477))+(((-1.0)*x1490))+x1487+(((-1.0)*x1477*x1486))+((cj4*r12)));
evalcond[2]=((((-1.0)*r20*x1482))+((x1473*x1484))+((r21*x1485))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1488)));
evalcond[3]=(((r11*x1485))+(((-1.0)*py))+(((-1.0)*x1474*x1484))+(((0.39225)*x1487))+(((-0.425001)*sj1))+(((-1.0)*r10*x1482)));
evalcond[4]=(((r22*x1479))+((x1480*x1483))+((x1480*x1481))+((r21*x1475))+(((-1.0)*r20*x1489))+(((-1.0)*x1490))+x1487);
evalcond[5]=(((r12*x1479))+((x1476*x1480))+((r11*x1475))+((x1480*x1486))+(((-1.0)*x1488))+(((-1.0)*r10*x1489))+(((-1.0)*x1473*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1491=(cj1*cj4);
IkReal x1492=(cj4*sj1);
IkReal x1493=(cj1*sj4);
IkReal x1494=(r10*sj5);
IkReal x1495=(sj1*sj4);
IkReal x1496=(cj5*r11);
IkReal x1497=((1.0)*cj0*r22);
IkReal x1498=(cj0*cj5*r21);
IkReal x1499=(cj0*r20*sj5);
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal(((((-1.0)*x1493*x1496))+(((-1.0)*x1493*x1494))+((x1495*x1498))+((x1495*x1499))+((r12*x1491))+(((-1.0)*x1492*x1497)))),IkReal((((x1494*x1495))+((x1495*x1496))+(((-1.0)*x1491*x1497))+((x1493*x1499))+((x1493*x1498))+(((-1.0)*r12*x1492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1500.value)))+(x1501.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1502=IKcos(j2);
IkReal x1503=IKsin(j2);
IkReal x1504=(cj3*sj4);
IkReal x1505=(sj0*sj1);
IkReal x1506=(sj3*sj5);
IkReal x1507=((0.03868)*sj5);
IkReal x1508=(cj3*cj4);
IkReal x1509=(cj5*r21);
IkReal x1510=((0.03868)*cj5);
IkReal x1511=(cj5*r01);
IkReal x1512=((1.0)*sj4);
IkReal x1513=(cj0*sj1);
IkReal x1514=(cj5*r11);
IkReal x1515=(cj1*x1502);
IkReal x1516=((1.0)*cj5*sj3);
IkReal x1517=(cj1*x1503);
IkReal x1518=((1.0)*x1502);
IkReal x1519=(sj5*x1512);
IkReal x1520=(sj1*x1503);
IkReal x1521=((0.39225)*sj1*x1502);
evalcond[0]=((((-1.0)*r20*x1519))+((cj4*r22))+x1520+x1515+(((-1.0)*x1509*x1512)));
evalcond[1]=((((-1.0)*r20*x1510))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x1507))+(((0.39225)*x1515))+(((0.39225)*x1520)));
evalcond[2]=((((-1.0)*r00*x1519))+((sj0*x1517))+(((-1.0)*x1505*x1518))+(((-1.0)*x1511*x1512))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj0*x1517))+(((-1.0)*x1512*x1514))+((x1502*x1513))+(((-1.0)*r10*x1519))+((cj4*r12)));
evalcond[4]=((((-0.425001)*x1505))+(((-1.0)*r00*x1510))+((r01*x1507))+(((0.39225)*sj0*x1517))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-0.39225)*x1502*x1505)));
evalcond[5]=((((-0.39225)*cj0*x1517))+(((-0.032446)*sj0))+((r11*x1507))+(((0.39225)*x1502*x1513))+(((-1.0)*py))+(((0.425001)*x1513))+(((-1.0)*r10*x1510)));
evalcond[6]=((((-1.0)*r20*x1516))+((x1508*x1509))+x1517+((r21*x1506))+((r22*x1504))+((r20*sj5*x1508))+(((-1.0)*sj1*x1518)));
evalcond[7]=(((cj0*x1515))+((x1508*x1514))+((r11*x1506))+((r12*x1504))+((x1503*x1513))+(((-1.0)*r10*x1516))+((r10*sj5*x1508)));
evalcond[8]=(((x1508*x1511))+(((-1.0)*x1503*x1505))+(((-1.0)*r00*x1516))+((r01*x1506))+(((-1.0)*sj0*x1515))+((r02*x1504))+((r00*sj5*x1508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1522=(cj4*sj1);
IkReal x1523=(cj1*cj4);
IkReal x1524=((1.0)*sj1);
IkReal x1525=(cj1*sj4);
IkReal x1526=(r00*sj5);
IkReal x1527=((1.0)*r22*sj0);
IkReal x1528=(cj5*r01*sj4);
IkReal x1529=(cj5*r21*sj0);
IkReal x1530=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1531.valid){
continue;
}
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal((((x1525*x1526))+((cj5*r01*x1525))+((sj1*x1530))+(((-1.0)*x1522*x1527))+((sj1*sj4*x1529))+(((-1.0)*r02*x1523)))),IkReal((((x1525*x1529))+(((-1.0)*x1524*x1528))+(((-1.0)*sj4*x1524*x1526))+(((-1.0)*x1523*x1527))+((r20*sj0*sj5*x1525))+((r02*x1522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1531.value)))+(x1532.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1533=IKcos(j2);
IkReal x1534=IKsin(j2);
IkReal x1535=(cj3*sj4);
IkReal x1536=(sj0*sj1);
IkReal x1537=(sj3*sj5);
IkReal x1538=((0.03868)*sj5);
IkReal x1539=(cj3*cj4);
IkReal x1540=(cj5*r21);
IkReal x1541=((0.03868)*cj5);
IkReal x1542=(cj5*r01);
IkReal x1543=((1.0)*sj4);
IkReal x1544=(cj0*sj1);
IkReal x1545=(cj5*r11);
IkReal x1546=(cj1*x1533);
IkReal x1547=((1.0)*cj5*sj3);
IkReal x1548=(cj1*x1534);
IkReal x1549=((1.0)*x1533);
IkReal x1550=(sj5*x1543);
IkReal x1551=(sj1*x1534);
IkReal x1552=((0.39225)*sj1*x1533);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1540*x1543))+x1546+x1551+(((-1.0)*r20*x1550)));
evalcond[1]=((((0.39225)*x1546))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x1538))+(((-1.0)*r20*x1541))+(((0.39225)*x1551)));
evalcond[2]=(((sj0*x1548))+(((-1.0)*x1536*x1549))+(((-1.0)*x1542*x1543))+(((-1.0)*r00*x1550))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj0*x1548))+(((-1.0)*x1543*x1545))+((x1533*x1544))+(((-1.0)*r10*x1550))+((cj4*r12)));
evalcond[4]=((((-0.39225)*x1533*x1536))+((r01*x1538))+(((-0.425001)*x1536))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-1.0)*r00*x1541))+(((0.39225)*sj0*x1548)));
evalcond[5]=((((0.425001)*x1544))+(((-0.032446)*sj0))+((r11*x1538))+(((-0.39225)*cj0*x1548))+(((-1.0)*py))+(((0.39225)*x1533*x1544))+(((-1.0)*r10*x1541)));
evalcond[6]=(((x1539*x1540))+((r21*x1537))+x1548+(((-1.0)*r20*x1547))+((r22*x1535))+((r20*sj5*x1539))+(((-1.0)*sj1*x1549)));
evalcond[7]=(((r12*x1535))+((r10*sj5*x1539))+((x1539*x1545))+((r11*x1537))+((x1534*x1544))+((cj0*x1546))+(((-1.0)*r10*x1547)));
evalcond[8]=(((x1539*x1542))+((r01*x1537))+((r00*sj5*x1539))+(((-1.0)*r00*x1547))+((r02*x1535))+(((-1.0)*x1534*x1536))+(((-1.0)*sj0*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1553=(r20*sj0);
IkReal x1554=((1.0)*sj4);
IkReal x1555=(r21*sj0);
CheckValue<IkReal> x1556 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1553))+((sj5*x1555)))),IkReal((((r22*sj0*sj4))+((cj4*sj5*x1553))+((cj4*cj5*x1555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x1554))+(((-1.0)*cj5*r01*x1554))+((cj4*r02)))),-1);
if(!x1557.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1556.value)+(((1.5707963267949)*(x1557.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1558=IKsin(j3);
IkReal x1559=IKcos(j3);
IkReal x1560=((1.0)*cj5);
IkReal x1561=((1.0)*sj5);
IkReal x1562=(cj4*x1558);
IkReal x1563=(sj5*x1559);
IkReal x1564=((1.0)*sj4*x1558);
evalcond[0]=((((-1.0)*r20*x1559*x1560))+(((-1.0)*r20*x1561*x1562))+(((-1.0)*r22*x1564))+((r21*x1563))+(((-1.0)*r21*x1560*x1562)));
evalcond[1]=((((-1.0)*r02*x1564))+cj0+(((-1.0)*r00*x1561*x1562))+(((-1.0)*r00*x1559*x1560))+(((-1.0)*r01*x1560*x1562))+((r01*x1563)));
evalcond[2]=(sj0+(((-1.0)*r10*x1561*x1562))+((r11*x1563))+(((-1.0)*r11*x1560*x1562))+(((-1.0)*r12*x1564))+(((-1.0)*r10*x1559*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1565=((0.9229390048494)*cj4);
IkReal x1566=((0.9229390048494)*sj4);
IkReal x1567=((0.0910115505610575)*cj5);
IkReal x1568=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x1566))+((r12*x1565))+(((-1.0)*r10*sj5*x1566))+((r10*x1567))+(((-1.0)*r11*x1568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x1566))+(((2.35293564015143)*pz))+((r20*x1567))+(((-1.0)*r21*x1568))+(((-1.0)*cj5*r21*x1566))+((r22*x1565)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x1566))+((r12*x1565))+(((-1.0)*r10*sj5*x1566))+((r10*x1567))+(((-1.0)*r11*x1568))))+IKsqr(((((-1.0)*r20*sj5*x1566))+(((2.35293564015143)*pz))+((r20*x1567))+(((-1.0)*r21*x1568))+(((-1.0)*cj5*r21*x1566))+((r22*x1565))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*cj5*r11*x1566))+((r12*x1565))+(((-1.0)*r10*sj5*x1566))+((r10*x1567))+(((-1.0)*r11*x1568))), ((((-1.0)*r20*sj5*x1566))+(((2.35293564015143)*pz))+((r20*x1567))+(((-1.0)*r21*x1568))+(((-1.0)*cj5*r21*x1566))+((r22*x1565))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1569=((0.39225)*r10);
IkReal x1570=(sj4*sj5);
IkReal x1571=(cj5*sj3);
IkReal x1572=((0.39225)*r11);
IkReal x1573=(sj3*sj5);
IkReal x1574=(cj3*cj4);
IkReal x1575=((0.03868)*sj5);
IkReal x1576=((0.39225)*r21);
IkReal x1577=((0.03868)*cj5);
IkReal x1578=((0.39225)*cj4);
IkReal x1579=((0.39225)*r20);
IkReal x1580=(cj5*sj4);
IkReal x1581=(r10*x1577);
IkReal x1582=(r11*x1575);
IkReal x1583=((0.425001)*(IKsin(j1)));
IkReal x1584=(r21*x1575);
IkReal x1585=((0.425001)*(IKcos(j1)));
IkReal x1586=(r20*x1577);
IkReal x1587=((0.39225)*cj3*sj4);
IkReal x1588=(x1581+py);
IkReal x1589=(x1582+x1583);
IkReal x1590=(x1584+x1585);
evalcond[0]=((((-1.0)*x1589))+(((-1.0)*x1572*x1580))+((r12*x1578))+x1588+(((-1.0)*x1569*x1570)));
evalcond[1]=((((-1.0)*x1590))+(((-1.0)*x1570*x1579))+x1586+pz+((r22*x1578))+(((-1.0)*x1576*x1580)));
evalcond[2]=((((-1.0)*x1589))+((x1571*x1579))+(((-1.0)*x1573*x1576))+(((-1.0)*sj5*x1574*x1579))+x1588+(((-1.0)*r22*x1587))+(((-1.0)*cj5*x1574*x1576)));
evalcond[3]=((((-1.0)*x1586))+(((-1.0)*cj5*x1572*x1574))+((x1569*x1571))+(((-1.0)*x1572*x1573))+(((-1.0)*sj5*x1569*x1574))+(((-1.0)*pz))+x1590+(((-1.0)*r12*x1587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1591=(cj1*cj4);
IkReal x1592=((1.0)*r22);
IkReal x1593=(cj4*sj1);
IkReal x1594=(sj4*sj5);
IkReal x1595=(cj1*cj5*sj4);
IkReal x1596=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*r11*x1595))+(((-1.0)*x1592*x1593))+(((-1.0)*cj1*r10*x1594))+((r12*x1591))+((r20*sj1*x1594))+((r21*x1596)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x1594))+((r11*x1596))+(((-1.0)*x1591*x1592))+((r21*x1595))+(((-1.0)*r12*x1593))+((cj1*r20*x1594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1595))+(((-1.0)*x1592*x1593))+(((-1.0)*cj1*r10*x1594))+((r12*x1591))+((r20*sj1*x1594))+((r21*x1596))))+IKsqr((((r10*sj1*x1594))+((r11*x1596))+(((-1.0)*x1591*x1592))+((r21*x1595))+(((-1.0)*r12*x1593))+((cj1*r20*x1594))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1595))+(((-1.0)*x1592*x1593))+(((-1.0)*cj1*r10*x1594))+((r12*x1591))+((r20*sj1*x1594))+((r21*x1596))), (((r10*sj1*x1594))+((r11*x1596))+(((-1.0)*x1591*x1592))+((r21*x1595))+(((-1.0)*r12*x1593))+((cj1*r20*x1594))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1597=IKcos(j2);
IkReal x1598=IKsin(j2);
IkReal x1599=(cj3*cj4);
IkReal x1600=(cj5*r21);
IkReal x1601=(sj3*sj5);
IkReal x1602=(r10*sj5);
IkReal x1603=((1.0)*sj4);
IkReal x1604=(cj3*sj4);
IkReal x1605=(cj5*r11);
IkReal x1606=((0.03868)*cj5);
IkReal x1607=(r20*sj5);
IkReal x1608=((0.03868)*sj5);
IkReal x1609=(cj1*x1597);
IkReal x1610=(sj1*x1598);
IkReal x1611=((1.0)*cj5*sj3);
IkReal x1612=(cj1*x1598);
IkReal x1613=(sj1*x1597);
IkReal x1614=(x1610+x1609);
evalcond[0]=(((cj4*r22))+x1614+(((-1.0)*x1600*x1603))+(((-1.0)*x1603*x1607)));
evalcond[1]=((((-1.0)*x1612))+x1613+(((-1.0)*x1603*x1605))+(((-1.0)*x1602*x1603))+((cj4*r12)));
evalcond[2]=((((-1.0)*r20*x1606))+((r21*x1608))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1609))+(((0.39225)*x1610)));
evalcond[3]=(((r11*x1608))+(((-0.39225)*x1612))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x1606))+(((0.39225)*x1613)));
evalcond[4]=(x1614+((x1599*x1602))+((x1599*x1605))+((r11*x1601))+((r12*x1604))+(((-1.0)*r10*x1611)));
evalcond[5]=((((-1.0)*x1613))+(((-1.0)*r20*x1611))+x1612+((x1599*x1607))+((x1599*x1600))+((r21*x1601))+((r22*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1615=((0.9229390048494)*sj4);
IkReal x1616=((0.0910115505610575)*cj5);
IkReal x1617=((0.9229390048494)*cj4);
IkReal x1618=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r12*x1617))+((cj5*r11*x1615))+((r10*sj5*x1615))+((r11*x1618))+(((-1.0)*r10*x1616))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*x1616))+(((-1.0)*r21*x1618))+(((-1.0)*r20*sj5*x1615))+((r22*x1617))+(((-1.0)*cj5*r21*x1615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1617))+((cj5*r11*x1615))+((r10*sj5*x1615))+((r11*x1618))+(((-1.0)*r10*x1616))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+((r20*x1616))+(((-1.0)*r21*x1618))+(((-1.0)*r20*sj5*x1615))+((r22*x1617))+(((-1.0)*cj5*r21*x1615))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1617))+((cj5*r11*x1615))+((r10*sj5*x1615))+((r11*x1618))+(((-1.0)*r10*x1616))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+((r20*x1616))+(((-1.0)*r21*x1618))+(((-1.0)*r20*sj5*x1615))+((r22*x1617))+(((-1.0)*cj5*r21*x1615))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1619=((0.39225)*r10);
IkReal x1620=(sj4*sj5);
IkReal x1621=(cj5*sj3);
IkReal x1622=((0.39225)*r11);
IkReal x1623=(sj3*sj5);
IkReal x1624=(cj3*cj4);
IkReal x1625=((0.03868)*sj5);
IkReal x1626=((0.39225)*r21);
IkReal x1627=((0.03868)*cj5);
IkReal x1628=((0.39225)*cj4);
IkReal x1629=((0.39225)*r20);
IkReal x1630=(cj5*sj4);
IkReal x1631=((0.425001)*(IKsin(j1)));
IkReal x1632=(r10*x1627);
IkReal x1633=(r11*x1625);
IkReal x1634=(r20*x1627);
IkReal x1635=(r21*x1625);
IkReal x1636=((0.425001)*(IKcos(j1)));
IkReal x1637=((0.39225)*cj3*sj4);
IkReal x1638=(x1634+pz);
IkReal x1639=(x1635+x1636);
IkReal x1640=(x1631+x1632);
evalcond[0]=(x1638+(((-1.0)*x1639))+(((-1.0)*x1620*x1629))+((r22*x1628))+(((-1.0)*x1626*x1630)));
evalcond[1]=((((-1.0)*r12*x1628))+x1633+(((-1.0)*x1640))+(((-1.0)*py))+((x1622*x1630))+((x1619*x1620)));
evalcond[2]=(((cj5*x1624*x1626))+x1640+((x1623*x1626))+((sj5*x1624*x1629))+(((-1.0)*x1633))+(((-1.0)*x1621*x1629))+py+((r22*x1637)));
evalcond[3]=((((-1.0)*sj5*x1619*x1624))+(((-1.0)*r12*x1637))+x1638+(((-1.0)*x1639))+(((-1.0)*x1622*x1623))+(((-1.0)*cj5*x1622*x1624))+((x1619*x1621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1641=(cj4*r12);
IkReal x1642=(r10*sj5);
IkReal x1643=(cj1*sj4);
IkReal x1644=(sj1*sj4);
IkReal x1645=(r20*sj5);
IkReal x1646=((1.0)*cj4*r22);
IkReal x1647=((1.0)*x1644);
IkReal x1648=(cj5*x1643);
if( IKabs((((r11*x1648))+(((-1.0)*sj1*x1646))+((cj5*r21*x1644))+((x1644*x1645))+((x1642*x1643))+(((-1.0)*cj1*x1641)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1648))+((sj1*x1641))+(((-1.0)*cj5*r11*x1647))+(((-1.0)*cj1*x1646))+(((-1.0)*x1642*x1647))+((x1643*x1645)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1648))+(((-1.0)*sj1*x1646))+((cj5*r21*x1644))+((x1644*x1645))+((x1642*x1643))+(((-1.0)*cj1*x1641))))+IKsqr((((r21*x1648))+((sj1*x1641))+(((-1.0)*cj5*r11*x1647))+(((-1.0)*cj1*x1646))+(((-1.0)*x1642*x1647))+((x1643*x1645))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x1648))+(((-1.0)*sj1*x1646))+((cj5*r21*x1644))+((x1644*x1645))+((x1642*x1643))+(((-1.0)*cj1*x1641))), (((r21*x1648))+((sj1*x1641))+(((-1.0)*cj5*r11*x1647))+(((-1.0)*cj1*x1646))+(((-1.0)*x1642*x1647))+((x1643*x1645))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1649=IKsin(j2);
IkReal x1650=IKcos(j2);
IkReal x1651=(sj3*sj5);
IkReal x1652=(r10*sj5);
IkReal x1653=((1.0)*sj4);
IkReal x1654=((1.0)*sj1);
IkReal x1655=(cj3*sj4);
IkReal x1656=(cj3*cj4);
IkReal x1657=(cj5*r21);
IkReal x1658=((0.03868)*cj5);
IkReal x1659=(r20*sj5);
IkReal x1660=((0.39225)*sj1);
IkReal x1661=((0.03868)*sj5);
IkReal x1662=(cj5*r11);
IkReal x1663=(cj1*x1649);
IkReal x1664=(cj1*x1650);
IkReal x1665=((1.0)*cj5*sj3);
IkReal x1666=(x1650*x1654);
evalcond[0]=(((cj4*r22))+((sj1*x1649))+x1664+(((-1.0)*x1653*x1657))+(((-1.0)*x1653*x1659)));
evalcond[1]=((((-1.0)*x1652*x1653))+x1663+(((-1.0)*x1653*x1662))+(((-1.0)*x1666))+((cj4*r12)));
evalcond[2]=((((-1.0)*r20*x1658))+(((0.425001)*cj1))+(((-1.0)*pz))+((x1649*x1660))+(((0.39225)*x1664))+((r21*x1661)));
evalcond[3]=(((r11*x1661))+(((-1.0)*r10*x1658))+(((-1.0)*x1650*x1660))+(((-1.0)*py))+(((0.39225)*x1663))+(((-0.425001)*sj1)));
evalcond[4]=(((x1656*x1659))+((x1656*x1657))+((r22*x1655))+x1663+(((-1.0)*r20*x1665))+(((-1.0)*x1666))+((r21*x1651)));
evalcond[5]=(((r12*x1655))+((r11*x1651))+(((-1.0)*x1664))+(((-1.0)*r10*x1665))+(((-1.0)*x1649*x1654))+((x1652*x1656))+((x1656*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1667=((0.9229390048494)*cj4);
IkReal x1668=((0.9229390048494)*sj4);
IkReal x1669=((0.0910115505610575)*cj5);
IkReal x1670=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r00*x1669))+((r00*sj5*x1668))+((cj5*r01*x1668))+(((-1.0)*r02*x1667))+((r01*x1670))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1668))+(((2.35293564015143)*pz))+((r20*x1669))+(((-1.0)*r20*sj5*x1668))+(((-1.0)*r21*x1670))+((r22*x1667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1669))+((r00*sj5*x1668))+((cj5*r01*x1668))+(((-1.0)*r02*x1667))+((r01*x1670))+(((-2.35293564015143)*px))))+IKsqr(((((-1.0)*cj5*r21*x1668))+(((2.35293564015143)*pz))+((r20*x1669))+(((-1.0)*r20*sj5*x1668))+(((-1.0)*r21*x1670))+((r22*x1667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1669))+((r00*sj5*x1668))+((cj5*r01*x1668))+(((-1.0)*r02*x1667))+((r01*x1670))+(((-2.35293564015143)*px))), ((((-1.0)*cj5*r21*x1668))+(((2.35293564015143)*pz))+((r20*x1669))+(((-1.0)*r20*sj5*x1668))+(((-1.0)*r21*x1670))+((r22*x1667))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1671=((0.39225)*sj3);
IkReal x1672=(cj5*r00);
IkReal x1673=((0.39225)*cj4);
IkReal x1674=(r01*sj5);
IkReal x1675=(r21*sj5);
IkReal x1676=(cj5*r20);
IkReal x1677=((0.39225)*sj4);
IkReal x1678=(r20*sj5);
IkReal x1679=(r00*sj5);
IkReal x1680=(cj5*r01);
IkReal x1681=(cj5*r21);
IkReal x1682=((0.425001)*(IKsin(j1)));
IkReal x1683=((0.03868)*x1672);
IkReal x1684=((0.03868)*x1674);
IkReal x1685=((0.03868)*x1676);
IkReal x1686=((0.03868)*x1675);
IkReal x1687=((0.425001)*(IKcos(j1)));
IkReal x1688=(x1685+pz);
IkReal x1689=(x1687+x1686);
IkReal x1690=(x1683+x1682);
evalcond[0]=((((-1.0)*x1677*x1681))+(((-1.0)*x1689))+x1688+(((-1.0)*x1677*x1678))+((r22*x1673)));
evalcond[1]=(((x1677*x1680))+(((-1.0)*x1690))+(((-1.0)*r02*x1673))+x1684+(((-1.0)*px))+((x1677*x1679)));
evalcond[2]=((((-1.0)*x1684))+x1690+((cj3*x1673*x1678))+((cj3*r22*x1677))+(((-1.0)*x1671*x1676))+px+((cj3*x1673*x1681))+((x1671*x1675)));
evalcond[3]=((((-1.0)*cj3*r02*x1677))+(((-1.0)*x1689))+x1688+(((-1.0)*cj3*x1673*x1680))+(((-1.0)*x1671*x1674))+(((-1.0)*cj3*x1673*x1679))+((x1671*x1672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1691=(cj4*r02);
IkReal x1692=(cj5*sj4);
IkReal x1693=((1.0)*sj1);
IkReal x1694=(sj4*sj5);
IkReal x1695=((1.0)*cj4*r22);
if( IKabs((((cj1*r01*x1692))+((cj1*r00*x1694))+(((-1.0)*cj1*x1691))+((r21*sj1*x1692))+((r20*sj1*x1694))+(((-1.0)*cj4*r22*x1693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x1695))+((sj1*x1691))+(((-1.0)*r00*x1693*x1694))+((cj1*r21*x1692))+((cj1*r20*x1694))+(((-1.0)*r01*x1692*x1693)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x1692))+((cj1*r00*x1694))+(((-1.0)*cj1*x1691))+((r21*sj1*x1692))+((r20*sj1*x1694))+(((-1.0)*cj4*r22*x1693))))+IKsqr(((((-1.0)*cj1*x1695))+((sj1*x1691))+(((-1.0)*r00*x1693*x1694))+((cj1*r21*x1692))+((cj1*r20*x1694))+(((-1.0)*r01*x1692*x1693))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x1692))+((cj1*r00*x1694))+(((-1.0)*cj1*x1691))+((r21*sj1*x1692))+((r20*sj1*x1694))+(((-1.0)*cj4*r22*x1693))), ((((-1.0)*cj1*x1695))+((sj1*x1691))+(((-1.0)*r00*x1693*x1694))+((cj1*r21*x1692))+((cj1*r20*x1694))+(((-1.0)*r01*x1692*x1693))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1696=IKsin(j2);
IkReal x1697=IKcos(j2);
IkReal x1698=(cj3*cj4);
IkReal x1699=(cj5*r21);
IkReal x1700=(r00*sj5);
IkReal x1701=(r21*sj5);
IkReal x1702=(r20*sj5);
IkReal x1703=((1.0)*sj1);
IkReal x1704=((0.03868)*cj5);
IkReal x1705=((1.0)*sj4);
IkReal x1706=(cj3*sj4);
IkReal x1707=((0.39225)*sj1);
IkReal x1708=(cj5*r01);
IkReal x1709=(r01*sj5);
IkReal x1710=(cj1*x1696);
IkReal x1711=(cj1*x1697);
IkReal x1712=((1.0)*cj5*sj3);
IkReal x1713=(x1697*x1703);
evalcond[0]=((((-1.0)*x1702*x1705))+((cj4*r22))+x1711+((sj1*x1696))+(((-1.0)*x1699*x1705)));
evalcond[1]=(x1710+(((-1.0)*x1713))+(((-1.0)*x1705*x1708))+(((-1.0)*x1700*x1705))+((cj4*r02)));
evalcond[2]=((((0.03868)*x1701))+((x1696*x1707))+(((-1.0)*r20*x1704))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1711)));
evalcond[3]=((((0.03868)*x1709))+(((-1.0)*px))+(((-0.425001)*sj1))+(((-1.0)*r00*x1704))+(((0.39225)*x1710))+(((-1.0)*x1697*x1707)));
evalcond[4]=(((r22*x1706))+x1710+(((-1.0)*x1713))+(((-1.0)*r20*x1712))+((sj3*x1701))+((x1698*x1699))+((x1698*x1702)));
evalcond[5]=((((-1.0)*r00*x1712))+((r02*x1706))+(((-1.0)*x1711))+((sj3*x1709))+(((-1.0)*x1696*x1703))+((x1698*x1700))+((x1698*x1708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1714=((0.9229390048494)*cj4);
IkReal x1715=((0.9229390048494)*sj4);
IkReal x1716=((0.0910115505610575)*cj5);
IkReal x1717=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((r02*x1714))+(((-1.0)*cj5*r01*x1715))+(((-1.0)*r00*sj5*x1715))+((r00*x1716))+(((-1.0)*r01*x1717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r22*x1714))+(((-1.0)*r20*sj5*x1715))+(((-1.0)*cj5*r21*x1715))+((r20*x1716))+(((-1.0)*r21*x1717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((r02*x1714))+(((-1.0)*cj5*r01*x1715))+(((-1.0)*r00*sj5*x1715))+((r00*x1716))+(((-1.0)*r01*x1717))))+IKsqr(((((2.35293564015143)*pz))+((r22*x1714))+(((-1.0)*r20*sj5*x1715))+(((-1.0)*cj5*r21*x1715))+((r20*x1716))+(((-1.0)*r21*x1717))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((r02*x1714))+(((-1.0)*cj5*r01*x1715))+(((-1.0)*r00*sj5*x1715))+((r00*x1716))+(((-1.0)*r01*x1717))), ((((2.35293564015143)*pz))+((r22*x1714))+(((-1.0)*r20*sj5*x1715))+(((-1.0)*cj5*r21*x1715))+((r20*x1716))+(((-1.0)*r21*x1717))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1718=((0.39225)*sj3);
IkReal x1719=(cj5*r00);
IkReal x1720=((0.39225)*cj4);
IkReal x1721=(r01*sj5);
IkReal x1722=(r21*sj5);
IkReal x1723=(cj5*r20);
IkReal x1724=((0.39225)*sj4);
IkReal x1725=(r20*sj5);
IkReal x1726=(r00*sj5);
IkReal x1727=(cj5*r01);
IkReal x1728=(cj5*r21);
IkReal x1729=((0.03868)*x1719);
IkReal x1730=((0.425001)*(IKsin(j1)));
IkReal x1731=((0.03868)*x1721);
IkReal x1732=((0.03868)*x1722);
IkReal x1733=((0.425001)*(IKcos(j1)));
IkReal x1734=((0.03868)*x1723);
IkReal x1735=(x1729+px);
IkReal x1736=(x1731+x1730);
IkReal x1737=(x1733+x1732);
evalcond[0]=(x1735+((r02*x1720))+(((-1.0)*x1724*x1727))+(((-1.0)*x1724*x1726))+(((-1.0)*x1736)));
evalcond[1]=(x1734+((r22*x1720))+pz+(((-1.0)*x1724*x1725))+(((-1.0)*x1724*x1728))+(((-1.0)*x1737)));
evalcond[2]=(x1735+((x1718*x1723))+(((-1.0)*x1718*x1722))+(((-1.0)*cj3*r22*x1724))+(((-1.0)*x1736))+(((-1.0)*cj3*x1720*x1728))+(((-1.0)*cj3*x1720*x1725)));
evalcond[3]=((((-1.0)*cj3*r02*x1724))+x1737+(((-1.0)*pz))+(((-1.0)*x1718*x1721))+(((-1.0)*x1734))+(((-1.0)*cj3*x1720*x1726))+(((-1.0)*cj3*x1720*x1727))+((x1718*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1738=(cj5*sj4);
IkReal x1739=(cj4*r02);
IkReal x1740=((1.0)*cj1);
IkReal x1741=(sj4*sj5);
IkReal x1742=((1.0)*cj4*r22);
IkReal x1743=(sj1*x1741);
if( IKabs(((((-1.0)*r00*x1740*x1741))+(((-1.0)*sj1*x1742))+(((-1.0)*r01*x1738*x1740))+((cj1*x1739))+((r20*x1743))+((r21*sj1*x1738)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x1740))+((r01*sj1*x1738))+(((-1.0)*sj1*x1739))+((cj1*r21*x1738))+((r00*x1743))+((cj1*r20*x1741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1740*x1741))+(((-1.0)*sj1*x1742))+(((-1.0)*r01*x1738*x1740))+((cj1*x1739))+((r20*x1743))+((r21*sj1*x1738))))+IKsqr(((((-1.0)*cj4*r22*x1740))+((r01*sj1*x1738))+(((-1.0)*sj1*x1739))+((cj1*r21*x1738))+((r00*x1743))+((cj1*r20*x1741))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1740*x1741))+(((-1.0)*sj1*x1742))+(((-1.0)*r01*x1738*x1740))+((cj1*x1739))+((r20*x1743))+((r21*sj1*x1738))), ((((-1.0)*cj4*r22*x1740))+((r01*sj1*x1738))+(((-1.0)*sj1*x1739))+((cj1*r21*x1738))+((r00*x1743))+((cj1*r20*x1741))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1744=IKcos(j2);
IkReal x1745=IKsin(j2);
IkReal x1746=(cj3*sj4);
IkReal x1747=((0.03868)*cj5);
IkReal x1748=(r21*sj5);
IkReal x1749=(cj3*cj4);
IkReal x1750=(r20*sj5);
IkReal x1751=((1.0)*sj4);
IkReal x1752=(r00*sj5);
IkReal x1753=(cj5*r21);
IkReal x1754=((0.39225)*sj1);
IkReal x1755=(cj5*r01);
IkReal x1756=(r01*sj5);
IkReal x1757=(cj1*x1744);
IkReal x1758=(sj1*x1745);
IkReal x1759=((1.0)*cj5*sj3);
IkReal x1760=(cj1*x1745);
IkReal x1761=(sj1*x1744);
IkReal x1762=(x1758+x1757);
evalcond[0]=(((cj4*r22))+x1762+(((-1.0)*x1750*x1751))+(((-1.0)*x1751*x1753)));
evalcond[1]=((((-1.0)*x1760))+x1761+(((-1.0)*x1751*x1755))+(((-1.0)*x1751*x1752))+((cj4*r02)));
evalcond[2]=(((x1745*x1754))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x1748))+(((0.39225)*x1757))+(((-1.0)*r20*x1747)));
evalcond[3]=(((x1744*x1754))+(((-0.39225)*x1760))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x1756))+(((-1.0)*r00*x1747)));
evalcond[4]=(((x1749*x1755))+((x1749*x1752))+x1762+((r02*x1746))+(((-1.0)*r00*x1759))+((sj3*x1756)));
evalcond[5]=((((-1.0)*x1761))+((x1749*x1753))+((x1749*x1750))+x1760+((r22*x1746))+((sj3*x1748))+(((-1.0)*r20*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1763=(r01*sj0);
IkReal x1764=((0.9229390048494)*sj4);
IkReal x1765=((0.39225)*sj4);
IkReal x1766=(r00*sj0);
CheckValue<IkReal> x1767=IKPowWithIntegerCheck(sj0,-2);
if(!x1767.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1767.value)*(((((-0.39225)*cj4*r02*sj0))+((sj5*x1765*x1766))+(((0.03868)*sj5*x1763))+(((-0.03868)*cj5*x1766))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))+((cj5*x1763*x1765)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x1764))+(((-1.0)*r20*sj5*x1764))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1767.value)*(((((-0.39225)*cj4*r02*sj0))+((sj5*x1765*x1766))+(((0.03868)*sj5*x1763))+(((-0.03868)*cj5*x1766))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))+((cj5*x1763*x1765))))))+IKsqr(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x1764))+(((-1.0)*r20*sj5*x1764))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1767.value)*(((((-0.39225)*cj4*r02*sj0))+((sj5*x1765*x1766))+(((0.03868)*sj5*x1763))+(((-0.03868)*cj5*x1766))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))+((cj5*x1763*x1765))))), ((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x1764))+(((-1.0)*r20*sj5*x1764))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1768=IKsin(j1);
IkReal x1769=IKcos(j1);
IkReal x1770=cj0*cj0;
IkReal x1771=sj0*sj0;
IkReal x1772=((0.425001)*cj0);
IkReal x1773=((0.39225)*sj5);
IkReal x1774=(cj3*cj4);
IkReal x1775=(cj0*r20);
IkReal x1776=(cj5*r00);
IkReal x1777=((0.03868)*sj0);
IkReal x1778=(sj0*sj4);
IkReal x1779=((0.39225)*sj3);
IkReal x1780=((0.39225)*cj5);
IkReal x1781=(cj0*sj4);
IkReal x1782=(cj5*r10);
IkReal x1783=(r11*sj5);
IkReal x1784=((0.39225)*r22);
IkReal x1785=((1.0)*sj0);
IkReal x1786=((0.03868)*cj0);
IkReal x1787=((0.03868)*cj5);
IkReal x1788=((0.032446)*cj0);
IkReal x1789=(cj0*r21);
IkReal x1790=((0.39225)*r02);
IkReal x1791=(cj0*cj4);
IkReal x1792=(r01*sj5);
IkReal x1793=(cj3*sj4);
IkReal x1794=(r20*sj0);
IkReal x1795=(r21*sj0);
IkReal x1796=((0.39225)*r12);
IkReal x1797=(sj0*x1788);
IkReal x1798=((0.39225)*cj4*sj0);
IkReal x1799=((0.03868)*r21*sj5);
IkReal x1800=((0.425001)*x1768);
IkReal x1801=((0.425001)*x1769);
IkReal x1802=(sj0*x1768*x1772);
evalcond[0]=((((-1.0)*x1799))+((r20*x1787))+(((-1.0)*r20*sj4*x1773))+(((-1.0)*x1801))+pz+(((-1.0)*r21*sj4*x1780))+((cj4*x1784)));
evalcond[1]=(((x1782*x1786))+(((-1.0)*x1783*x1786))+(((-1.0)*r10*x1773*x1781))+(((-1.0)*x1770*x1800))+x1797+(((-1.0)*r11*x1780*x1781))+((cj0*py))+((x1791*x1796)));
evalcond[2]=((((-1.0)*x1797))+((r01*x1778*x1780))+(((-1.0)*x1771*x1800))+((x1777*x1792))+(((-1.0)*x1776*x1777))+(((-1.0)*cj4*sj0*x1790))+(((-1.0)*px*x1785))+((r00*x1773*x1778)));
evalcond[3]=((((-1.0)*x1790*x1793))+(((-1.0)*r00*x1773*x1774))+((x1776*x1779))+(((-1.0)*r01*sj3*x1773))+(((-1.0)*sj0*x1801))+(((-1.0)*r01*x1774*x1780))+((cj5*r20*x1777))+((pz*sj0))+(((-1.0)*r21*sj5*x1777)));
evalcond[4]=((((-1.0)*r11*sj3*x1773))+(((-1.0)*x1775*x1787))+(((-1.0)*r11*x1774*x1780))+((x1779*x1782))+(((-1.0)*x1793*x1796))+(((-1.0)*r10*x1773*x1774))+(((-1.0)*cj0*pz))+((x1769*x1772))+((r21*sj5*x1786)));
evalcond[5]=((((-1.0)*x1774*x1780*x1789))+(((-1.0)*sj3*x1773*x1789))+(((0.032446)*sj0))+(((-1.0)*x1773*x1774*x1775))+((cj5*x1775*x1779))+(((-1.0)*cj3*x1781*x1784))+(((0.03868)*x1782))+(((-0.03868)*x1783))+py+(((-1.0)*x1768*x1772)));
evalcond[6]=((((0.03868)*x1776))+x1788+((sj0*x1800))+((x1773*x1774*x1794))+(((-1.0)*cj5*x1779*x1794))+((sj3*x1773*x1795))+(((-0.03868)*x1792))+px+((cj3*x1778*x1784))+((x1774*x1780*x1795)));
evalcond[7]=((((0.032446)*x1770))+((r10*x1773*x1778))+(((-1.0)*cj4*sj0*x1796))+x1802+(((-1.0)*x1786*x1792))+((x1776*x1786))+((cj0*px))+((r11*x1778*x1780)));
evalcond[8]=(((x1777*x1783))+(((-1.0)*x1777*x1782))+(((-1.0)*py*x1785))+x1802+(((-1.0)*r01*x1780*x1781))+(((-1.0)*r00*x1773*x1781))+((x1790*x1791))+(((-0.032446)*x1771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1803=(cj4*r02);
IkReal x1804=(cj5*sj4);
IkReal x1805=((1.0)*sj1);
IkReal x1806=(sj4*sj5);
IkReal x1807=((1.0)*cj4*r22);
if( IKabs((((r21*sj1*x1804))+(((-1.0)*cj1*x1803))+(((-1.0)*cj4*r22*x1805))+((cj1*r01*x1804))+((cj1*r00*x1806))+((r20*sj1*x1806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1803))+((cj1*r21*x1804))+((cj1*r20*x1806))+(((-1.0)*cj1*x1807))+(((-1.0)*r01*x1804*x1805))+(((-1.0)*r00*x1805*x1806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1804))+(((-1.0)*cj1*x1803))+(((-1.0)*cj4*r22*x1805))+((cj1*r01*x1804))+((cj1*r00*x1806))+((r20*sj1*x1806))))+IKsqr((((sj1*x1803))+((cj1*r21*x1804))+((cj1*r20*x1806))+(((-1.0)*cj1*x1807))+(((-1.0)*r01*x1804*x1805))+(((-1.0)*r00*x1805*x1806))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1804))+(((-1.0)*cj1*x1803))+(((-1.0)*cj4*r22*x1805))+((cj1*r01*x1804))+((cj1*r00*x1806))+((r20*sj1*x1806))), (((sj1*x1803))+((cj1*r21*x1804))+((cj1*r20*x1806))+(((-1.0)*cj1*x1807))+(((-1.0)*r01*x1804*x1805))+(((-1.0)*r00*x1805*x1806))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1808=IKsin(j2);
IkReal x1809=IKcos(j2);
IkReal x1810=(cj3*cj4);
IkReal x1811=(cj5*r21);
IkReal x1812=(r00*sj5);
IkReal x1813=(r21*sj5);
IkReal x1814=(r20*sj5);
IkReal x1815=((1.0)*sj1);
IkReal x1816=((0.03868)*cj5);
IkReal x1817=((1.0)*sj4);
IkReal x1818=(cj3*sj4);
IkReal x1819=((0.39225)*sj1);
IkReal x1820=(cj5*r01);
IkReal x1821=(r01*sj5);
IkReal x1822=(cj1*x1808);
IkReal x1823=(cj1*x1809);
IkReal x1824=((1.0)*cj5*sj3);
IkReal x1825=(x1809*x1815);
evalcond[0]=(((cj4*r22))+((sj1*x1808))+(((-1.0)*x1811*x1817))+(((-1.0)*x1814*x1817))+x1823);
evalcond[1]=((((-1.0)*x1825))+(((-1.0)*x1812*x1817))+(((-1.0)*x1817*x1820))+x1822+((cj4*r02)));
evalcond[2]=((((0.39225)*x1823))+(((0.03868)*x1813))+(((0.425001)*cj1))+(((-1.0)*pz))+((x1808*x1819))+(((-1.0)*r20*x1816)));
evalcond[3]=((((0.39225)*x1822))+(((0.03868)*x1821))+(((-1.0)*x1809*x1819))+(((-1.0)*px))+(((-1.0)*r00*x1816))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*x1825))+((r22*x1818))+((sj3*x1813))+x1822+(((-1.0)*r20*x1824))+((x1810*x1814))+((x1810*x1811)));
evalcond[5]=(((r02*x1818))+(((-1.0)*x1823))+(((-1.0)*x1808*x1815))+(((-1.0)*r00*x1824))+((x1810*x1820))+((sj3*x1821))+((x1810*x1812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1826=(cj5*sj4);
IkReal x1827=(cj4*r02);
IkReal x1828=((1.0)*cj1);
IkReal x1829=(sj4*sj5);
IkReal x1830=((1.0)*cj4*r22);
IkReal x1831=(sj1*x1829);
if( IKabs((((cj1*x1827))+(((-1.0)*sj1*x1830))+((r21*sj1*x1826))+(((-1.0)*r00*x1828*x1829))+(((-1.0)*r01*x1826*x1828))+((r20*x1831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x1828))+(((-1.0)*sj1*x1827))+((r01*sj1*x1826))+((cj1*r20*x1829))+((cj1*r21*x1826))+((r00*x1831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1827))+(((-1.0)*sj1*x1830))+((r21*sj1*x1826))+(((-1.0)*r00*x1828*x1829))+(((-1.0)*r01*x1826*x1828))+((r20*x1831))))+IKsqr(((((-1.0)*cj4*r22*x1828))+(((-1.0)*sj1*x1827))+((r01*sj1*x1826))+((cj1*r20*x1829))+((cj1*r21*x1826))+((r00*x1831))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1827))+(((-1.0)*sj1*x1830))+((r21*sj1*x1826))+(((-1.0)*r00*x1828*x1829))+(((-1.0)*r01*x1826*x1828))+((r20*x1831))), ((((-1.0)*cj4*r22*x1828))+(((-1.0)*sj1*x1827))+((r01*sj1*x1826))+((cj1*r20*x1829))+((cj1*r21*x1826))+((r00*x1831))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1832=IKcos(j2);
IkReal x1833=IKsin(j2);
IkReal x1834=(cj3*sj4);
IkReal x1835=((0.03868)*cj5);
IkReal x1836=(r21*sj5);
IkReal x1837=(cj3*cj4);
IkReal x1838=(r20*sj5);
IkReal x1839=((1.0)*sj4);
IkReal x1840=(r00*sj5);
IkReal x1841=(cj5*r21);
IkReal x1842=((0.39225)*sj1);
IkReal x1843=(cj5*r01);
IkReal x1844=(r01*sj5);
IkReal x1845=(cj1*x1832);
IkReal x1846=(sj1*x1833);
IkReal x1847=((1.0)*cj5*sj3);
IkReal x1848=(cj1*x1833);
IkReal x1849=(sj1*x1832);
IkReal x1850=(x1846+x1845);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1839*x1841))+(((-1.0)*x1838*x1839))+x1850);
evalcond[1]=((((-1.0)*x1839*x1840))+(((-1.0)*x1839*x1843))+x1849+(((-1.0)*x1848))+((cj4*r02)));
evalcond[2]=((((-1.0)*r20*x1835))+((x1833*x1842))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1845))+(((0.03868)*x1836)));
evalcond[3]=((((-1.0)*r00*x1835))+((x1832*x1842))+(((0.03868)*x1844))+(((-1.0)*px))+(((0.425001)*sj1))+(((-0.39225)*x1848)));
evalcond[4]=(((x1837*x1843))+((x1837*x1840))+((sj3*x1844))+(((-1.0)*r00*x1847))+((r02*x1834))+x1850);
evalcond[5]=(((x1837*x1841))+((r22*x1834))+((sj3*x1836))+x1848+((x1837*x1838))+(((-1.0)*x1849))+(((-1.0)*r20*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1851=(cj1*cj4);
IkReal x1852=((1.0)*r22);
IkReal x1853=(cj4*sj1);
IkReal x1854=(sj4*sj5);
IkReal x1855=(cj1*cj5*sj4);
IkReal x1856=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*x1852*x1853))+(((-1.0)*cj1*r10*x1854))+((r21*x1856))+((r12*x1851))+((r20*sj1*x1854))+(((-1.0)*r11*x1855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1853))+((r10*sj1*x1854))+(((-1.0)*x1851*x1852))+((cj1*r20*x1854))+((r11*x1856))+((r21*x1855)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1852*x1853))+(((-1.0)*cj1*r10*x1854))+((r21*x1856))+((r12*x1851))+((r20*sj1*x1854))+(((-1.0)*r11*x1855))))+IKsqr(((((-1.0)*r12*x1853))+((r10*sj1*x1854))+(((-1.0)*x1851*x1852))+((cj1*r20*x1854))+((r11*x1856))+((r21*x1855))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1852*x1853))+(((-1.0)*cj1*r10*x1854))+((r21*x1856))+((r12*x1851))+((r20*sj1*x1854))+(((-1.0)*r11*x1855))), ((((-1.0)*r12*x1853))+((r10*sj1*x1854))+(((-1.0)*x1851*x1852))+((cj1*r20*x1854))+((r11*x1856))+((r21*x1855))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1857=IKcos(j2);
IkReal x1858=IKsin(j2);
IkReal x1859=(cj3*cj4);
IkReal x1860=(cj5*r21);
IkReal x1861=(sj3*sj5);
IkReal x1862=(r10*sj5);
IkReal x1863=((1.0)*sj4);
IkReal x1864=(cj3*sj4);
IkReal x1865=(cj5*r11);
IkReal x1866=((0.03868)*cj5);
IkReal x1867=(r20*sj5);
IkReal x1868=((0.03868)*sj5);
IkReal x1869=(cj1*x1857);
IkReal x1870=(sj1*x1858);
IkReal x1871=((1.0)*cj5*sj3);
IkReal x1872=(cj1*x1858);
IkReal x1873=(sj1*x1857);
IkReal x1874=(x1869+x1870);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1860*x1863))+(((-1.0)*x1863*x1867))+x1874);
evalcond[1]=((((-1.0)*x1863*x1865))+(((-1.0)*x1862*x1863))+x1873+(((-1.0)*x1872))+((cj4*r12)));
evalcond[2]=((((0.39225)*x1869))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1866))+(((0.39225)*x1870))+((r21*x1868)));
evalcond[3]=(((r11*x1868))+(((-1.0)*py))+(((0.425001)*sj1))+(((-0.39225)*x1872))+(((0.39225)*x1873))+(((-1.0)*r10*x1866)));
evalcond[4]=(((r12*x1864))+((r11*x1861))+(((-1.0)*r10*x1871))+((x1859*x1865))+((x1859*x1862))+x1874);
evalcond[5]=(((r22*x1864))+((x1859*x1867))+((x1859*x1860))+x1872+(((-1.0)*x1873))+(((-1.0)*r20*x1871))+((r21*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1875=(cj4*r12);
IkReal x1876=(r10*sj5);
IkReal x1877=(cj1*sj4);
IkReal x1878=(sj1*sj4);
IkReal x1879=(r20*sj5);
IkReal x1880=((1.0)*cj4*r22);
IkReal x1881=((1.0)*x1878);
IkReal x1882=(cj5*x1877);
if( IKabs((((x1876*x1877))+(((-1.0)*cj1*x1875))+((x1878*x1879))+((cj5*r21*x1878))+((r11*x1882))+(((-1.0)*sj1*x1880)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1876*x1881))+((r21*x1882))+((x1877*x1879))+(((-1.0)*cj1*x1880))+((sj1*x1875))+(((-1.0)*cj5*r11*x1881)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1876*x1877))+(((-1.0)*cj1*x1875))+((x1878*x1879))+((cj5*r21*x1878))+((r11*x1882))+(((-1.0)*sj1*x1880))))+IKsqr(((((-1.0)*x1876*x1881))+((r21*x1882))+((x1877*x1879))+(((-1.0)*cj1*x1880))+((sj1*x1875))+(((-1.0)*cj5*r11*x1881))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1876*x1877))+(((-1.0)*cj1*x1875))+((x1878*x1879))+((cj5*r21*x1878))+((r11*x1882))+(((-1.0)*sj1*x1880))), ((((-1.0)*x1876*x1881))+((r21*x1882))+((x1877*x1879))+(((-1.0)*cj1*x1880))+((sj1*x1875))+(((-1.0)*cj5*r11*x1881))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1883=IKsin(j2);
IkReal x1884=IKcos(j2);
IkReal x1885=(sj3*sj5);
IkReal x1886=(r10*sj5);
IkReal x1887=((1.0)*sj4);
IkReal x1888=((1.0)*sj1);
IkReal x1889=(cj3*sj4);
IkReal x1890=(cj3*cj4);
IkReal x1891=(cj5*r21);
IkReal x1892=((0.03868)*cj5);
IkReal x1893=(r20*sj5);
IkReal x1894=((0.39225)*sj1);
IkReal x1895=((0.03868)*sj5);
IkReal x1896=(cj5*r11);
IkReal x1897=(cj1*x1883);
IkReal x1898=(cj1*x1884);
IkReal x1899=((1.0)*cj5*sj3);
IkReal x1900=(x1884*x1888);
evalcond[0]=(((cj4*r22))+x1898+(((-1.0)*x1887*x1893))+(((-1.0)*x1887*x1891))+((sj1*x1883)));
evalcond[1]=(x1897+(((-1.0)*x1887*x1896))+(((-1.0)*x1886*x1887))+((cj4*r12))+(((-1.0)*x1900)));
evalcond[2]=(((x1883*x1894))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1892))+((r21*x1895))+(((0.39225)*x1898)));
evalcond[3]=(((r11*x1895))+(((-1.0)*r10*x1892))+(((-1.0)*py))+(((-0.425001)*sj1))+(((-1.0)*x1884*x1894))+(((0.39225)*x1897)));
evalcond[4]=(((r21*x1885))+x1897+(((-1.0)*r20*x1899))+((r22*x1889))+(((-1.0)*x1900))+((x1890*x1891))+((x1890*x1893)));
evalcond[5]=(((x1886*x1890))+((r12*x1889))+(((-1.0)*x1883*x1888))+(((-1.0)*r10*x1899))+(((-1.0)*x1898))+((r11*x1885))+((x1890*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1901=(cj1*cj4);
IkReal x1902=(cj4*sj1);
IkReal x1903=(cj1*sj4);
IkReal x1904=(r10*sj5);
IkReal x1905=(sj1*sj4);
IkReal x1906=(cj5*r11);
IkReal x1907=((1.0)*cj0*r22);
IkReal x1908=(cj0*cj5*r21);
IkReal x1909=(cj0*r20*sj5);
CheckValue<IkReal> x1910 = IKatan2WithCheck(IkReal(((((-1.0)*x1902*x1907))+((x1905*x1908))+((x1905*x1909))+((r12*x1901))+(((-1.0)*x1903*x1904))+(((-1.0)*x1903*x1906)))),IkReal((((x1905*x1906))+((x1904*x1905))+((x1903*x1909))+((x1903*x1908))+(((-1.0)*x1901*x1907))+(((-1.0)*r12*x1902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1910.valid){
continue;
}
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1911.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1910.value)+(((1.5707963267949)*(x1911.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1912=IKcos(j2);
IkReal x1913=IKsin(j2);
IkReal x1914=(cj3*sj4);
IkReal x1915=(sj0*sj1);
IkReal x1916=(sj3*sj5);
IkReal x1917=((0.03868)*sj5);
IkReal x1918=(cj3*cj4);
IkReal x1919=(cj5*r21);
IkReal x1920=((0.03868)*cj5);
IkReal x1921=(cj5*r01);
IkReal x1922=((1.0)*sj4);
IkReal x1923=(cj0*sj1);
IkReal x1924=(cj5*r11);
IkReal x1925=(cj1*x1912);
IkReal x1926=((1.0)*cj5*sj3);
IkReal x1927=(cj1*x1913);
IkReal x1928=((1.0)*x1912);
IkReal x1929=(sj5*x1922);
IkReal x1930=(sj1*x1913);
IkReal x1931=((0.39225)*sj1*x1912);
evalcond[0]=(((cj4*r22))+(((-1.0)*r20*x1929))+x1925+x1930+(((-1.0)*x1919*x1922)));
evalcond[1]=((((-1.0)*r20*x1920))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x1917))+(((0.39225)*x1930))+(((0.39225)*x1925)));
evalcond[2]=((((-1.0)*x1915*x1928))+(((-1.0)*r00*x1929))+(((-1.0)*x1921*x1922))+((sj0*x1927))+((cj4*r02)));
evalcond[3]=((((-1.0)*x1922*x1924))+(((-1.0)*cj0*x1927))+((x1912*x1923))+(((-1.0)*r10*x1929))+((cj4*r12)));
evalcond[4]=((((0.39225)*sj0*x1927))+((r01*x1917))+(((-1.0)*r00*x1920))+(((-1.0)*px))+(((-0.425001)*x1915))+(((-0.032446)*cj0))+(((-0.39225)*x1912*x1915)));
evalcond[5]=((((-0.39225)*cj0*x1927))+(((-0.032446)*sj0))+((r11*x1917))+(((-1.0)*py))+(((0.39225)*x1912*x1923))+(((-1.0)*r10*x1920))+(((0.425001)*x1923)));
evalcond[6]=(((r22*x1914))+(((-1.0)*r20*x1926))+x1927+((r20*sj5*x1918))+((r21*x1916))+(((-1.0)*sj1*x1928))+((x1918*x1919)));
evalcond[7]=(((x1918*x1924))+((cj0*x1925))+((r11*x1916))+((r12*x1914))+((r10*sj5*x1918))+((x1913*x1923))+(((-1.0)*r10*x1926)));
evalcond[8]=(((x1918*x1921))+(((-1.0)*x1913*x1915))+((r01*x1916))+(((-1.0)*r00*x1926))+((r00*sj5*x1918))+((r02*x1914))+(((-1.0)*sj0*x1925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1932=(cj4*sj1);
IkReal x1933=(cj1*cj4);
IkReal x1934=((1.0)*sj1);
IkReal x1935=(cj1*sj4);
IkReal x1936=(r00*sj5);
IkReal x1937=((1.0)*r22*sj0);
IkReal x1938=(cj5*r01*sj4);
IkReal x1939=(cj5*r21*sj0);
IkReal x1940=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1941.valid){
continue;
}
CheckValue<IkReal> x1942 = IKatan2WithCheck(IkReal((((cj5*r01*x1935))+((sj1*x1940))+(((-1.0)*x1932*x1937))+((x1935*x1936))+((sj1*sj4*x1939))+(((-1.0)*r02*x1933)))),IkReal((((r02*x1932))+((r20*sj0*sj5*x1935))+(((-1.0)*x1933*x1937))+(((-1.0)*sj4*x1934*x1936))+(((-1.0)*x1934*x1938))+((x1935*x1939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1942.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1941.value)))+(x1942.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1943=IKcos(j2);
IkReal x1944=IKsin(j2);
IkReal x1945=(cj3*sj4);
IkReal x1946=(sj0*sj1);
IkReal x1947=(sj3*sj5);
IkReal x1948=((0.03868)*sj5);
IkReal x1949=(cj3*cj4);
IkReal x1950=(cj5*r21);
IkReal x1951=((0.03868)*cj5);
IkReal x1952=(cj5*r01);
IkReal x1953=((1.0)*sj4);
IkReal x1954=(cj0*sj1);
IkReal x1955=(cj5*r11);
IkReal x1956=(cj1*x1943);
IkReal x1957=((1.0)*cj5*sj3);
IkReal x1958=(cj1*x1944);
IkReal x1959=((1.0)*x1943);
IkReal x1960=(sj5*x1953);
IkReal x1961=(sj1*x1944);
IkReal x1962=((0.39225)*sj1*x1943);
evalcond[0]=(((cj4*r22))+(((-1.0)*x1950*x1953))+x1961+x1956+(((-1.0)*r20*x1960)));
evalcond[1]=((((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1956))+((r21*x1948))+(((0.39225)*x1961))+(((-1.0)*r20*x1951)));
evalcond[2]=((((-1.0)*x1952*x1953))+(((-1.0)*r00*x1960))+((sj0*x1958))+(((-1.0)*x1946*x1959))+((cj4*r02)));
evalcond[3]=(((x1943*x1954))+(((-1.0)*cj0*x1958))+(((-1.0)*r10*x1960))+(((-1.0)*x1953*x1955))+((cj4*r12)));
evalcond[4]=((((-0.39225)*x1943*x1946))+(((-0.425001)*x1946))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-1.0)*r00*x1951))+((r01*x1948))+(((0.39225)*sj0*x1958)));
evalcond[5]=((((-0.032446)*sj0))+((r11*x1948))+(((0.425001)*x1954))+(((-0.39225)*cj0*x1958))+(((-1.0)*py))+(((0.39225)*x1943*x1954))+(((-1.0)*r10*x1951)));
evalcond[6]=((((-1.0)*sj1*x1959))+((r20*sj5*x1949))+((r22*x1945))+x1958+((r21*x1947))+((x1949*x1950))+(((-1.0)*r20*x1957)));
evalcond[7]=(((cj0*x1956))+((x1944*x1954))+((r11*x1947))+((r10*sj5*x1949))+((r12*x1945))+(((-1.0)*r10*x1957))+((x1949*x1955)));
evalcond[8]=((((-1.0)*sj0*x1956))+(((-1.0)*x1944*x1946))+(((-1.0)*r00*x1957))+((r01*x1947))+((r00*sj5*x1949))+((x1949*x1952))+((r02*x1945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1963=((0.39225)*cj0);
IkReal x1964=((0.9229390048494)*sj4);
IkReal x1965=((0.03868)*cj0);
CheckValue<IkReal> x1966=IKPowWithIntegerCheck(cj0,-2);
if(!x1966.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1966.value)*(((((-1.0)*r10*sj4*sj5*x1963))+(((-1.0)*cj5*r11*sj4*x1963))+(((-1.0)*r11*sj5*x1965))+(((0.032446)*cj0*sj0))+((cj0*py))+((cj5*r10*x1965))+((cj4*r12*x1963)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x1964))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1966.value)*(((((-1.0)*r10*sj4*sj5*x1963))+(((-1.0)*cj5*r11*sj4*x1963))+(((-1.0)*r11*sj5*x1965))+(((0.032446)*cj0*sj0))+((cj0*py))+((cj5*r10*x1965))+((cj4*r12*x1963))))))+IKsqr(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x1964))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1966.value)*(((((-1.0)*r10*sj4*sj5*x1963))+(((-1.0)*cj5*r11*sj4*x1963))+(((-1.0)*r11*sj5*x1965))+(((0.032446)*cj0*sj0))+((cj0*py))+((cj5*r10*x1965))+((cj4*r12*x1963))))), ((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x1964))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1964))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1967=IKsin(j1);
IkReal x1968=IKcos(j1);
IkReal x1969=cj0*cj0;
IkReal x1970=sj0*sj0;
IkReal x1971=((0.425001)*cj0);
IkReal x1972=((0.39225)*sj5);
IkReal x1973=(cj3*cj4);
IkReal x1974=(cj0*r20);
IkReal x1975=(cj5*r00);
IkReal x1976=((0.03868)*sj0);
IkReal x1977=(sj0*sj4);
IkReal x1978=((0.39225)*sj3);
IkReal x1979=((0.39225)*cj5);
IkReal x1980=(cj0*sj4);
IkReal x1981=(cj5*r10);
IkReal x1982=(r11*sj5);
IkReal x1983=((0.39225)*r22);
IkReal x1984=((1.0)*sj0);
IkReal x1985=((0.03868)*cj0);
IkReal x1986=((0.03868)*cj5);
IkReal x1987=((0.032446)*cj0);
IkReal x1988=(cj0*r21);
IkReal x1989=((0.39225)*r02);
IkReal x1990=(cj0*cj4);
IkReal x1991=(r01*sj5);
IkReal x1992=(cj3*sj4);
IkReal x1993=(r20*sj0);
IkReal x1994=(r21*sj0);
IkReal x1995=((0.39225)*r12);
IkReal x1996=(sj0*x1987);
IkReal x1997=((0.39225)*cj4*sj0);
IkReal x1998=((0.03868)*r21*sj5);
IkReal x1999=((0.425001)*x1967);
IkReal x2000=((0.425001)*x1968);
IkReal x2001=(sj0*x1967*x1971);
evalcond[0]=((((-1.0)*r21*sj4*x1979))+(((-1.0)*r20*sj4*x1972))+(((-1.0)*x1998))+pz+(((-1.0)*x2000))+((cj4*x1983))+((r20*x1986)));
evalcond[1]=((((-1.0)*r11*x1979*x1980))+(((-1.0)*r10*x1972*x1980))+((x1981*x1985))+x1996+((x1990*x1995))+(((-1.0)*x1982*x1985))+((cj0*py))+(((-1.0)*x1969*x1999)));
evalcond[2]=(((x1976*x1991))+(((-1.0)*x1975*x1976))+(((-1.0)*px*x1984))+(((-1.0)*cj4*sj0*x1989))+((r01*x1977*x1979))+(((-1.0)*x1996))+(((-1.0)*x1970*x1999))+((r00*x1972*x1977)));
evalcond[3]=((((-1.0)*r21*sj5*x1976))+((x1975*x1978))+(((-1.0)*r00*x1972*x1973))+(((-1.0)*x1989*x1992))+((cj5*r20*x1976))+(((-1.0)*r01*x1973*x1979))+((pz*sj0))+(((-1.0)*sj0*x2000))+(((-1.0)*r01*sj3*x1972)));
evalcond[4]=((((-1.0)*r10*x1972*x1973))+(((-1.0)*r11*sj3*x1972))+((r21*sj5*x1985))+(((-1.0)*x1974*x1986))+((x1978*x1981))+(((-1.0)*r11*x1973*x1979))+(((-1.0)*x1992*x1995))+((x1968*x1971))+(((-1.0)*cj0*pz)));
evalcond[5]=((((-0.03868)*x1982))+(((0.032446)*sj0))+(((-1.0)*x1972*x1973*x1974))+(((-1.0)*cj3*x1980*x1983))+py+((cj5*x1974*x1978))+(((-1.0)*sj3*x1972*x1988))+(((-1.0)*x1973*x1979*x1988))+(((0.03868)*x1981))+(((-1.0)*x1967*x1971)));
evalcond[6]=(((sj0*x1999))+(((0.03868)*x1975))+((x1973*x1979*x1994))+x1987+((sj3*x1972*x1994))+px+((x1972*x1973*x1993))+(((-1.0)*cj5*x1978*x1993))+(((-0.03868)*x1991))+((cj3*x1977*x1983)));
evalcond[7]=(((x1975*x1985))+x2001+(((-1.0)*cj4*sj0*x1995))+(((-1.0)*x1985*x1991))+((r11*x1977*x1979))+((cj0*px))+(((0.032446)*x1969))+((r10*x1972*x1977)));
evalcond[8]=((((-1.0)*x1976*x1981))+(((-1.0)*r01*x1979*x1980))+((x1976*x1982))+x2001+(((-0.032446)*x1970))+((x1989*x1990))+(((-1.0)*r00*x1972*x1980))+(((-1.0)*py*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2002=(cj4*r02);
IkReal x2003=(cj5*sj4);
IkReal x2004=((1.0)*sj1);
IkReal x2005=(sj4*sj5);
IkReal x2006=((1.0)*cj4*r22);
if( IKabs((((r20*sj1*x2005))+((r21*sj1*x2003))+((cj1*r00*x2005))+((cj1*r01*x2003))+(((-1.0)*cj4*r22*x2004))+(((-1.0)*cj1*x2002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2005))+(((-1.0)*cj1*x2006))+((cj1*r21*x2003))+((sj1*x2002))+(((-1.0)*r00*x2004*x2005))+(((-1.0)*r01*x2003*x2004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x2005))+((r21*sj1*x2003))+((cj1*r00*x2005))+((cj1*r01*x2003))+(((-1.0)*cj4*r22*x2004))+(((-1.0)*cj1*x2002))))+IKsqr((((cj1*r20*x2005))+(((-1.0)*cj1*x2006))+((cj1*r21*x2003))+((sj1*x2002))+(((-1.0)*r00*x2004*x2005))+(((-1.0)*r01*x2003*x2004))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x2005))+((r21*sj1*x2003))+((cj1*r00*x2005))+((cj1*r01*x2003))+(((-1.0)*cj4*r22*x2004))+(((-1.0)*cj1*x2002))), (((cj1*r20*x2005))+(((-1.0)*cj1*x2006))+((cj1*r21*x2003))+((sj1*x2002))+(((-1.0)*r00*x2004*x2005))+(((-1.0)*r01*x2003*x2004))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2007=IKsin(j2);
IkReal x2008=IKcos(j2);
IkReal x2009=(cj3*cj4);
IkReal x2010=(cj5*r21);
IkReal x2011=(r00*sj5);
IkReal x2012=(r21*sj5);
IkReal x2013=(r20*sj5);
IkReal x2014=((1.0)*sj1);
IkReal x2015=((0.03868)*cj5);
IkReal x2016=((1.0)*sj4);
IkReal x2017=(cj3*sj4);
IkReal x2018=((0.39225)*sj1);
IkReal x2019=(cj5*r01);
IkReal x2020=(r01*sj5);
IkReal x2021=(cj1*x2007);
IkReal x2022=(cj1*x2008);
IkReal x2023=((1.0)*cj5*sj3);
IkReal x2024=(x2008*x2014);
evalcond[0]=((((-1.0)*x2010*x2016))+((cj4*r22))+(((-1.0)*x2013*x2016))+x2022+((sj1*x2007)));
evalcond[1]=(x2021+(((-1.0)*x2016*x2019))+(((-1.0)*x2011*x2016))+(((-1.0)*x2024))+((cj4*r02)));
evalcond[2]=((((-1.0)*r20*x2015))+(((0.03868)*x2012))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2022))+((x2007*x2018)));
evalcond[3]=((((-1.0)*x2008*x2018))+(((-1.0)*px))+(((0.39225)*x2021))+(((0.03868)*x2020))+(((-0.425001)*sj1))+(((-1.0)*r00*x2015)));
evalcond[4]=(x2021+((r22*x2017))+((sj3*x2012))+((x2009*x2010))+((x2009*x2013))+(((-1.0)*x2024))+(((-1.0)*r20*x2023)));
evalcond[5]=((((-1.0)*r00*x2023))+(((-1.0)*x2007*x2014))+((sj3*x2020))+(((-1.0)*x2022))+((x2009*x2019))+((x2009*x2011))+((r02*x2017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2025=(cj5*sj4);
IkReal x2026=(cj4*r02);
IkReal x2027=((1.0)*cj1);
IkReal x2028=(sj4*sj5);
IkReal x2029=((1.0)*cj4*r22);
IkReal x2030=(sj1*x2028);
if( IKabs((((r21*sj1*x2025))+(((-1.0)*sj1*x2029))+((r20*x2030))+(((-1.0)*r00*x2027*x2028))+((cj1*x2026))+(((-1.0)*r01*x2025*x2027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x2030))+(((-1.0)*sj1*x2026))+(((-1.0)*cj4*r22*x2027))+((r01*sj1*x2025))+((cj1*r21*x2025))+((cj1*r20*x2028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x2025))+(((-1.0)*sj1*x2029))+((r20*x2030))+(((-1.0)*r00*x2027*x2028))+((cj1*x2026))+(((-1.0)*r01*x2025*x2027))))+IKsqr((((r00*x2030))+(((-1.0)*sj1*x2026))+(((-1.0)*cj4*r22*x2027))+((r01*sj1*x2025))+((cj1*r21*x2025))+((cj1*r20*x2028))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x2025))+(((-1.0)*sj1*x2029))+((r20*x2030))+(((-1.0)*r00*x2027*x2028))+((cj1*x2026))+(((-1.0)*r01*x2025*x2027))), (((r00*x2030))+(((-1.0)*sj1*x2026))+(((-1.0)*cj4*r22*x2027))+((r01*sj1*x2025))+((cj1*r21*x2025))+((cj1*r20*x2028))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2031=IKcos(j2);
IkReal x2032=IKsin(j2);
IkReal x2033=(cj3*sj4);
IkReal x2034=((0.03868)*cj5);
IkReal x2035=(r21*sj5);
IkReal x2036=(cj3*cj4);
IkReal x2037=(r20*sj5);
IkReal x2038=((1.0)*sj4);
IkReal x2039=(r00*sj5);
IkReal x2040=(cj5*r21);
IkReal x2041=((0.39225)*sj1);
IkReal x2042=(cj5*r01);
IkReal x2043=(r01*sj5);
IkReal x2044=(cj1*x2031);
IkReal x2045=(sj1*x2032);
IkReal x2046=((1.0)*cj5*sj3);
IkReal x2047=(cj1*x2032);
IkReal x2048=(sj1*x2031);
IkReal x2049=(x2044+x2045);
evalcond[0]=(((cj4*r22))+x2049+(((-1.0)*x2038*x2040))+(((-1.0)*x2037*x2038)));
evalcond[1]=(x2048+(((-1.0)*x2047))+(((-1.0)*x2038*x2039))+(((-1.0)*x2038*x2042))+((cj4*r02)));
evalcond[2]=(((x2032*x2041))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x2035))+(((0.39225)*x2044))+(((-1.0)*r20*x2034)));
evalcond[3]=(((x2031*x2041))+(((-1.0)*r00*x2034))+(((-0.39225)*x2047))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x2043)));
evalcond[4]=(x2049+((r02*x2033))+((x2036*x2039))+((x2036*x2042))+(((-1.0)*r00*x2046))+((sj3*x2043)));
evalcond[5]=(((r22*x2033))+((sj3*x2035))+x2047+(((-1.0)*x2048))+(((-1.0)*r20*x2046))+((x2036*x2037))+((x2036*x2040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2050=(cj1*cj4);
IkReal x2051=((1.0)*r22);
IkReal x2052=(cj4*sj1);
IkReal x2053=(sj4*sj5);
IkReal x2054=(cj1*cj5*sj4);
IkReal x2055=(cj5*sj1*sj4);
if( IKabs((((r12*x2050))+((r20*sj1*x2053))+(((-1.0)*x2051*x2052))+(((-1.0)*r11*x2054))+(((-1.0)*cj1*r10*x2053))+((r21*x2055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2055))+((r10*sj1*x2053))+((cj1*r20*x2053))+(((-1.0)*x2050*x2051))+(((-1.0)*r12*x2052))+((r21*x2054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2050))+((r20*sj1*x2053))+(((-1.0)*x2051*x2052))+(((-1.0)*r11*x2054))+(((-1.0)*cj1*r10*x2053))+((r21*x2055))))+IKsqr((((r11*x2055))+((r10*sj1*x2053))+((cj1*r20*x2053))+(((-1.0)*x2050*x2051))+(((-1.0)*r12*x2052))+((r21*x2054))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x2050))+((r20*sj1*x2053))+(((-1.0)*x2051*x2052))+(((-1.0)*r11*x2054))+(((-1.0)*cj1*r10*x2053))+((r21*x2055))), (((r11*x2055))+((r10*sj1*x2053))+((cj1*r20*x2053))+(((-1.0)*x2050*x2051))+(((-1.0)*r12*x2052))+((r21*x2054))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2056=IKcos(j2);
IkReal x2057=IKsin(j2);
IkReal x2058=(cj3*cj4);
IkReal x2059=(cj5*r21);
IkReal x2060=(sj3*sj5);
IkReal x2061=(r10*sj5);
IkReal x2062=((1.0)*sj4);
IkReal x2063=(cj3*sj4);
IkReal x2064=(cj5*r11);
IkReal x2065=((0.03868)*cj5);
IkReal x2066=(r20*sj5);
IkReal x2067=((0.03868)*sj5);
IkReal x2068=(cj1*x2056);
IkReal x2069=(sj1*x2057);
IkReal x2070=((1.0)*cj5*sj3);
IkReal x2071=(cj1*x2057);
IkReal x2072=(sj1*x2056);
IkReal x2073=(x2068+x2069);
evalcond[0]=(((cj4*r22))+x2073+(((-1.0)*x2062*x2066))+(((-1.0)*x2059*x2062)));
evalcond[1]=(x2072+(((-1.0)*x2071))+(((-1.0)*x2061*x2062))+(((-1.0)*x2062*x2064))+((cj4*r12)));
evalcond[2]=(((r21*x2067))+(((-1.0)*r20*x2065))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2068))+(((0.39225)*x2069)));
evalcond[3]=((((-1.0)*r10*x2065))+((r11*x2067))+(((-1.0)*py))+(((-0.39225)*x2071))+(((0.425001)*sj1))+(((0.39225)*x2072)));
evalcond[4]=((((-1.0)*r10*x2070))+x2073+((r12*x2063))+((r11*x2060))+((x2058*x2064))+((x2058*x2061)));
evalcond[5]=(((r22*x2063))+((r21*x2060))+x2071+(((-1.0)*x2072))+(((-1.0)*r20*x2070))+((x2058*x2066))+((x2058*x2059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2074=(cj4*r12);
IkReal x2075=(r10*sj5);
IkReal x2076=(cj1*sj4);
IkReal x2077=(sj1*sj4);
IkReal x2078=(r20*sj5);
IkReal x2079=((1.0)*cj4*r22);
IkReal x2080=((1.0)*x2077);
IkReal x2081=(cj5*x2076);
if( IKabs((((x2075*x2076))+(((-1.0)*sj1*x2079))+((x2077*x2078))+(((-1.0)*cj1*x2074))+((cj5*r21*x2077))+((r11*x2081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11*x2080))+((x2076*x2078))+((sj1*x2074))+((r21*x2081))+(((-1.0)*cj1*x2079))+(((-1.0)*x2075*x2080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2075*x2076))+(((-1.0)*sj1*x2079))+((x2077*x2078))+(((-1.0)*cj1*x2074))+((cj5*r21*x2077))+((r11*x2081))))+IKsqr(((((-1.0)*cj5*r11*x2080))+((x2076*x2078))+((sj1*x2074))+((r21*x2081))+(((-1.0)*cj1*x2079))+(((-1.0)*x2075*x2080))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2075*x2076))+(((-1.0)*sj1*x2079))+((x2077*x2078))+(((-1.0)*cj1*x2074))+((cj5*r21*x2077))+((r11*x2081))), ((((-1.0)*cj5*r11*x2080))+((x2076*x2078))+((sj1*x2074))+((r21*x2081))+(((-1.0)*cj1*x2079))+(((-1.0)*x2075*x2080))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2082=IKsin(j2);
IkReal x2083=IKcos(j2);
IkReal x2084=(sj3*sj5);
IkReal x2085=(r10*sj5);
IkReal x2086=((1.0)*sj4);
IkReal x2087=((1.0)*sj1);
IkReal x2088=(cj3*sj4);
IkReal x2089=(cj3*cj4);
IkReal x2090=(cj5*r21);
IkReal x2091=((0.03868)*cj5);
IkReal x2092=(r20*sj5);
IkReal x2093=((0.39225)*sj1);
IkReal x2094=((0.03868)*sj5);
IkReal x2095=(cj5*r11);
IkReal x2096=(cj1*x2082);
IkReal x2097=(cj1*x2083);
IkReal x2098=((1.0)*cj5*sj3);
IkReal x2099=(x2083*x2087);
evalcond[0]=(((cj4*r22))+x2097+((sj1*x2082))+(((-1.0)*x2086*x2092))+(((-1.0)*x2086*x2090)));
evalcond[1]=((((-1.0)*x2099))+x2096+(((-1.0)*x2085*x2086))+(((-1.0)*x2086*x2095))+((cj4*r12)));
evalcond[2]=((((-1.0)*r20*x2091))+(((0.39225)*x2097))+(((0.425001)*cj1))+((x2082*x2093))+(((-1.0)*pz))+((r21*x2094)));
evalcond[3]=((((-1.0)*x2083*x2093))+(((0.39225)*x2096))+(((-1.0)*py))+(((-0.425001)*sj1))+(((-1.0)*r10*x2091))+((r11*x2094)));
evalcond[4]=((((-1.0)*x2099))+(((-1.0)*r20*x2098))+x2096+((x2089*x2092))+((x2089*x2090))+((r21*x2084))+((r22*x2088)));
evalcond[5]=(((x2085*x2089))+((x2089*x2095))+(((-1.0)*x2082*x2087))+(((-1.0)*x2097))+(((-1.0)*r10*x2098))+((r11*x2084))+((r12*x2088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2100=(cj1*cj4);
IkReal x2101=(cj4*sj1);
IkReal x2102=(cj1*sj4);
IkReal x2103=(r10*sj5);
IkReal x2104=(sj1*sj4);
IkReal x2105=(cj5*r11);
IkReal x2106=((1.0)*cj0*r22);
IkReal x2107=(cj0*cj5*r21);
IkReal x2108=(cj0*r20*sj5);
CheckValue<IkReal> x2109=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110 = IKatan2WithCheck(IkReal((((r12*x2100))+(((-1.0)*x2102*x2103))+(((-1.0)*x2102*x2105))+((x2104*x2107))+((x2104*x2108))+(((-1.0)*x2101*x2106)))),IkReal(((((-1.0)*x2100*x2106))+(((-1.0)*r12*x2101))+((x2104*x2105))+((x2103*x2104))+((x2102*x2107))+((x2102*x2108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2109.value)))+(x2110.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2111=IKcos(j2);
IkReal x2112=IKsin(j2);
IkReal x2113=(cj3*sj4);
IkReal x2114=(sj0*sj1);
IkReal x2115=(sj3*sj5);
IkReal x2116=((0.03868)*sj5);
IkReal x2117=(cj3*cj4);
IkReal x2118=(cj5*r21);
IkReal x2119=((0.03868)*cj5);
IkReal x2120=(cj5*r01);
IkReal x2121=((1.0)*sj4);
IkReal x2122=(cj0*sj1);
IkReal x2123=(cj5*r11);
IkReal x2124=(cj1*x2111);
IkReal x2125=((1.0)*cj5*sj3);
IkReal x2126=(cj1*x2112);
IkReal x2127=((1.0)*x2111);
IkReal x2128=(sj5*x2121);
IkReal x2129=(sj1*x2112);
IkReal x2130=((0.39225)*sj1*x2111);
evalcond[0]=(((cj4*r22))+(((-1.0)*x2118*x2121))+x2124+x2129+(((-1.0)*r20*x2128)));
evalcond[1]=((((-1.0)*r20*x2119))+((r21*x2116))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2124))+(((0.39225)*x2129)));
evalcond[2]=((((-1.0)*r00*x2128))+((sj0*x2126))+(((-1.0)*x2120*x2121))+(((-1.0)*x2114*x2127))+((cj4*r02)));
evalcond[3]=((((-1.0)*r10*x2128))+(((-1.0)*cj0*x2126))+(((-1.0)*x2121*x2123))+((x2111*x2122))+((cj4*r12)));
evalcond[4]=((((-1.0)*r00*x2119))+((r01*x2116))+(((0.39225)*sj0*x2126))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-0.39225)*x2111*x2114))+(((-0.425001)*x2114)));
evalcond[5]=((((-1.0)*r10*x2119))+(((-0.032446)*sj0))+(((-1.0)*py))+(((0.425001)*x2122))+(((-0.39225)*cj0*x2126))+(((0.39225)*x2111*x2122))+((r11*x2116)));
evalcond[6]=(((x2117*x2118))+((r21*x2115))+x2126+(((-1.0)*r20*x2125))+(((-1.0)*sj1*x2127))+((r22*x2113))+((r20*sj5*x2117)));
evalcond[7]=(((r12*x2113))+(((-1.0)*r10*x2125))+((x2112*x2122))+((r10*sj5*x2117))+((x2117*x2123))+((cj0*x2124))+((r11*x2115)));
evalcond[8]=(((r01*x2115))+((r00*sj5*x2117))+(((-1.0)*r00*x2125))+(((-1.0)*sj0*x2124))+((r02*x2113))+(((-1.0)*x2112*x2114))+((x2117*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2131=(cj4*sj1);
IkReal x2132=(cj1*cj4);
IkReal x2133=((1.0)*sj1);
IkReal x2134=(cj1*sj4);
IkReal x2135=(r00*sj5);
IkReal x2136=((1.0)*r22*sj0);
IkReal x2137=(cj5*r01*sj4);
IkReal x2138=(cj5*r21*sj0);
IkReal x2139=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2140=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2140.valid){
continue;
}
CheckValue<IkReal> x2141 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2132))+((cj5*r01*x2134))+((x2134*x2135))+(((-1.0)*x2131*x2136))+((sj1*x2139))+((sj1*sj4*x2138)))),IkReal((((r02*x2131))+((r20*sj0*sj5*x2134))+(((-1.0)*sj4*x2133*x2135))+((x2134*x2138))+(((-1.0)*x2132*x2136))+(((-1.0)*x2133*x2137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2141.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2140.value)))+(x2141.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2142=IKcos(j2);
IkReal x2143=IKsin(j2);
IkReal x2144=(cj3*sj4);
IkReal x2145=(sj0*sj1);
IkReal x2146=(sj3*sj5);
IkReal x2147=((0.03868)*sj5);
IkReal x2148=(cj3*cj4);
IkReal x2149=(cj5*r21);
IkReal x2150=((0.03868)*cj5);
IkReal x2151=(cj5*r01);
IkReal x2152=((1.0)*sj4);
IkReal x2153=(cj0*sj1);
IkReal x2154=(cj5*r11);
IkReal x2155=(cj1*x2142);
IkReal x2156=((1.0)*cj5*sj3);
IkReal x2157=(cj1*x2143);
IkReal x2158=((1.0)*x2142);
IkReal x2159=(sj5*x2152);
IkReal x2160=(sj1*x2143);
IkReal x2161=((0.39225)*sj1*x2142);
evalcond[0]=((((-1.0)*x2149*x2152))+((cj4*r22))+x2160+x2155+(((-1.0)*r20*x2159)));
evalcond[1]=((((0.39225)*x2160))+(((0.425001)*cj1))+(((0.39225)*x2155))+(((-1.0)*pz))+((r21*x2147))+(((-1.0)*r20*x2150)));
evalcond[2]=((((-1.0)*r00*x2159))+((sj0*x2157))+(((-1.0)*x2151*x2152))+(((-1.0)*x2145*x2158))+((cj4*r02)));
evalcond[3]=(((x2142*x2153))+(((-1.0)*x2152*x2154))+(((-1.0)*cj0*x2157))+(((-1.0)*r10*x2159))+((cj4*r12)));
evalcond[4]=((((-1.0)*r00*x2150))+(((-0.39225)*x2142*x2145))+(((-1.0)*px))+(((-0.425001)*x2145))+(((-0.032446)*cj0))+((r01*x2147))+(((0.39225)*sj0*x2157)));
evalcond[5]=(((r11*x2147))+(((-0.032446)*sj0))+(((-1.0)*py))+(((0.39225)*x2142*x2153))+(((-0.39225)*cj0*x2157))+(((-1.0)*r10*x2150))+(((0.425001)*x2153)));
evalcond[6]=(((r20*sj5*x2148))+x2157+(((-1.0)*sj1*x2158))+((x2148*x2149))+((r21*x2146))+((r22*x2144))+(((-1.0)*r20*x2156)));
evalcond[7]=(((r11*x2146))+((x2143*x2153))+((cj0*x2155))+((r10*sj5*x2148))+(((-1.0)*r10*x2156))+((x2148*x2154))+((r12*x2144)));
evalcond[8]=((((-1.0)*r00*x2156))+(((-1.0)*x2143*x2145))+((r02*x2144))+((r00*sj5*x2148))+((x2148*x2151))+((r01*x2146))+(((-1.0)*sj0*x2155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2162=(cj0*sj5);
IkReal x2163=(cj0*cj5);
CheckValue<IkReal> x2164=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x2164.valid){
continue;
}
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal((((r21*x2162))+(((-1.0)*r20*x2163)))),IkReal((((cj0*r22*sj4))+((cj4*r20*x2162))+((cj4*r21*x2163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2164.value)))+(x2165.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2166=IKsin(j3);
IkReal x2167=IKcos(j3);
IkReal x2168=((1.0)*cj5);
IkReal x2169=((1.0)*sj5);
IkReal x2170=(cj4*x2166);
IkReal x2171=(sj5*x2167);
IkReal x2172=((1.0)*sj4*x2166);
evalcond[0]=((((-1.0)*r20*x2167*x2168))+((r21*x2171))+(((-1.0)*r21*x2168*x2170))+(((-1.0)*r20*x2169*x2170))+(((-1.0)*r22*x2172)));
evalcond[1]=(((r01*x2171))+cj0+(((-1.0)*r00*x2169*x2170))+(((-1.0)*r01*x2168*x2170))+(((-1.0)*r00*x2167*x2168))+(((-1.0)*r02*x2172)));
evalcond[2]=(sj0+((r11*x2171))+(((-1.0)*r10*x2169*x2170))+(((-1.0)*r11*x2168*x2170))+(((-1.0)*r12*x2172))+(((-1.0)*r10*x2167*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2173=((0.9229390048494)*cj4);
IkReal x2174=((0.9229390048494)*sj4);
IkReal x2175=((0.0910115505610575)*cj5);
IkReal x2176=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*r10*sj5*x2174))+((r10*x2175))+(((-1.0)*cj5*r11*x2174))+(((-1.0)*r11*x2176))+((r12*x2173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2176))+(((2.35293564015143)*pz))+((r22*x2173))+(((-1.0)*r20*sj5*x2174))+(((-1.0)*cj5*r21*x2174))+((r20*x2175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*r10*sj5*x2174))+((r10*x2175))+(((-1.0)*cj5*r11*x2174))+(((-1.0)*r11*x2176))+((r12*x2173))))+IKsqr(((((-1.0)*r21*x2176))+(((2.35293564015143)*pz))+((r22*x2173))+(((-1.0)*r20*sj5*x2174))+(((-1.0)*cj5*r21*x2174))+((r20*x2175))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*r10*sj5*x2174))+((r10*x2175))+(((-1.0)*cj5*r11*x2174))+(((-1.0)*r11*x2176))+((r12*x2173))), ((((-1.0)*r21*x2176))+(((2.35293564015143)*pz))+((r22*x2173))+(((-1.0)*r20*sj5*x2174))+(((-1.0)*cj5*r21*x2174))+((r20*x2175))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2177=((0.39225)*r10);
IkReal x2178=(sj4*sj5);
IkReal x2179=(cj5*sj3);
IkReal x2180=((0.39225)*r11);
IkReal x2181=(sj3*sj5);
IkReal x2182=(cj3*cj4);
IkReal x2183=((0.03868)*sj5);
IkReal x2184=((0.39225)*r21);
IkReal x2185=((0.03868)*cj5);
IkReal x2186=((0.39225)*cj4);
IkReal x2187=((0.39225)*r20);
IkReal x2188=(cj5*sj4);
IkReal x2189=(r10*x2185);
IkReal x2190=(r11*x2183);
IkReal x2191=((0.425001)*(IKsin(j1)));
IkReal x2192=(r21*x2183);
IkReal x2193=((0.425001)*(IKcos(j1)));
IkReal x2194=(r20*x2185);
IkReal x2195=((0.39225)*cj3*sj4);
IkReal x2196=(x2189+py);
IkReal x2197=(x2190+x2191);
IkReal x2198=(x2192+x2193);
evalcond[0]=((((-1.0)*x2180*x2188))+x2196+((r12*x2186))+(((-1.0)*x2197))+(((-1.0)*x2177*x2178)));
evalcond[1]=(((r22*x2186))+x2194+pz+(((-1.0)*x2198))+(((-1.0)*x2184*x2188))+(((-1.0)*x2178*x2187)));
evalcond[2]=(((x2179*x2187))+x2196+(((-1.0)*x2181*x2184))+(((-1.0)*sj5*x2182*x2187))+(((-1.0)*r22*x2195))+(((-1.0)*x2197))+(((-1.0)*cj5*x2182*x2184)));
evalcond[3]=((((-1.0)*sj5*x2177*x2182))+(((-1.0)*x2180*x2181))+(((-1.0)*cj5*x2180*x2182))+x2198+((x2177*x2179))+(((-1.0)*pz))+(((-1.0)*x2194))+(((-1.0)*r12*x2195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2199=(cj1*cj4);
IkReal x2200=((1.0)*r22);
IkReal x2201=(cj4*sj1);
IkReal x2202=(sj4*sj5);
IkReal x2203=(cj1*cj5*sj4);
IkReal x2204=(cj5*sj1*sj4);
if( IKabs(((((-1.0)*cj1*r10*x2202))+((r20*sj1*x2202))+((r12*x2199))+(((-1.0)*x2200*x2201))+((r21*x2204))+(((-1.0)*r11*x2203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2204))+(((-1.0)*x2199*x2200))+((cj1*r20*x2202))+((r21*x2203))+(((-1.0)*r12*x2201))+((r10*sj1*x2202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r10*x2202))+((r20*sj1*x2202))+((r12*x2199))+(((-1.0)*x2200*x2201))+((r21*x2204))+(((-1.0)*r11*x2203))))+IKsqr((((r11*x2204))+(((-1.0)*x2199*x2200))+((cj1*r20*x2202))+((r21*x2203))+(((-1.0)*r12*x2201))+((r10*sj1*x2202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*r10*x2202))+((r20*sj1*x2202))+((r12*x2199))+(((-1.0)*x2200*x2201))+((r21*x2204))+(((-1.0)*r11*x2203))), (((r11*x2204))+(((-1.0)*x2199*x2200))+((cj1*r20*x2202))+((r21*x2203))+(((-1.0)*r12*x2201))+((r10*sj1*x2202))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2205=IKcos(j2);
IkReal x2206=IKsin(j2);
IkReal x2207=(cj3*cj4);
IkReal x2208=(cj5*r21);
IkReal x2209=(sj3*sj5);
IkReal x2210=(r10*sj5);
IkReal x2211=((1.0)*sj4);
IkReal x2212=(cj3*sj4);
IkReal x2213=(cj5*r11);
IkReal x2214=((0.03868)*cj5);
IkReal x2215=(r20*sj5);
IkReal x2216=((0.03868)*sj5);
IkReal x2217=(cj1*x2205);
IkReal x2218=(sj1*x2206);
IkReal x2219=((1.0)*cj5*sj3);
IkReal x2220=(cj1*x2206);
IkReal x2221=(sj1*x2205);
IkReal x2222=(x2217+x2218);
evalcond[0]=((((-1.0)*x2208*x2211))+x2222+((cj4*r22))+(((-1.0)*x2211*x2215)));
evalcond[1]=((((-1.0)*x2210*x2211))+x2221+(((-1.0)*x2220))+(((-1.0)*x2211*x2213))+((cj4*r12)));
evalcond[2]=((((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2214))+((r21*x2216))+(((0.39225)*x2218))+(((0.39225)*x2217)));
evalcond[3]=((((0.39225)*x2221))+(((-1.0)*r10*x2214))+((r11*x2216))+(((-1.0)*py))+(((0.425001)*sj1))+(((-0.39225)*x2220)));
evalcond[4]=(x2222+((r12*x2212))+(((-1.0)*r10*x2219))+((r11*x2209))+((x2207*x2210))+((x2207*x2213)));
evalcond[5]=(x2220+(((-1.0)*x2221))+(((-1.0)*r20*x2219))+((x2207*x2215))+((x2207*x2208))+((r21*x2209))+((r22*x2212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2223=((0.9229390048494)*sj4);
IkReal x2224=((0.0910115505610575)*cj5);
IkReal x2225=((0.9229390048494)*cj4);
IkReal x2226=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*x2224))+((cj5*r11*x2223))+((r10*sj5*x2223))+(((-1.0)*r12*x2225))+((r11*x2226))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r21*x2226))+((r22*x2225))+(((-1.0)*r20*sj5*x2223))+((r20*x2224))+(((-1.0)*cj5*r21*x2223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2224))+((cj5*r11*x2223))+((r10*sj5*x2223))+(((-1.0)*r12*x2225))+((r11*x2226))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r21*x2226))+((r22*x2225))+(((-1.0)*r20*sj5*x2223))+((r20*x2224))+(((-1.0)*cj5*r21*x2223))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x2224))+((cj5*r11*x2223))+((r10*sj5*x2223))+(((-1.0)*r12*x2225))+((r11*x2226))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+(((-1.0)*r21*x2226))+((r22*x2225))+(((-1.0)*r20*sj5*x2223))+((r20*x2224))+(((-1.0)*cj5*r21*x2223))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2227=((0.39225)*r10);
IkReal x2228=(sj4*sj5);
IkReal x2229=(cj5*sj3);
IkReal x2230=((0.39225)*r11);
IkReal x2231=(sj3*sj5);
IkReal x2232=(cj3*cj4);
IkReal x2233=((0.03868)*sj5);
IkReal x2234=((0.39225)*r21);
IkReal x2235=((0.03868)*cj5);
IkReal x2236=((0.39225)*cj4);
IkReal x2237=((0.39225)*r20);
IkReal x2238=(cj5*sj4);
IkReal x2239=((0.425001)*(IKsin(j1)));
IkReal x2240=(r10*x2235);
IkReal x2241=(r11*x2233);
IkReal x2242=(r20*x2235);
IkReal x2243=(r21*x2233);
IkReal x2244=((0.425001)*(IKcos(j1)));
IkReal x2245=((0.39225)*cj3*sj4);
IkReal x2246=(x2242+pz);
IkReal x2247=(x2244+x2243);
IkReal x2248=(x2239+x2240);
evalcond[0]=((((-1.0)*x2234*x2238))+x2246+((r22*x2236))+(((-1.0)*x2228*x2237))+(((-1.0)*x2247)));
evalcond[1]=(x2241+((x2227*x2228))+(((-1.0)*py))+(((-1.0)*x2248))+(((-1.0)*r12*x2236))+((x2230*x2238)));
evalcond[2]=(((cj5*x2232*x2234))+x2248+((sj5*x2232*x2237))+(((-1.0)*x2229*x2237))+(((-1.0)*x2241))+py+((x2231*x2234))+((r22*x2245)));
evalcond[3]=(x2246+((x2227*x2229))+(((-1.0)*x2247))+(((-1.0)*sj5*x2227*x2232))+(((-1.0)*r12*x2245))+(((-1.0)*cj5*x2230*x2232))+(((-1.0)*x2230*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2249=(cj4*r12);
IkReal x2250=(r10*sj5);
IkReal x2251=(cj1*sj4);
IkReal x2252=(sj1*sj4);
IkReal x2253=(r20*sj5);
IkReal x2254=((1.0)*cj4*r22);
IkReal x2255=((1.0)*x2252);
IkReal x2256=(cj5*x2251);
if( IKabs(((((-1.0)*sj1*x2254))+((x2252*x2253))+((cj5*r21*x2252))+((x2250*x2251))+(((-1.0)*cj1*x2249))+((r11*x2256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11*x2255))+((sj1*x2249))+((x2251*x2253))+((r21*x2256))+(((-1.0)*cj1*x2254))+(((-1.0)*x2250*x2255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x2254))+((x2252*x2253))+((cj5*r21*x2252))+((x2250*x2251))+(((-1.0)*cj1*x2249))+((r11*x2256))))+IKsqr(((((-1.0)*cj5*r11*x2255))+((sj1*x2249))+((x2251*x2253))+((r21*x2256))+(((-1.0)*cj1*x2254))+(((-1.0)*x2250*x2255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x2254))+((x2252*x2253))+((cj5*r21*x2252))+((x2250*x2251))+(((-1.0)*cj1*x2249))+((r11*x2256))), ((((-1.0)*cj5*r11*x2255))+((sj1*x2249))+((x2251*x2253))+((r21*x2256))+(((-1.0)*cj1*x2254))+(((-1.0)*x2250*x2255))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2257=IKsin(j2);
IkReal x2258=IKcos(j2);
IkReal x2259=(sj3*sj5);
IkReal x2260=(r10*sj5);
IkReal x2261=((1.0)*sj4);
IkReal x2262=((1.0)*sj1);
IkReal x2263=(cj3*sj4);
IkReal x2264=(cj3*cj4);
IkReal x2265=(cj5*r21);
IkReal x2266=((0.03868)*cj5);
IkReal x2267=(r20*sj5);
IkReal x2268=((0.39225)*sj1);
IkReal x2269=((0.03868)*sj5);
IkReal x2270=(cj5*r11);
IkReal x2271=(cj1*x2257);
IkReal x2272=(cj1*x2258);
IkReal x2273=((1.0)*cj5*sj3);
IkReal x2274=(x2258*x2262);
evalcond[0]=(x2272+((cj4*r22))+(((-1.0)*x2261*x2265))+(((-1.0)*x2261*x2267))+((sj1*x2257)));
evalcond[1]=(x2271+(((-1.0)*x2260*x2261))+(((-1.0)*x2261*x2270))+(((-1.0)*x2274))+((cj4*r12)));
evalcond[2]=(((x2257*x2268))+((r21*x2269))+(((-1.0)*r20*x2266))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2272)));
evalcond[3]=((((-1.0)*x2258*x2268))+((r11*x2269))+(((-1.0)*py))+(((-1.0)*r10*x2266))+(((-0.425001)*sj1))+(((0.39225)*x2271)));
evalcond[4]=(x2271+((r22*x2263))+(((-1.0)*r20*x2273))+(((-1.0)*x2274))+((x2264*x2267))+((x2264*x2265))+((r21*x2259)));
evalcond[5]=(((x2260*x2264))+(((-1.0)*x2257*x2262))+((r12*x2263))+(((-1.0)*r10*x2273))+((x2264*x2270))+(((-1.0)*x2272))+((r11*x2259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2275=((0.9229390048494)*cj4);
IkReal x2276=((0.9229390048494)*sj4);
IkReal x2277=((0.0910115505610575)*cj5);
IkReal x2278=((0.0910115505610575)*sj5);
if( IKabs((((r01*x2278))+((cj5*r01*x2276))+(((-1.0)*r00*x2277))+(((-1.0)*r02*x2275))+((r00*sj5*x2276))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2276))+(((-1.0)*r20*sj5*x2276))+(((-1.0)*r21*x2278))+((r22*x2275))+((r20*x2277)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2278))+((cj5*r01*x2276))+(((-1.0)*r00*x2277))+(((-1.0)*r02*x2275))+((r00*sj5*x2276))+(((-2.35293564015143)*px))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2276))+(((-1.0)*r20*sj5*x2276))+(((-1.0)*r21*x2278))+((r22*x2275))+((r20*x2277))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x2278))+((cj5*r01*x2276))+(((-1.0)*r00*x2277))+(((-1.0)*r02*x2275))+((r00*sj5*x2276))+(((-2.35293564015143)*px))), ((((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2276))+(((-1.0)*r20*sj5*x2276))+(((-1.0)*r21*x2278))+((r22*x2275))+((r20*x2277))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2279=((0.39225)*sj3);
IkReal x2280=(cj5*r00);
IkReal x2281=((0.39225)*cj4);
IkReal x2282=(r01*sj5);
IkReal x2283=(r21*sj5);
IkReal x2284=(cj5*r20);
IkReal x2285=((0.39225)*sj4);
IkReal x2286=(r20*sj5);
IkReal x2287=(r00*sj5);
IkReal x2288=(cj5*r01);
IkReal x2289=(cj5*r21);
IkReal x2290=((0.425001)*(IKsin(j1)));
IkReal x2291=((0.03868)*x2280);
IkReal x2292=((0.03868)*x2282);
IkReal x2293=((0.03868)*x2284);
IkReal x2294=((0.03868)*x2283);
IkReal x2295=((0.425001)*(IKcos(j1)));
IkReal x2296=(x2293+pz);
IkReal x2297=(x2295+x2294);
IkReal x2298=(x2291+x2290);
evalcond[0]=(x2296+(((-1.0)*x2285*x2286))+(((-1.0)*x2285*x2289))+(((-1.0)*x2297))+((r22*x2281)));
evalcond[1]=((((-1.0)*r02*x2281))+x2292+(((-1.0)*px))+(((-1.0)*x2298))+((x2285*x2287))+((x2285*x2288)));
evalcond[2]=(x2298+((x2279*x2283))+(((-1.0)*x2279*x2284))+px+(((-1.0)*x2292))+((cj3*r22*x2285))+((cj3*x2281*x2286))+((cj3*x2281*x2289)));
evalcond[3]=(x2296+(((-1.0)*cj3*r02*x2285))+(((-1.0)*cj3*x2281*x2287))+(((-1.0)*cj3*x2281*x2288))+((x2279*x2280))+(((-1.0)*x2279*x2282))+(((-1.0)*x2297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2299=(cj4*r02);
IkReal x2300=(cj5*sj4);
IkReal x2301=((1.0)*sj1);
IkReal x2302=(sj4*sj5);
IkReal x2303=((1.0)*cj4*r22);
if( IKabs(((((-1.0)*cj1*x2299))+((r20*sj1*x2302))+((cj1*r01*x2300))+((cj1*r00*x2302))+(((-1.0)*cj4*r22*x2301))+((r21*sj1*x2300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2299))+(((-1.0)*r01*x2300*x2301))+((cj1*r21*x2300))+(((-1.0)*r00*x2301*x2302))+((cj1*r20*x2302))+(((-1.0)*cj1*x2303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x2299))+((r20*sj1*x2302))+((cj1*r01*x2300))+((cj1*r00*x2302))+(((-1.0)*cj4*r22*x2301))+((r21*sj1*x2300))))+IKsqr((((sj1*x2299))+(((-1.0)*r01*x2300*x2301))+((cj1*r21*x2300))+(((-1.0)*r00*x2301*x2302))+((cj1*r20*x2302))+(((-1.0)*cj1*x2303))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x2299))+((r20*sj1*x2302))+((cj1*r01*x2300))+((cj1*r00*x2302))+(((-1.0)*cj4*r22*x2301))+((r21*sj1*x2300))), (((sj1*x2299))+(((-1.0)*r01*x2300*x2301))+((cj1*r21*x2300))+(((-1.0)*r00*x2301*x2302))+((cj1*r20*x2302))+(((-1.0)*cj1*x2303))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2304=IKsin(j2);
IkReal x2305=IKcos(j2);
IkReal x2306=(cj3*cj4);
IkReal x2307=(cj5*r21);
IkReal x2308=(r00*sj5);
IkReal x2309=(r21*sj5);
IkReal x2310=(r20*sj5);
IkReal x2311=((1.0)*sj1);
IkReal x2312=((0.03868)*cj5);
IkReal x2313=((1.0)*sj4);
IkReal x2314=(cj3*sj4);
IkReal x2315=((0.39225)*sj1);
IkReal x2316=(cj5*r01);
IkReal x2317=(r01*sj5);
IkReal x2318=(cj1*x2304);
IkReal x2319=(cj1*x2305);
IkReal x2320=((1.0)*cj5*sj3);
IkReal x2321=(x2305*x2311);
evalcond[0]=(((sj1*x2304))+((cj4*r22))+x2319+(((-1.0)*x2310*x2313))+(((-1.0)*x2307*x2313)));
evalcond[1]=(x2318+(((-1.0)*x2308*x2313))+(((-1.0)*x2313*x2316))+(((-1.0)*x2321))+((cj4*r02)));
evalcond[2]=((((-1.0)*r20*x2312))+(((0.39225)*x2319))+((x2304*x2315))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x2309)));
evalcond[3]=((((0.39225)*x2318))+(((-1.0)*px))+(((-1.0)*r00*x2312))+(((-0.425001)*sj1))+(((0.03868)*x2317))+(((-1.0)*x2305*x2315)));
evalcond[4]=(((x2306*x2310))+x2318+((x2306*x2307))+((r22*x2314))+((sj3*x2309))+(((-1.0)*r20*x2320))+(((-1.0)*x2321)));
evalcond[5]=((((-1.0)*x2319))+((sj3*x2317))+(((-1.0)*x2304*x2311))+((x2306*x2316))+((x2306*x2308))+(((-1.0)*r00*x2320))+((r02*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2322=((0.9229390048494)*cj4);
IkReal x2323=((0.9229390048494)*sj4);
IkReal x2324=((0.0910115505610575)*cj5);
IkReal x2325=((0.0910115505610575)*sj5);
if( IKabs((((r02*x2322))+(((2.35293564015143)*px))+(((-1.0)*r00*sj5*x2323))+(((-1.0)*cj5*r01*x2323))+((r00*x2324))+(((-1.0)*r01*x2325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x2323))+((r22*x2322))+(((-1.0)*cj5*r21*x2323))+((r20*x2324))+(((-1.0)*r21*x2325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2322))+(((2.35293564015143)*px))+(((-1.0)*r00*sj5*x2323))+(((-1.0)*cj5*r01*x2323))+((r00*x2324))+(((-1.0)*r01*x2325))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x2323))+((r22*x2322))+(((-1.0)*cj5*r21*x2323))+((r20*x2324))+(((-1.0)*r21*x2325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x2322))+(((2.35293564015143)*px))+(((-1.0)*r00*sj5*x2323))+(((-1.0)*cj5*r01*x2323))+((r00*x2324))+(((-1.0)*r01*x2325))), ((((2.35293564015143)*pz))+(((-1.0)*r20*sj5*x2323))+((r22*x2322))+(((-1.0)*cj5*r21*x2323))+((r20*x2324))+(((-1.0)*r21*x2325))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2326=((0.39225)*sj3);
IkReal x2327=(cj5*r00);
IkReal x2328=((0.39225)*cj4);
IkReal x2329=(r01*sj5);
IkReal x2330=(r21*sj5);
IkReal x2331=(cj5*r20);
IkReal x2332=((0.39225)*sj4);
IkReal x2333=(r20*sj5);
IkReal x2334=(r00*sj5);
IkReal x2335=(cj5*r01);
IkReal x2336=(cj5*r21);
IkReal x2337=((0.03868)*x2327);
IkReal x2338=((0.425001)*(IKsin(j1)));
IkReal x2339=((0.03868)*x2329);
IkReal x2340=((0.03868)*x2330);
IkReal x2341=((0.425001)*(IKcos(j1)));
IkReal x2342=((0.03868)*x2331);
IkReal x2343=(x2337+px);
IkReal x2344=(x2338+x2339);
IkReal x2345=(x2341+x2340);
evalcond[0]=(((r02*x2328))+(((-1.0)*x2332*x2335))+(((-1.0)*x2332*x2334))+x2343+(((-1.0)*x2344)));
evalcond[1]=((((-1.0)*x2332*x2336))+(((-1.0)*x2332*x2333))+x2342+((r22*x2328))+pz+(((-1.0)*x2345)));
evalcond[2]=(x2343+((x2326*x2331))+(((-1.0)*cj3*x2328*x2333))+(((-1.0)*cj3*x2328*x2336))+(((-1.0)*x2326*x2330))+(((-1.0)*cj3*r22*x2332))+(((-1.0)*x2344)));
evalcond[3]=(x2345+(((-1.0)*pz))+(((-1.0)*cj3*r02*x2332))+(((-1.0)*cj3*x2328*x2334))+(((-1.0)*cj3*x2328*x2335))+(((-1.0)*x2326*x2329))+((x2326*x2327))+(((-1.0)*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2346=(cj5*sj4);
IkReal x2347=(cj4*r02);
IkReal x2348=((1.0)*cj1);
IkReal x2349=(sj4*sj5);
IkReal x2350=((1.0)*cj4*r22);
IkReal x2351=(sj1*x2349);
if( IKabs(((((-1.0)*r00*x2348*x2349))+(((-1.0)*sj1*x2350))+((r21*sj1*x2346))+((cj1*x2347))+((r20*x2351))+(((-1.0)*r01*x2346*x2348)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x2351))+((cj1*r21*x2346))+((r01*sj1*x2346))+(((-1.0)*sj1*x2347))+((cj1*r20*x2349))+(((-1.0)*cj4*r22*x2348)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2348*x2349))+(((-1.0)*sj1*x2350))+((r21*sj1*x2346))+((cj1*x2347))+((r20*x2351))+(((-1.0)*r01*x2346*x2348))))+IKsqr((((r00*x2351))+((cj1*r21*x2346))+((r01*sj1*x2346))+(((-1.0)*sj1*x2347))+((cj1*r20*x2349))+(((-1.0)*cj4*r22*x2348))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2348*x2349))+(((-1.0)*sj1*x2350))+((r21*sj1*x2346))+((cj1*x2347))+((r20*x2351))+(((-1.0)*r01*x2346*x2348))), (((r00*x2351))+((cj1*r21*x2346))+((r01*sj1*x2346))+(((-1.0)*sj1*x2347))+((cj1*r20*x2349))+(((-1.0)*cj4*r22*x2348))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2352=IKcos(j2);
IkReal x2353=IKsin(j2);
IkReal x2354=(cj3*sj4);
IkReal x2355=((0.03868)*cj5);
IkReal x2356=(r21*sj5);
IkReal x2357=(cj3*cj4);
IkReal x2358=(r20*sj5);
IkReal x2359=((1.0)*sj4);
IkReal x2360=(r00*sj5);
IkReal x2361=(cj5*r21);
IkReal x2362=((0.39225)*sj1);
IkReal x2363=(cj5*r01);
IkReal x2364=(r01*sj5);
IkReal x2365=(cj1*x2352);
IkReal x2366=(sj1*x2353);
IkReal x2367=((1.0)*cj5*sj3);
IkReal x2368=(cj1*x2353);
IkReal x2369=(sj1*x2352);
IkReal x2370=(x2366+x2365);
evalcond[0]=((((-1.0)*x2358*x2359))+((cj4*r22))+x2370+(((-1.0)*x2359*x2361)));
evalcond[1]=(x2369+(((-1.0)*x2368))+(((-1.0)*x2359*x2363))+(((-1.0)*x2359*x2360))+((cj4*r02)));
evalcond[2]=((((0.03868)*x2356))+(((-1.0)*r20*x2355))+(((0.425001)*cj1))+(((-1.0)*pz))+((x2353*x2362))+(((0.39225)*x2365)));
evalcond[3]=((((-1.0)*r00*x2355))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x2364))+((x2352*x2362))+(((-0.39225)*x2368)));
evalcond[4]=(x2370+((sj3*x2364))+(((-1.0)*r00*x2367))+((x2357*x2363))+((x2357*x2360))+((r02*x2354)));
evalcond[5]=(((x2357*x2358))+x2368+((r22*x2354))+(((-1.0)*r20*x2367))+(((-1.0)*x2369))+((x2357*x2361))+((sj3*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2371=(r01*sj0);
IkReal x2372=((0.9229390048494)*sj4);
IkReal x2373=((0.39225)*sj4);
IkReal x2374=(r00*sj0);
CheckValue<IkReal> x2375=IKPowWithIntegerCheck(sj0,-2);
if(!x2375.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x2375.value)*(((((-0.03868)*cj5*x2374))+(((0.03868)*sj5*x2371))+((sj5*x2373*x2374))+(((-0.39225)*cj4*r02*sj0))+((cj5*x2371*x2373))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x2372))+(((-1.0)*r20*sj5*x2372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x2375.value)*(((((-0.03868)*cj5*x2374))+(((0.03868)*sj5*x2371))+((sj5*x2373*x2374))+(((-0.39225)*cj4*r02*sj0))+((cj5*x2371*x2373))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))))))+IKsqr(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x2372))+(((-1.0)*r20*sj5*x2372))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x2375.value)*(((((-0.03868)*cj5*x2374))+(((0.03868)*sj5*x2371))+((sj5*x2373*x2374))+(((-0.39225)*cj4*r02*sj0))+((cj5*x2371*x2373))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))))), ((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x2372))+(((-1.0)*r20*sj5*x2372))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2376=IKsin(j1);
IkReal x2377=IKcos(j1);
IkReal x2378=cj0*cj0;
IkReal x2379=sj0*sj0;
IkReal x2380=((0.425001)*cj0);
IkReal x2381=((0.39225)*sj5);
IkReal x2382=(cj3*cj4);
IkReal x2383=(cj0*r20);
IkReal x2384=(cj5*r00);
IkReal x2385=((0.03868)*sj0);
IkReal x2386=(sj0*sj4);
IkReal x2387=((0.39225)*sj3);
IkReal x2388=((0.39225)*cj5);
IkReal x2389=(cj0*sj4);
IkReal x2390=(cj5*r10);
IkReal x2391=(r11*sj5);
IkReal x2392=((0.39225)*r22);
IkReal x2393=((1.0)*sj0);
IkReal x2394=((0.03868)*cj0);
IkReal x2395=((0.03868)*cj5);
IkReal x2396=((0.032446)*cj0);
IkReal x2397=(cj0*r21);
IkReal x2398=((0.39225)*r02);
IkReal x2399=(cj0*cj4);
IkReal x2400=(r01*sj5);
IkReal x2401=(cj3*sj4);
IkReal x2402=(r20*sj0);
IkReal x2403=(r21*sj0);
IkReal x2404=((0.39225)*r12);
IkReal x2405=(sj0*x2396);
IkReal x2406=((0.39225)*cj4*sj0);
IkReal x2407=((0.03868)*r21*sj5);
IkReal x2408=((0.425001)*x2376);
IkReal x2409=((0.425001)*x2377);
IkReal x2410=(sj0*x2376*x2380);
evalcond[0]=((((-1.0)*x2407))+(((-1.0)*x2409))+((r20*x2395))+pz+(((-1.0)*r21*sj4*x2388))+(((-1.0)*r20*sj4*x2381))+((cj4*x2392)));
evalcond[1]=(x2405+((x2399*x2404))+((x2390*x2394))+(((-1.0)*r11*x2388*x2389))+(((-1.0)*x2378*x2408))+(((-1.0)*x2391*x2394))+((cj0*py))+(((-1.0)*r10*x2381*x2389)));
evalcond[2]=(((x2385*x2400))+(((-1.0)*x2379*x2408))+(((-1.0)*x2405))+(((-1.0)*cj4*sj0*x2398))+((r00*x2381*x2386))+(((-1.0)*px*x2393))+((r01*x2386*x2388))+(((-1.0)*x2384*x2385)));
evalcond[3]=((((-1.0)*r00*x2381*x2382))+((x2384*x2387))+(((-1.0)*r21*sj5*x2385))+((cj5*r20*x2385))+(((-1.0)*r01*sj3*x2381))+(((-1.0)*r01*x2382*x2388))+((pz*sj0))+(((-1.0)*sj0*x2409))+(((-1.0)*x2398*x2401)));
evalcond[4]=((((-1.0)*x2401*x2404))+((x2387*x2390))+(((-1.0)*r11*sj3*x2381))+(((-1.0)*x2383*x2395))+(((-1.0)*r11*x2382*x2388))+(((-1.0)*cj0*pz))+((r21*sj5*x2394))+(((-1.0)*r10*x2381*x2382))+((x2377*x2380)));
evalcond[5]=((((-1.0)*sj3*x2381*x2397))+((cj5*x2383*x2387))+(((-1.0)*x2376*x2380))+(((0.032446)*sj0))+(((0.03868)*x2390))+py+(((-1.0)*cj3*x2389*x2392))+(((-1.0)*x2381*x2382*x2383))+(((-0.03868)*x2391))+(((-1.0)*x2382*x2388*x2397)));
evalcond[6]=(((x2381*x2382*x2402))+(((-0.03868)*x2400))+((sj3*x2381*x2403))+((x2382*x2388*x2403))+x2396+(((0.03868)*x2384))+px+((sj0*x2408))+((cj3*x2386*x2392))+(((-1.0)*cj5*x2387*x2402)));
evalcond[7]=(((x2384*x2394))+x2410+((r10*x2381*x2386))+(((-1.0)*x2394*x2400))+(((-1.0)*cj4*sj0*x2404))+(((0.032446)*x2378))+((r11*x2386*x2388))+((cj0*px)));
evalcond[8]=((((-1.0)*x2385*x2390))+x2410+(((-1.0)*r00*x2381*x2389))+((x2385*x2391))+((x2398*x2399))+(((-0.032446)*x2379))+(((-1.0)*py*x2393))+(((-1.0)*r01*x2388*x2389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2411=(cj4*r02);
IkReal x2412=(cj5*sj4);
IkReal x2413=((1.0)*sj1);
IkReal x2414=(sj4*sj5);
IkReal x2415=((1.0)*cj4*r22);
if( IKabs((((cj1*r01*x2412))+(((-1.0)*cj1*x2411))+((r20*sj1*x2414))+((cj1*r00*x2414))+(((-1.0)*cj4*r22*x2413))+((r21*sj1*x2412)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x2412))+((cj1*r20*x2414))+(((-1.0)*r00*x2413*x2414))+(((-1.0)*r01*x2412*x2413))+((sj1*x2411))+(((-1.0)*cj1*x2415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x2412))+(((-1.0)*cj1*x2411))+((r20*sj1*x2414))+((cj1*r00*x2414))+(((-1.0)*cj4*r22*x2413))+((r21*sj1*x2412))))+IKsqr((((cj1*r21*x2412))+((cj1*r20*x2414))+(((-1.0)*r00*x2413*x2414))+(((-1.0)*r01*x2412*x2413))+((sj1*x2411))+(((-1.0)*cj1*x2415))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x2412))+(((-1.0)*cj1*x2411))+((r20*sj1*x2414))+((cj1*r00*x2414))+(((-1.0)*cj4*r22*x2413))+((r21*sj1*x2412))), (((cj1*r21*x2412))+((cj1*r20*x2414))+(((-1.0)*r00*x2413*x2414))+(((-1.0)*r01*x2412*x2413))+((sj1*x2411))+(((-1.0)*cj1*x2415))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2416=IKsin(j2);
IkReal x2417=IKcos(j2);
IkReal x2418=(cj3*cj4);
IkReal x2419=(cj5*r21);
IkReal x2420=(r00*sj5);
IkReal x2421=(r21*sj5);
IkReal x2422=(r20*sj5);
IkReal x2423=((1.0)*sj1);
IkReal x2424=((0.03868)*cj5);
IkReal x2425=((1.0)*sj4);
IkReal x2426=(cj3*sj4);
IkReal x2427=((0.39225)*sj1);
IkReal x2428=(cj5*r01);
IkReal x2429=(r01*sj5);
IkReal x2430=(cj1*x2416);
IkReal x2431=(cj1*x2417);
IkReal x2432=((1.0)*cj5*sj3);
IkReal x2433=(x2417*x2423);
evalcond[0]=(x2431+((cj4*r22))+(((-1.0)*x2422*x2425))+((sj1*x2416))+(((-1.0)*x2419*x2425)));
evalcond[1]=(x2430+(((-1.0)*x2433))+(((-1.0)*x2425*x2428))+(((-1.0)*x2420*x2425))+((cj4*r02)));
evalcond[2]=(((x2416*x2427))+(((-1.0)*r20*x2424))+(((0.425001)*cj1))+(((0.39225)*x2431))+(((-1.0)*pz))+(((0.03868)*x2421)));
evalcond[3]=((((0.39225)*x2430))+(((-1.0)*px))+(((-1.0)*x2417*x2427))+(((-0.425001)*sj1))+(((0.03868)*x2429))+(((-1.0)*r00*x2424)));
evalcond[4]=(((x2418*x2422))+((r22*x2426))+x2430+(((-1.0)*x2433))+((x2418*x2419))+(((-1.0)*r20*x2432))+((sj3*x2421)));
evalcond[5]=((((-1.0)*x2431))+((x2418*x2420))+((x2418*x2428))+(((-1.0)*r00*x2432))+(((-1.0)*x2416*x2423))+((sj3*x2429))+((r02*x2426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2434=(cj5*sj4);
IkReal x2435=(cj4*r02);
IkReal x2436=((1.0)*cj1);
IkReal x2437=(sj4*sj5);
IkReal x2438=((1.0)*cj4*r22);
IkReal x2439=(sj1*x2437);
if( IKabs(((((-1.0)*r01*x2434*x2436))+((r21*sj1*x2434))+((r20*x2439))+(((-1.0)*sj1*x2438))+((cj1*x2435))+(((-1.0)*r00*x2436*x2437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x2439))+(((-1.0)*cj4*r22*x2436))+((cj1*r20*x2437))+((cj1*r21*x2434))+(((-1.0)*sj1*x2435))+((r01*sj1*x2434)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2434*x2436))+((r21*sj1*x2434))+((r20*x2439))+(((-1.0)*sj1*x2438))+((cj1*x2435))+(((-1.0)*r00*x2436*x2437))))+IKsqr((((r00*x2439))+(((-1.0)*cj4*r22*x2436))+((cj1*r20*x2437))+((cj1*r21*x2434))+(((-1.0)*sj1*x2435))+((r01*sj1*x2434))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x2434*x2436))+((r21*sj1*x2434))+((r20*x2439))+(((-1.0)*sj1*x2438))+((cj1*x2435))+(((-1.0)*r00*x2436*x2437))), (((r00*x2439))+(((-1.0)*cj4*r22*x2436))+((cj1*r20*x2437))+((cj1*r21*x2434))+(((-1.0)*sj1*x2435))+((r01*sj1*x2434))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2440=IKcos(j2);
IkReal x2441=IKsin(j2);
IkReal x2442=(cj3*sj4);
IkReal x2443=((0.03868)*cj5);
IkReal x2444=(r21*sj5);
IkReal x2445=(cj3*cj4);
IkReal x2446=(r20*sj5);
IkReal x2447=((1.0)*sj4);
IkReal x2448=(r00*sj5);
IkReal x2449=(cj5*r21);
IkReal x2450=((0.39225)*sj1);
IkReal x2451=(cj5*r01);
IkReal x2452=(r01*sj5);
IkReal x2453=(cj1*x2440);
IkReal x2454=(sj1*x2441);
IkReal x2455=((1.0)*cj5*sj3);
IkReal x2456=(cj1*x2441);
IkReal x2457=(sj1*x2440);
IkReal x2458=(x2454+x2453);
evalcond[0]=(x2458+((cj4*r22))+(((-1.0)*x2446*x2447))+(((-1.0)*x2447*x2449)));
evalcond[1]=(x2457+(((-1.0)*x2456))+(((-1.0)*x2447*x2448))+(((-1.0)*x2447*x2451))+((cj4*r02)));
evalcond[2]=((((0.03868)*x2444))+(((0.39225)*x2453))+(((-1.0)*r20*x2443))+(((0.425001)*cj1))+(((-1.0)*pz))+((x2441*x2450)));
evalcond[3]=(((x2440*x2450))+(((-1.0)*px))+(((0.425001)*sj1))+(((-1.0)*r00*x2443))+(((-0.39225)*x2456))+(((0.03868)*x2452)));
evalcond[4]=(((r02*x2442))+x2458+((sj3*x2452))+((x2445*x2448))+((x2445*x2451))+(((-1.0)*r00*x2455)));
evalcond[5]=(((sj3*x2444))+x2456+((r22*x2442))+(((-1.0)*r20*x2455))+(((-1.0)*x2457))+((x2445*x2449))+((x2445*x2446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2459=(cj1*cj4);
IkReal x2460=((1.0)*r22);
IkReal x2461=(cj4*sj1);
IkReal x2462=(sj4*sj5);
IkReal x2463=(cj1*cj5*sj4);
IkReal x2464=(cj5*sj1*sj4);
if( IKabs((((r21*x2464))+((r20*sj1*x2462))+((r12*x2459))+(((-1.0)*x2460*x2461))+(((-1.0)*cj1*r10*x2462))+(((-1.0)*r11*x2463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x2464))+((cj1*r20*x2462))+((r21*x2463))+((r10*sj1*x2462))+(((-1.0)*r12*x2461))+(((-1.0)*x2459*x2460)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x2464))+((r20*sj1*x2462))+((r12*x2459))+(((-1.0)*x2460*x2461))+(((-1.0)*cj1*r10*x2462))+(((-1.0)*r11*x2463))))+IKsqr((((r11*x2464))+((cj1*r20*x2462))+((r21*x2463))+((r10*sj1*x2462))+(((-1.0)*r12*x2461))+(((-1.0)*x2459*x2460))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*x2464))+((r20*sj1*x2462))+((r12*x2459))+(((-1.0)*x2460*x2461))+(((-1.0)*cj1*r10*x2462))+(((-1.0)*r11*x2463))), (((r11*x2464))+((cj1*r20*x2462))+((r21*x2463))+((r10*sj1*x2462))+(((-1.0)*r12*x2461))+(((-1.0)*x2459*x2460))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2465=IKcos(j2);
IkReal x2466=IKsin(j2);
IkReal x2467=(cj3*cj4);
IkReal x2468=(cj5*r21);
IkReal x2469=(sj3*sj5);
IkReal x2470=(r10*sj5);
IkReal x2471=((1.0)*sj4);
IkReal x2472=(cj3*sj4);
IkReal x2473=(cj5*r11);
IkReal x2474=((0.03868)*cj5);
IkReal x2475=(r20*sj5);
IkReal x2476=((0.03868)*sj5);
IkReal x2477=(cj1*x2465);
IkReal x2478=(sj1*x2466);
IkReal x2479=((1.0)*cj5*sj3);
IkReal x2480=(cj1*x2466);
IkReal x2481=(sj1*x2465);
IkReal x2482=(x2477+x2478);
evalcond[0]=(x2482+((cj4*r22))+(((-1.0)*x2468*x2471))+(((-1.0)*x2471*x2475)));
evalcond[1]=(x2481+(((-1.0)*x2480))+(((-1.0)*x2470*x2471))+(((-1.0)*x2471*x2473))+((cj4*r12)));
evalcond[2]=((((0.39225)*x2478))+(((0.39225)*x2477))+(((-1.0)*r20*x2474))+((r21*x2476))+(((0.425001)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*py))+(((0.39225)*x2481))+(((0.425001)*sj1))+(((-1.0)*r10*x2474))+(((-0.39225)*x2480))+((r11*x2476)));
evalcond[4]=(((r12*x2472))+x2482+((x2467*x2473))+((x2467*x2470))+((r11*x2469))+(((-1.0)*r10*x2479)));
evalcond[5]=(((x2467*x2468))+x2480+(((-1.0)*r20*x2479))+(((-1.0)*x2481))+((x2467*x2475))+((r21*x2469))+((r22*x2472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2483=(cj4*r12);
IkReal x2484=(r10*sj5);
IkReal x2485=(cj1*sj4);
IkReal x2486=(sj1*sj4);
IkReal x2487=(r20*sj5);
IkReal x2488=((1.0)*cj4*r22);
IkReal x2489=((1.0)*x2486);
IkReal x2490=(cj5*x2485);
if( IKabs((((x2484*x2485))+((cj5*r21*x2486))+(((-1.0)*sj1*x2488))+((r11*x2490))+(((-1.0)*cj1*x2483))+((x2486*x2487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2485*x2487))+(((-1.0)*cj5*r11*x2489))+(((-1.0)*cj1*x2488))+((r21*x2490))+(((-1.0)*x2484*x2489))+((sj1*x2483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2484*x2485))+((cj5*r21*x2486))+(((-1.0)*sj1*x2488))+((r11*x2490))+(((-1.0)*cj1*x2483))+((x2486*x2487))))+IKsqr((((x2485*x2487))+(((-1.0)*cj5*r11*x2489))+(((-1.0)*cj1*x2488))+((r21*x2490))+(((-1.0)*x2484*x2489))+((sj1*x2483))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2484*x2485))+((cj5*r21*x2486))+(((-1.0)*sj1*x2488))+((r11*x2490))+(((-1.0)*cj1*x2483))+((x2486*x2487))), (((x2485*x2487))+(((-1.0)*cj5*r11*x2489))+(((-1.0)*cj1*x2488))+((r21*x2490))+(((-1.0)*x2484*x2489))+((sj1*x2483))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2491=IKsin(j2);
IkReal x2492=IKcos(j2);
IkReal x2493=(sj3*sj5);
IkReal x2494=(r10*sj5);
IkReal x2495=((1.0)*sj4);
IkReal x2496=((1.0)*sj1);
IkReal x2497=(cj3*sj4);
IkReal x2498=(cj3*cj4);
IkReal x2499=(cj5*r21);
IkReal x2500=((0.03868)*cj5);
IkReal x2501=(r20*sj5);
IkReal x2502=((0.39225)*sj1);
IkReal x2503=((0.03868)*sj5);
IkReal x2504=(cj5*r11);
IkReal x2505=(cj1*x2491);
IkReal x2506=(cj1*x2492);
IkReal x2507=((1.0)*cj5*sj3);
IkReal x2508=(x2492*x2496);
evalcond[0]=(((sj1*x2491))+x2506+(((-1.0)*x2495*x2499))+((cj4*r22))+(((-1.0)*x2495*x2501)));
evalcond[1]=((((-1.0)*x2508))+x2505+(((-1.0)*x2494*x2495))+(((-1.0)*x2495*x2504))+((cj4*r12)));
evalcond[2]=((((0.39225)*x2506))+(((0.425001)*cj1))+(((-1.0)*pz))+((x2491*x2502))+((r21*x2503))+(((-1.0)*r20*x2500)));
evalcond[3]=((((0.39225)*x2505))+(((-1.0)*x2492*x2502))+(((-1.0)*py))+(((-0.425001)*sj1))+(((-1.0)*r10*x2500))+((r11*x2503)));
evalcond[4]=((((-1.0)*x2508))+x2505+((r22*x2497))+((r21*x2493))+((x2498*x2499))+(((-1.0)*r20*x2507))+((x2498*x2501)));
evalcond[5]=(((x2494*x2498))+(((-1.0)*x2491*x2496))+((r11*x2493))+((r12*x2497))+(((-1.0)*x2506))+(((-1.0)*r10*x2507))+((x2498*x2504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2509=(cj1*cj4);
IkReal x2510=(cj4*sj1);
IkReal x2511=(cj1*sj4);
IkReal x2512=(r10*sj5);
IkReal x2513=(sj1*sj4);
IkReal x2514=(cj5*r11);
IkReal x2515=((1.0)*cj0*r22);
IkReal x2516=(cj0*cj5*r21);
IkReal x2517=(cj0*r20*sj5);
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2518.valid){
continue;
}
CheckValue<IkReal> x2519 = IKatan2WithCheck(IkReal((((r12*x2509))+(((-1.0)*x2510*x2515))+(((-1.0)*x2511*x2514))+(((-1.0)*x2511*x2512))+((x2513*x2516))+((x2513*x2517)))),IkReal((((x2512*x2513))+((x2511*x2517))+((x2511*x2516))+(((-1.0)*x2509*x2515))+((x2513*x2514))+(((-1.0)*r12*x2510)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2519.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2518.value)))+(x2519.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2520=IKcos(j2);
IkReal x2521=IKsin(j2);
IkReal x2522=(cj3*sj4);
IkReal x2523=(sj0*sj1);
IkReal x2524=(sj3*sj5);
IkReal x2525=((0.03868)*sj5);
IkReal x2526=(cj3*cj4);
IkReal x2527=(cj5*r21);
IkReal x2528=((0.03868)*cj5);
IkReal x2529=(cj5*r01);
IkReal x2530=((1.0)*sj4);
IkReal x2531=(cj0*sj1);
IkReal x2532=(cj5*r11);
IkReal x2533=(cj1*x2520);
IkReal x2534=((1.0)*cj5*sj3);
IkReal x2535=(cj1*x2521);
IkReal x2536=((1.0)*x2520);
IkReal x2537=(sj5*x2530);
IkReal x2538=(sj1*x2521);
IkReal x2539=((0.39225)*sj1*x2520);
evalcond[0]=((((-1.0)*r20*x2537))+x2538+x2533+((cj4*r22))+(((-1.0)*x2527*x2530)));
evalcond[1]=((((0.39225)*x2538))+(((0.39225)*x2533))+(((0.425001)*cj1))+(((-1.0)*r20*x2528))+(((-1.0)*pz))+((r21*x2525)));
evalcond[2]=((((-1.0)*r00*x2537))+((sj0*x2535))+(((-1.0)*x2523*x2536))+(((-1.0)*x2529*x2530))+((cj4*r02)));
evalcond[3]=(((x2520*x2531))+(((-1.0)*r10*x2537))+(((-1.0)*x2530*x2532))+((cj4*r12))+(((-1.0)*cj0*x2535)));
evalcond[4]=((((-0.425001)*x2523))+(((-1.0)*px))+(((-1.0)*r00*x2528))+((r01*x2525))+(((-0.39225)*x2520*x2523))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2535)));
evalcond[5]=((((-0.032446)*sj0))+((r11*x2525))+(((0.39225)*x2520*x2531))+(((-1.0)*py))+(((0.425001)*x2531))+(((-0.39225)*cj0*x2535))+(((-1.0)*r10*x2528)));
evalcond[6]=(((r22*x2522))+(((-1.0)*r20*x2534))+x2535+(((-1.0)*sj1*x2536))+((r20*sj5*x2526))+((x2526*x2527))+((r21*x2524)));
evalcond[7]=(((x2526*x2532))+((x2521*x2531))+((r10*sj5*x2526))+((r12*x2522))+((cj0*x2533))+((r11*x2524))+(((-1.0)*r10*x2534)));
evalcond[8]=(((r02*x2522))+(((-1.0)*r00*x2534))+((r00*sj5*x2526))+((r01*x2524))+(((-1.0)*x2521*x2523))+((x2526*x2529))+(((-1.0)*sj0*x2533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2540=(cj4*sj1);
IkReal x2541=(cj1*cj4);
IkReal x2542=((1.0)*sj1);
IkReal x2543=(cj1*sj4);
IkReal x2544=(r00*sj5);
IkReal x2545=((1.0)*r22*sj0);
IkReal x2546=(cj5*r01*sj4);
IkReal x2547=(cj5*r21*sj0);
IkReal x2548=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2541))+((x2543*x2544))+((sj1*x2548))+((sj1*sj4*x2547))+(((-1.0)*x2540*x2545))+((cj5*r01*x2543)))),IkReal(((((-1.0)*x2542*x2546))+((r20*sj0*sj5*x2543))+(((-1.0)*sj4*x2542*x2544))+(((-1.0)*x2541*x2545))+((x2543*x2547))+((r02*x2540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2550.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2549.value)))+(x2550.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2551=IKcos(j2);
IkReal x2552=IKsin(j2);
IkReal x2553=(cj3*sj4);
IkReal x2554=(sj0*sj1);
IkReal x2555=(sj3*sj5);
IkReal x2556=((0.03868)*sj5);
IkReal x2557=(cj3*cj4);
IkReal x2558=(cj5*r21);
IkReal x2559=((0.03868)*cj5);
IkReal x2560=(cj5*r01);
IkReal x2561=((1.0)*sj4);
IkReal x2562=(cj0*sj1);
IkReal x2563=(cj5*r11);
IkReal x2564=(cj1*x2551);
IkReal x2565=((1.0)*cj5*sj3);
IkReal x2566=(cj1*x2552);
IkReal x2567=((1.0)*x2551);
IkReal x2568=(sj5*x2561);
IkReal x2569=(sj1*x2552);
IkReal x2570=((0.39225)*sj1*x2551);
evalcond[0]=(x2569+x2564+((cj4*r22))+(((-1.0)*r20*x2568))+(((-1.0)*x2558*x2561)));
evalcond[1]=((((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2559))+((r21*x2556))+(((0.39225)*x2564))+(((0.39225)*x2569)));
evalcond[2]=((((-1.0)*r00*x2568))+(((-1.0)*x2560*x2561))+(((-1.0)*x2554*x2567))+((sj0*x2566))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj0*x2566))+(((-1.0)*x2561*x2563))+((x2551*x2562))+(((-1.0)*r10*x2568))+((cj4*r12)));
evalcond[4]=((((-0.425001)*x2554))+((r01*x2556))+(((-1.0)*px))+(((-1.0)*r00*x2559))+(((-0.032446)*cj0))+(((-0.39225)*x2551*x2554))+(((0.39225)*sj0*x2566)));
evalcond[5]=((((-0.032446)*sj0))+((r11*x2556))+(((-1.0)*py))+(((0.425001)*x2562))+(((0.39225)*x2551*x2562))+(((-0.39225)*cj0*x2566))+(((-1.0)*r10*x2559)));
evalcond[6]=(x2566+((r22*x2553))+(((-1.0)*r20*x2565))+((r20*sj5*x2557))+((x2557*x2558))+(((-1.0)*sj1*x2567))+((r21*x2555)));
evalcond[7]=(((r10*sj5*x2557))+((r12*x2553))+((x2557*x2563))+((r11*x2555))+((cj0*x2564))+((x2552*x2562))+(((-1.0)*r10*x2565)));
evalcond[8]=((((-1.0)*r00*x2565))+((r00*sj5*x2557))+((x2557*x2560))+((r01*x2555))+(((-1.0)*sj0*x2564))+(((-1.0)*x2552*x2554))+((r02*x2553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2571=((0.39225)*cj0);
IkReal x2572=((0.9229390048494)*sj4);
IkReal x2573=((0.03868)*cj0);
CheckValue<IkReal> x2574=IKPowWithIntegerCheck(cj0,-2);
if(!x2574.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x2574.value)*((((cj4*r12*x2571))+(((-1.0)*cj5*r11*sj4*x2571))+(((0.032446)*cj0*sj0))+((cj5*r10*x2573))+(((-1.0)*r11*sj5*x2573))+((cj0*py))+(((-1.0)*r10*sj4*sj5*x2571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2572))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x2572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x2574.value)*((((cj4*r12*x2571))+(((-1.0)*cj5*r11*sj4*x2571))+(((0.032446)*cj0*sj0))+((cj5*r10*x2573))+(((-1.0)*r11*sj5*x2573))+((cj0*py))+(((-1.0)*r10*sj4*sj5*x2571))))))+IKsqr(((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2572))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x2572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x2574.value)*((((cj4*r12*x2571))+(((-1.0)*cj5*r11*sj4*x2571))+(((0.032446)*cj0*sj0))+((cj5*r10*x2573))+(((-1.0)*r11*sj5*x2573))+((cj0*py))+(((-1.0)*r10*sj4*sj5*x2571))))), ((((0.9229390048494)*cj4*r22))+(((2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2572))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x2572))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2575=IKsin(j1);
IkReal x2576=IKcos(j1);
IkReal x2577=cj0*cj0;
IkReal x2578=sj0*sj0;
IkReal x2579=((0.425001)*cj0);
IkReal x2580=((0.39225)*sj5);
IkReal x2581=(cj3*cj4);
IkReal x2582=(cj0*r20);
IkReal x2583=(cj5*r00);
IkReal x2584=((0.03868)*sj0);
IkReal x2585=(sj0*sj4);
IkReal x2586=((0.39225)*sj3);
IkReal x2587=((0.39225)*cj5);
IkReal x2588=(cj0*sj4);
IkReal x2589=(cj5*r10);
IkReal x2590=(r11*sj5);
IkReal x2591=((0.39225)*r22);
IkReal x2592=((1.0)*sj0);
IkReal x2593=((0.03868)*cj0);
IkReal x2594=((0.03868)*cj5);
IkReal x2595=((0.032446)*cj0);
IkReal x2596=(cj0*r21);
IkReal x2597=((0.39225)*r02);
IkReal x2598=(cj0*cj4);
IkReal x2599=(r01*sj5);
IkReal x2600=(cj3*sj4);
IkReal x2601=(r20*sj0);
IkReal x2602=(r21*sj0);
IkReal x2603=((0.39225)*r12);
IkReal x2604=(sj0*x2595);
IkReal x2605=((0.39225)*cj4*sj0);
IkReal x2606=((0.03868)*r21*sj5);
IkReal x2607=((0.425001)*x2575);
IkReal x2608=((0.425001)*x2576);
IkReal x2609=(sj0*x2575*x2579);
evalcond[0]=((((-1.0)*r21*sj4*x2587))+(((-1.0)*r20*sj4*x2580))+((r20*x2594))+pz+(((-1.0)*x2608))+(((-1.0)*x2606))+((cj4*x2591)));
evalcond[1]=((((-1.0)*r11*x2587*x2588))+(((-1.0)*x2577*x2607))+(((-1.0)*x2590*x2593))+((x2598*x2603))+((x2589*x2593))+((cj0*py))+(((-1.0)*r10*x2580*x2588))+x2604);
evalcond[2]=((((-1.0)*cj4*sj0*x2597))+(((-1.0)*x2578*x2607))+((r01*x2585*x2587))+((r00*x2580*x2585))+(((-1.0)*x2604))+(((-1.0)*x2583*x2584))+((x2584*x2599))+(((-1.0)*px*x2592)));
evalcond[3]=((((-1.0)*x2597*x2600))+((cj5*r20*x2584))+(((-1.0)*r00*x2580*x2581))+(((-1.0)*r21*sj5*x2584))+(((-1.0)*r01*sj3*x2580))+(((-1.0)*sj0*x2608))+((pz*sj0))+(((-1.0)*r01*x2581*x2587))+((x2583*x2586)));
evalcond[4]=((((-1.0)*r11*x2581*x2587))+(((-1.0)*r11*sj3*x2580))+(((-1.0)*x2600*x2603))+((x2586*x2589))+((x2576*x2579))+(((-1.0)*x2582*x2594))+(((-1.0)*r10*x2580*x2581))+(((-1.0)*cj0*pz))+((r21*sj5*x2593)));
evalcond[5]=((((-1.0)*x2575*x2579))+(((-1.0)*x2580*x2581*x2582))+(((0.03868)*x2589))+(((-1.0)*cj3*x2588*x2591))+(((0.032446)*sj0))+py+(((-0.03868)*x2590))+(((-1.0)*sj3*x2580*x2596))+(((-1.0)*x2581*x2587*x2596))+((cj5*x2582*x2586)));
evalcond[6]=(x2595+(((0.03868)*x2583))+((x2581*x2587*x2602))+(((-1.0)*cj5*x2586*x2601))+((x2580*x2581*x2601))+((sj3*x2580*x2602))+px+((sj0*x2607))+(((-0.03868)*x2599))+((cj3*x2585*x2591)));
evalcond[7]=(((x2583*x2593))+(((-1.0)*cj4*sj0*x2603))+((r10*x2580*x2585))+(((-1.0)*x2593*x2599))+(((0.032446)*x2577))+((r11*x2585*x2587))+((cj0*px))+x2609);
evalcond[8]=((((-1.0)*r00*x2580*x2588))+(((-1.0)*r01*x2587*x2588))+(((-0.032446)*x2578))+(((-1.0)*x2584*x2589))+(((-1.0)*py*x2592))+((x2597*x2598))+((x2584*x2590))+x2609);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2610=(cj4*r02);
IkReal x2611=(cj5*sj4);
IkReal x2612=((1.0)*sj1);
IkReal x2613=(sj4*sj5);
IkReal x2614=((1.0)*cj4*r22);
if( IKabs((((cj1*r01*x2611))+((r21*sj1*x2611))+((r20*sj1*x2613))+(((-1.0)*cj4*r22*x2612))+(((-1.0)*cj1*x2610))+((cj1*r00*x2613)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2613))+((cj1*r21*x2611))+(((-1.0)*r00*x2612*x2613))+(((-1.0)*cj1*x2614))+((sj1*x2610))+(((-1.0)*r01*x2611*x2612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x2611))+((r21*sj1*x2611))+((r20*sj1*x2613))+(((-1.0)*cj4*r22*x2612))+(((-1.0)*cj1*x2610))+((cj1*r00*x2613))))+IKsqr((((cj1*r20*x2613))+((cj1*r21*x2611))+(((-1.0)*r00*x2612*x2613))+(((-1.0)*cj1*x2614))+((sj1*x2610))+(((-1.0)*r01*x2611*x2612))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x2611))+((r21*sj1*x2611))+((r20*sj1*x2613))+(((-1.0)*cj4*r22*x2612))+(((-1.0)*cj1*x2610))+((cj1*r00*x2613))), (((cj1*r20*x2613))+((cj1*r21*x2611))+(((-1.0)*r00*x2612*x2613))+(((-1.0)*cj1*x2614))+((sj1*x2610))+(((-1.0)*r01*x2611*x2612))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2615=IKsin(j2);
IkReal x2616=IKcos(j2);
IkReal x2617=(cj3*cj4);
IkReal x2618=(cj5*r21);
IkReal x2619=(r00*sj5);
IkReal x2620=(r21*sj5);
IkReal x2621=(r20*sj5);
IkReal x2622=((1.0)*sj1);
IkReal x2623=((0.03868)*cj5);
IkReal x2624=((1.0)*sj4);
IkReal x2625=(cj3*sj4);
IkReal x2626=((0.39225)*sj1);
IkReal x2627=(cj5*r01);
IkReal x2628=(r01*sj5);
IkReal x2629=(cj1*x2615);
IkReal x2630=(cj1*x2616);
IkReal x2631=((1.0)*cj5*sj3);
IkReal x2632=(x2616*x2622);
evalcond[0]=(((cj4*r22))+(((-1.0)*x2618*x2624))+((sj1*x2615))+x2630+(((-1.0)*x2621*x2624)));
evalcond[1]=((((-1.0)*x2619*x2624))+(((-1.0)*x2632))+(((-1.0)*x2624*x2627))+x2629+((cj4*r02)));
evalcond[2]=((((0.03868)*x2620))+(((0.39225)*x2630))+(((0.425001)*cj1))+((x2615*x2626))+(((-1.0)*pz))+(((-1.0)*r20*x2623)));
evalcond[3]=((((0.03868)*x2628))+(((-1.0)*r00*x2623))+(((-1.0)*px))+(((-0.425001)*sj1))+(((-1.0)*x2616*x2626))+(((0.39225)*x2629)));
evalcond[4]=(((sj3*x2620))+(((-1.0)*x2632))+(((-1.0)*r20*x2631))+((x2617*x2618))+((x2617*x2621))+((r22*x2625))+x2629);
evalcond[5]=(((sj3*x2628))+(((-1.0)*r00*x2631))+((x2617*x2619))+((r02*x2625))+((x2617*x2627))+(((-1.0)*x2630))+(((-1.0)*x2615*x2622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2633=(cj5*sj4);
IkReal x2634=(cj4*r02);
IkReal x2635=((1.0)*cj1);
IkReal x2636=(sj4*sj5);
IkReal x2637=((1.0)*cj4*r22);
IkReal x2638=(sj1*x2636);
if( IKabs((((cj1*x2634))+(((-1.0)*sj1*x2637))+((r21*sj1*x2633))+((r20*x2638))+(((-1.0)*r00*x2635*x2636))+(((-1.0)*r01*x2633*x2635)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r22*x2635))+(((-1.0)*sj1*x2634))+((cj1*r20*x2636))+((r00*x2638))+((cj1*r21*x2633))+((r01*sj1*x2633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2634))+(((-1.0)*sj1*x2637))+((r21*sj1*x2633))+((r20*x2638))+(((-1.0)*r00*x2635*x2636))+(((-1.0)*r01*x2633*x2635))))+IKsqr(((((-1.0)*cj4*r22*x2635))+(((-1.0)*sj1*x2634))+((cj1*r20*x2636))+((r00*x2638))+((cj1*r21*x2633))+((r01*sj1*x2633))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2634))+(((-1.0)*sj1*x2637))+((r21*sj1*x2633))+((r20*x2638))+(((-1.0)*r00*x2635*x2636))+(((-1.0)*r01*x2633*x2635))), ((((-1.0)*cj4*r22*x2635))+(((-1.0)*sj1*x2634))+((cj1*r20*x2636))+((r00*x2638))+((cj1*r21*x2633))+((r01*sj1*x2633))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2639=IKcos(j2);
IkReal x2640=IKsin(j2);
IkReal x2641=(cj3*sj4);
IkReal x2642=((0.03868)*cj5);
IkReal x2643=(r21*sj5);
IkReal x2644=(cj3*cj4);
IkReal x2645=(r20*sj5);
IkReal x2646=((1.0)*sj4);
IkReal x2647=(r00*sj5);
IkReal x2648=(cj5*r21);
IkReal x2649=((0.39225)*sj1);
IkReal x2650=(cj5*r01);
IkReal x2651=(r01*sj5);
IkReal x2652=(cj1*x2639);
IkReal x2653=(sj1*x2640);
IkReal x2654=((1.0)*cj5*sj3);
IkReal x2655=(cj1*x2640);
IkReal x2656=(sj1*x2639);
IkReal x2657=(x2653+x2652);
evalcond[0]=(((cj4*r22))+(((-1.0)*x2646*x2648))+(((-1.0)*x2645*x2646))+x2657);
evalcond[1]=((((-1.0)*x2646*x2647))+(((-1.0)*x2646*x2650))+(((-1.0)*x2655))+x2656+((cj4*r02)));
evalcond[2]=((((0.425001)*cj1))+(((0.39225)*x2652))+(((-1.0)*r20*x2642))+(((-1.0)*pz))+(((0.03868)*x2643))+((x2640*x2649)));
evalcond[3]=((((-1.0)*r00*x2642))+((x2639*x2649))+(((-1.0)*px))+(((0.425001)*sj1))+(((-0.39225)*x2655))+(((0.03868)*x2651)));
evalcond[4]=((((-1.0)*r00*x2654))+((r02*x2641))+((x2644*x2650))+((x2644*x2647))+((sj3*x2651))+x2657);
evalcond[5]=((((-1.0)*r20*x2654))+((x2644*x2645))+((x2644*x2648))+((r22*x2641))+((sj3*x2643))+(((-1.0)*x2656))+x2655);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2658=(cj1*cj4);
IkReal x2659=((1.0)*r22);
IkReal x2660=(cj4*sj1);
IkReal x2661=(sj4*sj5);
IkReal x2662=(cj1*cj5*sj4);
IkReal x2663=(cj5*sj1*sj4);
if( IKabs((((r12*x2658))+(((-1.0)*cj1*r10*x2661))+((r20*sj1*x2661))+((r21*x2663))+(((-1.0)*x2659*x2660))+(((-1.0)*r11*x2662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1*x2661))+((r21*x2662))+(((-1.0)*x2658*x2659))+((cj1*r20*x2661))+((r11*x2663))+(((-1.0)*r12*x2660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2658))+(((-1.0)*cj1*r10*x2661))+((r20*sj1*x2661))+((r21*x2663))+(((-1.0)*x2659*x2660))+(((-1.0)*r11*x2662))))+IKsqr((((r10*sj1*x2661))+((r21*x2662))+(((-1.0)*x2658*x2659))+((cj1*r20*x2661))+((r11*x2663))+(((-1.0)*r12*x2660))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x2658))+(((-1.0)*cj1*r10*x2661))+((r20*sj1*x2661))+((r21*x2663))+(((-1.0)*x2659*x2660))+(((-1.0)*r11*x2662))), (((r10*sj1*x2661))+((r21*x2662))+(((-1.0)*x2658*x2659))+((cj1*r20*x2661))+((r11*x2663))+(((-1.0)*r12*x2660))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2664=IKcos(j2);
IkReal x2665=IKsin(j2);
IkReal x2666=(cj3*cj4);
IkReal x2667=(cj5*r21);
IkReal x2668=(sj3*sj5);
IkReal x2669=(r10*sj5);
IkReal x2670=((1.0)*sj4);
IkReal x2671=(cj3*sj4);
IkReal x2672=(cj5*r11);
IkReal x2673=((0.03868)*cj5);
IkReal x2674=(r20*sj5);
IkReal x2675=((0.03868)*sj5);
IkReal x2676=(cj1*x2664);
IkReal x2677=(sj1*x2665);
IkReal x2678=((1.0)*cj5*sj3);
IkReal x2679=(cj1*x2665);
IkReal x2680=(sj1*x2664);
IkReal x2681=(x2677+x2676);
evalcond[0]=(((cj4*r22))+(((-1.0)*x2670*x2674))+(((-1.0)*x2667*x2670))+x2681);
evalcond[1]=((((-1.0)*x2679))+(((-1.0)*x2670*x2672))+(((-1.0)*x2669*x2670))+((cj4*r12))+x2680);
evalcond[2]=(((r21*x2675))+(((0.39225)*x2677))+(((0.39225)*x2676))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2673)));
evalcond[3]=((((-0.39225)*x2679))+(((-1.0)*py))+(((0.425001)*sj1))+(((0.39225)*x2680))+((r11*x2675))+(((-1.0)*r10*x2673)));
evalcond[4]=(((r12*x2671))+((x2666*x2672))+((x2666*x2669))+(((-1.0)*r10*x2678))+((r11*x2668))+x2681);
evalcond[5]=(((r21*x2668))+((x2666*x2674))+((x2666*x2667))+((r22*x2671))+(((-1.0)*r20*x2678))+(((-1.0)*x2680))+x2679);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2682=(cj4*r12);
IkReal x2683=(r10*sj5);
IkReal x2684=(cj1*sj4);
IkReal x2685=(sj1*sj4);
IkReal x2686=(r20*sj5);
IkReal x2687=((1.0)*cj4*r22);
IkReal x2688=((1.0)*x2685);
IkReal x2689=(cj5*x2684);
if( IKabs((((r11*x2689))+((cj5*r21*x2685))+(((-1.0)*sj1*x2687))+((x2683*x2684))+((x2685*x2686))+(((-1.0)*cj1*x2682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2687))+(((-1.0)*x2683*x2688))+((x2684*x2686))+((sj1*x2682))+((r21*x2689))+(((-1.0)*cj5*r11*x2688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x2689))+((cj5*r21*x2685))+(((-1.0)*sj1*x2687))+((x2683*x2684))+((x2685*x2686))+(((-1.0)*cj1*x2682))))+IKsqr(((((-1.0)*cj1*x2687))+(((-1.0)*x2683*x2688))+((x2684*x2686))+((sj1*x2682))+((r21*x2689))+(((-1.0)*cj5*r11*x2688))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x2689))+((cj5*r21*x2685))+(((-1.0)*sj1*x2687))+((x2683*x2684))+((x2685*x2686))+(((-1.0)*cj1*x2682))), ((((-1.0)*cj1*x2687))+(((-1.0)*x2683*x2688))+((x2684*x2686))+((sj1*x2682))+((r21*x2689))+(((-1.0)*cj5*r11*x2688))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2690=IKsin(j2);
IkReal x2691=IKcos(j2);
IkReal x2692=(sj3*sj5);
IkReal x2693=(r10*sj5);
IkReal x2694=((1.0)*sj4);
IkReal x2695=((1.0)*sj1);
IkReal x2696=(cj3*sj4);
IkReal x2697=(cj3*cj4);
IkReal x2698=(cj5*r21);
IkReal x2699=((0.03868)*cj5);
IkReal x2700=(r20*sj5);
IkReal x2701=((0.39225)*sj1);
IkReal x2702=((0.03868)*sj5);
IkReal x2703=(cj5*r11);
IkReal x2704=(cj1*x2690);
IkReal x2705=(cj1*x2691);
IkReal x2706=((1.0)*cj5*sj3);
IkReal x2707=(x2691*x2695);
evalcond[0]=(x2705+((cj4*r22))+((sj1*x2690))+(((-1.0)*x2694*x2700))+(((-1.0)*x2694*x2698)));
evalcond[1]=(x2704+(((-1.0)*x2707))+(((-1.0)*x2694*x2703))+(((-1.0)*x2693*x2694))+((cj4*r12)));
evalcond[2]=((((0.39225)*x2705))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x2702))+((x2690*x2701))+(((-1.0)*r20*x2699)));
evalcond[3]=((((0.39225)*x2704))+(((-1.0)*r10*x2699))+((r11*x2702))+(((-1.0)*py))+(((-1.0)*x2691*x2701))+(((-0.425001)*sj1)));
evalcond[4]=(x2704+((r22*x2696))+((x2697*x2700))+((x2697*x2698))+(((-1.0)*r20*x2706))+(((-1.0)*x2707))+((r21*x2692)));
evalcond[5]=(((r12*x2696))+(((-1.0)*r10*x2706))+((x2697*x2703))+((x2693*x2697))+(((-1.0)*x2690*x2695))+((r11*x2692))+(((-1.0)*x2705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2708=(cj1*cj4);
IkReal x2709=(cj4*sj1);
IkReal x2710=(cj1*sj4);
IkReal x2711=(r10*sj5);
IkReal x2712=(sj1*sj4);
IkReal x2713=(cj5*r11);
IkReal x2714=((1.0)*cj0*r22);
IkReal x2715=(cj0*cj5*r21);
IkReal x2716=(cj0*r20*sj5);
CheckValue<IkReal> x2717=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718 = IKatan2WithCheck(IkReal((((r12*x2708))+((x2712*x2715))+((x2712*x2716))+(((-1.0)*x2710*x2713))+(((-1.0)*x2710*x2711))+(((-1.0)*x2709*x2714)))),IkReal((((x2712*x2713))+(((-1.0)*x2708*x2714))+(((-1.0)*r12*x2709))+((x2710*x2716))+((x2710*x2715))+((x2711*x2712)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2717.value)))+(x2718.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2719=IKcos(j2);
IkReal x2720=IKsin(j2);
IkReal x2721=(cj3*sj4);
IkReal x2722=(sj0*sj1);
IkReal x2723=(sj3*sj5);
IkReal x2724=((0.03868)*sj5);
IkReal x2725=(cj3*cj4);
IkReal x2726=(cj5*r21);
IkReal x2727=((0.03868)*cj5);
IkReal x2728=(cj5*r01);
IkReal x2729=((1.0)*sj4);
IkReal x2730=(cj0*sj1);
IkReal x2731=(cj5*r11);
IkReal x2732=(cj1*x2719);
IkReal x2733=((1.0)*cj5*sj3);
IkReal x2734=(cj1*x2720);
IkReal x2735=((1.0)*x2719);
IkReal x2736=(sj5*x2729);
IkReal x2737=(sj1*x2720);
IkReal x2738=((0.39225)*sj1*x2719);
evalcond[0]=(x2737+x2732+((cj4*r22))+(((-1.0)*x2726*x2729))+(((-1.0)*r20*x2736)));
evalcond[1]=((((0.425001)*cj1))+(((-1.0)*pz))+((r21*x2724))+(((0.39225)*x2737))+(((0.39225)*x2732))+(((-1.0)*r20*x2727)));
evalcond[2]=((((-1.0)*x2728*x2729))+(((-1.0)*x2722*x2735))+((sj0*x2734))+(((-1.0)*r00*x2736))+((cj4*r02)));
evalcond[3]=((((-1.0)*cj0*x2734))+((x2719*x2730))+(((-1.0)*r10*x2736))+(((-1.0)*x2729*x2731))+((cj4*r12)));
evalcond[4]=((((-1.0)*r00*x2727))+(((-0.425001)*x2722))+(((-1.0)*px))+((r01*x2724))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2734))+(((-0.39225)*x2719*x2722)));
evalcond[5]=((((-0.032446)*sj0))+(((0.39225)*x2719*x2730))+(((-1.0)*py))+(((-0.39225)*cj0*x2734))+((r11*x2724))+(((0.425001)*x2730))+(((-1.0)*r10*x2727)));
evalcond[6]=(x2734+(((-1.0)*sj1*x2735))+((r22*x2721))+((r20*sj5*x2725))+((r21*x2723))+((x2725*x2726))+(((-1.0)*r20*x2733)));
evalcond[7]=(((x2725*x2731))+((x2720*x2730))+((cj0*x2732))+((r11*x2723))+((r10*sj5*x2725))+(((-1.0)*r10*x2733))+((r12*x2721)));
evalcond[8]=(((r02*x2721))+(((-1.0)*sj0*x2732))+(((-1.0)*x2720*x2722))+((x2725*x2728))+((r01*x2723))+((r00*sj5*x2725))+(((-1.0)*r00*x2733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2739=(cj4*sj1);
IkReal x2740=(cj1*cj4);
IkReal x2741=((1.0)*sj1);
IkReal x2742=(cj1*sj4);
IkReal x2743=(r00*sj5);
IkReal x2744=((1.0)*r22*sj0);
IkReal x2745=(cj5*r01*sj4);
IkReal x2746=(cj5*r21*sj0);
IkReal x2747=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2748=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal((((sj1*sj4*x2746))+((x2742*x2743))+(((-1.0)*x2739*x2744))+((sj1*x2747))+((cj5*r01*x2742))+(((-1.0)*r02*x2740)))),IkReal(((((-1.0)*sj4*x2741*x2743))+((r02*x2739))+((x2742*x2746))+((r20*sj0*sj5*x2742))+(((-1.0)*x2740*x2744))+(((-1.0)*x2741*x2745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2748.value)))+(x2749.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2750=IKcos(j2);
IkReal x2751=IKsin(j2);
IkReal x2752=(cj3*sj4);
IkReal x2753=(sj0*sj1);
IkReal x2754=(sj3*sj5);
IkReal x2755=((0.03868)*sj5);
IkReal x2756=(cj3*cj4);
IkReal x2757=(cj5*r21);
IkReal x2758=((0.03868)*cj5);
IkReal x2759=(cj5*r01);
IkReal x2760=((1.0)*sj4);
IkReal x2761=(cj0*sj1);
IkReal x2762=(cj5*r11);
IkReal x2763=(cj1*x2750);
IkReal x2764=((1.0)*cj5*sj3);
IkReal x2765=(cj1*x2751);
IkReal x2766=((1.0)*x2750);
IkReal x2767=(sj5*x2760);
IkReal x2768=(sj1*x2751);
IkReal x2769=((0.39225)*sj1*x2750);
evalcond[0]=(x2768+x2763+((cj4*r22))+(((-1.0)*x2757*x2760))+(((-1.0)*r20*x2767)));
evalcond[1]=(((r21*x2755))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2758))+(((0.39225)*x2768))+(((0.39225)*x2763)));
evalcond[2]=(((sj0*x2765))+(((-1.0)*r00*x2767))+(((-1.0)*x2759*x2760))+(((-1.0)*x2753*x2766))+((cj4*r02)));
evalcond[3]=(((x2750*x2761))+(((-1.0)*r10*x2767))+(((-1.0)*x2760*x2762))+(((-1.0)*cj0*x2765))+((cj4*r12)));
evalcond[4]=((((-1.0)*r00*x2758))+(((-1.0)*px))+(((-0.032446)*cj0))+((r01*x2755))+(((0.39225)*sj0*x2765))+(((-0.425001)*x2753))+(((-0.39225)*x2750*x2753)));
evalcond[5]=((((0.425001)*x2761))+((r11*x2755))+(((-0.032446)*sj0))+(((-1.0)*r10*x2758))+(((-1.0)*py))+(((0.39225)*x2750*x2761))+(((-0.39225)*cj0*x2765)));
evalcond[6]=(x2765+((r22*x2752))+((r21*x2754))+((x2756*x2757))+((r20*sj5*x2756))+(((-1.0)*r20*x2764))+(((-1.0)*sj1*x2766)));
evalcond[7]=(((r11*x2754))+((x2756*x2762))+(((-1.0)*r10*x2764))+((r12*x2752))+((x2751*x2761))+((cj0*x2763))+((r10*sj5*x2756)));
evalcond[8]=((((-1.0)*x2751*x2753))+((x2756*x2759))+(((-1.0)*r00*x2764))+((r00*sj5*x2756))+(((-1.0)*sj0*x2763))+((r01*x2754))+((r02*x2752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "3f94c3cd43ff7669d40fcb193a6e3d10"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
