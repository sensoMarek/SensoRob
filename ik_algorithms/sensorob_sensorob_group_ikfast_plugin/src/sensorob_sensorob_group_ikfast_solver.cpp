/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-08-13 08:50:22.341654
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[5]);
x12=((0.22175)*x7);
x13=((1.0)*x9);
x14=((0.03868)*x2);
x15=((0.22175)*x6);
x16=((0.425001)*x2);
x17=((0.03868)*x7);
x18=((0.22175)*x3);
x19=((0.39225)*x3);
x20=((1.0)*x6);
x21=((1.0)*x7);
x22=((1.0)*x0);
x23=((1.0)*x3);
x24=((1.0)*x5);
x25=((1.0)*x10);
x26=((1.0)*x2);
x27=(x1*x2);
x28=(x4*x5);
x29=(x0*x4);
x30=(x2*x4);
x31=(x10*x7);
x32=(x1*x3);
x33=(x23*x4);
x34=(x22*x3*x4);
x35=((((-1.0)*x33))+x27);
x36=(x32+x30);
x37=((((-1.0)*x1*x26))+x33);
x38=(x35*x7);
x39=(x10*x36);
x40=(x37*x6);
x41=((((-1.0)*x34))+((x0*x27)));
x42=((((-1.0)*x24*x27))+((x28*x3)));
x43=(x22*((x32+x30)));
x44=((((-1.0)*x24*x30))+(((-1.0)*x1*x23*x5)));
x45=(x10*x41);
x46=(x44*x7);
x47=(((x5*x7))+(((-1.0)*x43*x6)));
x48=(((x20*(((((-1.0)*x2*x28))+(((-1.0)*x32*x5))))))+(((-1.0)*x0*x21)));
x49=((((-1.0)*x21*x43))+(((-1.0)*x20*x5)));
x50=((((-1.0)*x0*x20))+(((-1.0)*x21*x44)));
x51=(x50*x9);
eerot[0]=(((x11*((((x49*x9))+x45))))+((x47*x8)));
eerot[1]=(((x11*x47))+((x8*(((((-1.0)*x25*x41))+(((-1.0)*x13*x49)))))));
eerot[2]=(((x10*x49))+((x9*((x34+(((-1.0)*x22*x27)))))));
IkReal x52=((1.0)*x5);
IkReal x53=(x0*x27);
eetrans[0]=((0.06828)+(((-1.0)*x17*x52))+((x9*((((x18*x29))+(((-0.22175)*x53))))))+((x19*x29))+(((-1.0)*x0*x16))+((x10*(((((-1.0)*x12*x43))+(((-1.0)*x15*x52))))))+((x6*((((x14*x29))+(((0.03868)*x0*x32))))))+(((-0.39225)*x53))+(((-0.032446)*x5)));
eerot[3]=(((x11*(((((-1.0)*x25*x42))+(((-1.0)*x13*x50))))))+((x48*x8)));
eerot[4]=(((x11*x48))+((x8*((((x10*x42))+x51)))));
eerot[5]=(((x42*x9))+((x10*((((x0*x6))+x46)))));
IkReal x54=(x27*x5);
eetrans[1]=((0.001091)+(((0.032446)*x0))+((x0*x17))+((x19*x28))+((x6*((((x14*x28))+(((0.03868)*x32*x5))))))+(((-1.0)*x16*x5))+((x9*((((x18*x28))+(((-0.22175)*x54))))))+(((-0.39225)*x54))+((x10*((((x0*x15))+((x12*x44)))))));
eerot[6]=(((x11*(((((-1.0)*x25*x36))+(((-1.0)*x13*x38))))))+((x40*x8)));
eerot[7]=(((x11*x40))+((x8*((x39+((x38*x9)))))));
eerot[8]=(((x36*x9))+((x31*x37)));
eetrans[2]=((0.187444)+((x6*((((x1*x14))+(((-0.03868)*x3*x4))))))+((x31*((((x18*x4))+(((-0.22175)*x27))))))+((x1*x19))+(((0.39225)*x30))+((x9*((((x1*x18))+(((0.22175)*x30))))))+(((0.425001)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((-0.06828)+px+(((-0.22175)*r02)));
new_r10=((-1.0)*r10);
new_r11=r11;
new_r12=r12;
new_py=((0.001091)+(((-1.0)*py))+(((0.22175)*r12)));
new_r20=((-1.0)*r20);
new_r21=r21;
new_r22=r22;
new_pz=((0.187444)+(((-1.0)*pz))+(((0.22175)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x55=((1.0)*px);
IkReal x56=((1.0)*pz);
IkReal x57=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x57))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x56)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=((((-1.0)*r21*x57))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x56)));
rxp1_2=((((-1.0)*r11*x55))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x57)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x56)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x58=((0.3334132845)*npz);
IkReal x59=((0.425001)*pp);
IkReal x60=((0.03287807736)*npx);
IkReal x61=((0.032446)*r12);
IkReal x62=((0.03868)*r21);
IkReal x63=((1.0)*rxp2_2);
IkReal x64=((0.666826569)*npy);
IkReal x65=((1.333653138)*npx);
IkReal x66=((2.0)*rxp1_2);
IkReal x67=((0.07736)*r22);
IkReal x68=((0.064892)*r11);
IkReal x69=((4.0)*rxp0_2);
IkReal x70=((0.129784)*r10);
IkReal x71=((0.064892)*r01);
IkReal x72=((0.032446)*r02);
IkReal x73=((0.07736)*r20);
IkReal x74=((-0.06575615472)*npy);
IkReal x75=((-0.032446)*r02);
IkReal x76=((-0.07736)*r20);
IkReal x77=((-0.666826569)*npy);
IkReal x78=((-0.064892)*r01);
IkReal x79=((-0.129784)*r00);
IkReal x80=((-0.011187041229613)+x59);
IkReal x81=(x61+x62);
IkReal x82=(x67+x68);
IkReal x83=(x58+x80);
IkReal x84=(x83+(((-1.0)*x60)));
IkReal x85=(x60+x80+(((-1.0)*x58)));
IkReal x86=(x80+(((-1.0)*x60))+(((-1.0)*x58)));
IkReal x87=(x60+x83);
op[0]=x87;
op[1]=x87;
op[2]=x74;
op[3]=x74;
op[4]=x84;
op[5]=x84;
op[6]=(x61+(((-1.0)*x63))+(((-1.0)*x62)));
op[7]=x75;
op[8]=x76;
op[9]=0;
op[10]=(x81+(((-1.0)*x63)));
op[11]=x75;
op[12]=x75;
op[13]=((((-1.0)*x63))+(((-1.0)*x81)));
op[14]=0;
op[15]=x76;
op[16]=x75;
op[17]=(x62+(((-1.0)*x63))+(((-1.0)*x61)));
op[18]=0;
op[19]=x87;
op[20]=0;
op[21]=x74;
op[22]=0;
op[23]=x84;
op[24]=x64;
op[25]=x64;
op[26]=x65;
op[27]=x65;
op[28]=x77;
op[29]=x77;
op[30]=(x82+(((-1.0)*x66)));
op[31]=x78;
op[32]=(x70+(((-1.0)*x69)));
op[33]=x79;
op[34]=(x66+x67+(((-1.0)*x68)));
op[35]=x71;
op[36]=x78;
op[37]=(x67+(((-1.0)*x68))+(((-1.0)*x66)));
op[38]=x79;
op[39]=((((-1.0)*x70))+(((-1.0)*x69)));
op[40]=x71;
op[41]=(x66+x82);
op[42]=0;
op[43]=x64;
op[44]=0;
op[45]=x65;
op[46]=0;
op[47]=x77;
op[48]=x85;
op[49]=x85;
op[50]=x74;
op[51]=x74;
op[52]=x86;
op[53]=x86;
op[54]=(rxp2_2+x62+(((-1.0)*x61)));
op[55]=x72;
op[56]=x73;
op[57]=0;
op[58]=(rxp2_2+(((-1.0)*x81)));
op[59]=x72;
op[60]=x72;
op[61]=(rxp2_2+x81);
op[62]=0;
op[63]=x73;
op[64]=x72;
op[65]=(rxp2_2+x61+(((-1.0)*x62)));
op[66]=0;
op[67]=x85;
op[68]=0;
op[69]=x74;
op[70]=0;
op[71]=x86;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x88=htj4*htj4;
CheckValue<IkReal> x89=IKPowWithIntegerCheck(((1.0)+x88),-1);
if(!x89.valid){
continue;
}
cj4array[numsolutions]=((x89.value)*(((1.0)+(((-1.0)*x88)))));
CheckValue<IkReal> x90=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x90.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x90.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x91=htj5*htj5;
CheckValue<IkReal> x92=IKPowWithIntegerCheck(((1.0)+x91),-1);
if(!x92.valid){
continue;
}
cj5array[numsolutions]=((x92.value)*(((1.0)+(((-1.0)*x91)))));
CheckValue<IkReal> x93=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x93.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x93.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x94=htj0*htj0;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+x94),-1);
if(!x95.valid){
continue;
}
cj0array[numsolutions]=((x95.value)*(((1.0)+(((-1.0)*x94)))));
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x96.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x96.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x97=(cj0*r21);
IkReal x98=((1.0)*cj5);
IkReal x99=(cj0*r20);
IkReal x100=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x100;
j3eval[1]=IKsign(x100);
j3eval[2]=((IKabs(((((-1.0)*x98*x99))+((sj5*x97)))))+(IKabs(((((-1.0)*cj4*x97*x98))+(((-1.0)*cj4*sj5*x99))+((cj0*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x101=(sj0*sj5);
IkReal x102=((1.0)*sj4);
IkReal x103=((1.0)*r20);
IkReal x104=(cj5*sj0);
IkReal x105=((1.0)*cj4);
IkReal x106=((((-1.0)*cj5*r01*x102))+(((-1.0)*r00*sj5*x102))+(((-1.0)*r02*x105)));
j3eval[0]=x106;
j3eval[1]=IKsign(x106);
j3eval[2]=((IKabs(((((-1.0)*cj4*x101*x103))+((r22*sj0*sj4))+(((-1.0)*r21*x104*x105)))))+(IKabs((((r21*x101))+(((-1.0)*x103*x104))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x107=((1.0)*sj4);
IkReal x108=((((-1.0)*cj5*r21*x107))+(((-1.0)*cj4*r22))+(((-1.0)*r20*sj5*x107)));
j3eval[0]=x108;
j3eval[1]=IKsign(x108);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x109=((1.0)*r20);
IkReal x110=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x110;
j3eval[1]=IKsign(x110);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*sj5*x109))+(((-1.0)*cj4*cj5*r21)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x109))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x111=((1.0)*cj5);
IkReal x112=((1.0)*sj5);
IkReal x113=((((-1.0)*r20*sj4*x112))+(((-1.0)*r21*sj4*x111))+(((-1.0)*cj4*r22)));
j3eval[0]=x113;
j3eval[1]=IKsign(x113);
j3eval[2]=((IKabs(((((-1.0)*r10*x111))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*r10*x112))+(((-1.0)*cj4*r11*x111))+((r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x114=cj4*cj4;
IkReal x115=r00*r00;
IkReal x116=cj5*cj5;
IkReal x117=r01*r01;
IkReal x118=r02*r02;
IkReal x119=(r00*sj5);
IkReal x120=((1.0)*r01);
IkReal x121=((2.0)*cj5*r01);
IkReal x122=(cj4*r02*sj4);
IkReal x123=((1.0)*x116);
IkReal x124=(x114*x115);
IkReal x125=((((-1.0)*x119*x121))+(((-1.0)*x123*x124))+(((-2.0)*x119*x122))+(((-1.0)*x117*x123))+x124+x117+x118+((x114*x119*x121))+(((-1.0)*x121*x122))+((x114*x116*x117))+(((-1.0)*x114*x118))+((x115*x116)));
j3eval[0]=x125;
j3eval[1]=((IKabs(((((-1.0)*cj4*cj5*x120))+((r02*sj4))+(((-1.0)*cj4*x119)))))+(IKabs(((((-1.0)*sj5*x120))+((cj5*r00))))));
j3eval[2]=IKsign(x125);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x126=cj4*cj4;
IkReal x127=r00*r00;
IkReal x128=cj5*cj5;
IkReal x129=r01*r01;
IkReal x130=r02*r02;
IkReal x131=(r00*sj5);
IkReal x132=((1.0)*r01);
IkReal x133=((2.0)*cj5*r01);
IkReal x134=(cj4*r02*sj4);
IkReal x135=((1.0)*x128);
IkReal x136=(x126*x127);
CheckValue<IkReal> x137=IKPowWithIntegerCheck(IKsign(((((-1.0)*x135*x136))+(((-2.0)*x131*x134))+(((-1.0)*x133*x134))+x136+x130+x129+(((-1.0)*x126*x130))+((x126*x131*x133))+((x126*x128*x129))+(((-1.0)*x129*x135))+(((-1.0)*x131*x133))+((x127*x128)))),-1);
if(!x137.valid){
continue;
}
CheckValue<IkReal> x138 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x131))+(((-1.0)*cj4*cj5*x132))+((r02*sj4)))),IkReal(((((-1.0)*sj5*x132))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x138.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x137.value)))+(x138.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x139=IKsin(j3);
IkReal x140=IKcos(j3);
IkReal x141=(cj4*cj5);
IkReal x142=(cj5*r00);
IkReal x143=(r02*sj4);
IkReal x144=((1.0)*x140);
IkReal x145=(r01*x139);
IkReal x146=((1.0)*x139);
IkReal x147=(sj5*x140);
IkReal x148=(cj4*sj5*x139);
evalcond[0]=((((-1.0)*r22*sj4*x146))+((r20*x148))+((r21*x147))+(((-1.0)*cj5*r20*x144))+((r21*x139*x141)));
evalcond[1]=((((-1.0)*cj5*r10*x144))+((r11*x139*x141))+(((-1.0)*r12*sj4*x146))+((r11*x147))+((r10*x148)));
evalcond[2]=((1.0)+(((-1.0)*x143*x146))+(((-1.0)*x142*x144))+((r01*x147))+((r00*x148))+((x141*x145)));
evalcond[3]=(((x140*x143))+(((-1.0)*cj4*r00*sj5*x144))+(((-1.0)*x142*x146))+(((-1.0)*r01*x141*x144))+((sj5*x145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x149=((0.9229390048494)*sj4);
IkReal x150=((0.0910115505610575)*cj5);
IkReal x151=((0.9229390048494)*cj4);
IkReal x152=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+((r10*sj5*x149))+((cj5*r11*x149))+((r10*x150))+(((-1.0)*r11*x152))+((r12*x151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x149))+((r21*x152))+(((-1.0)*cj5*r21*x149))+(((-1.0)*r20*x150))+(((-2.35293564015143)*pz))+(((-1.0)*r22*x151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+((r10*sj5*x149))+((cj5*r11*x149))+((r10*x150))+(((-1.0)*r11*x152))+((r12*x151))))+IKsqr(((((-1.0)*r20*sj5*x149))+((r21*x152))+(((-1.0)*cj5*r21*x149))+(((-1.0)*r20*x150))+(((-2.35293564015143)*pz))+(((-1.0)*r22*x151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+((r10*sj5*x149))+((cj5*r11*x149))+((r10*x150))+(((-1.0)*r11*x152))+((r12*x151))), ((((-1.0)*r20*sj5*x149))+((r21*x152))+(((-1.0)*cj5*r21*x149))+(((-1.0)*r20*x150))+(((-2.35293564015143)*pz))+(((-1.0)*r22*x151))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x153=((1.0)*py);
IkReal x154=((0.39225)*r10);
IkReal x155=(sj4*sj5);
IkReal x156=(cj5*sj3);
IkReal x157=((0.39225)*r11);
IkReal x158=(sj3*sj5);
IkReal x159=(cj3*cj4);
IkReal x160=((0.03868)*sj5);
IkReal x161=((0.39225)*r21);
IkReal x162=((0.03868)*cj5);
IkReal x163=((0.39225)*cj4);
IkReal x164=((0.39225)*r20);
IkReal x165=(cj5*sj4);
IkReal x166=(r11*x160);
IkReal x167=((0.425001)*(IKsin(j1)));
IkReal x168=(r10*x162);
IkReal x169=(r21*x160);
IkReal x170=((0.425001)*(IKcos(j1)));
IkReal x171=(r20*x162);
IkReal x172=((0.39225)*cj3*sj4);
IkReal x173=(x168+x153);
IkReal x174=(x171+x170);
IkReal x175=(x166+x167);
evalcond[0]=(((x161*x165))+((r22*x163))+(((-1.0)*x169))+x174+pz+((x155*x164)));
evalcond[1]=((((-1.0)*x157*x165))+(((-1.0)*r12*x163))+(((-1.0)*x154*x155))+(((-1.0)*x173))+x175);
evalcond[2]=(((cj5*x159*x161))+(((-1.0)*x158*x161))+(((-1.0)*r22*x172))+(((-1.0)*x173))+((sj5*x159*x164))+x175+((x156*x164)));
evalcond[3]=((((-1.0)*x154*x156))+((x157*x158))+(((-1.0)*x174))+(((-1.0)*sj5*x154*x159))+x169+(((-1.0)*pz))+(((-1.0)*cj5*x157*x159))+((r12*x172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x176=(cj4*r12);
IkReal x177=((1.0)*sj1);
IkReal x178=(cj4*r22);
IkReal x179=(sj4*sj5);
IkReal x180=(cj5*sj4);
IkReal x181=(cj1*x180);
if( IKabs((((cj1*r10*x179))+((sj1*x178))+((r21*sj1*x180))+((r20*sj1*x179))+((cj1*x176))+((r11*x181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x177*x180))+((cj1*r20*x179))+((r21*x181))+(((-1.0)*x176*x177))+((cj1*x178))+(((-1.0)*r10*x177*x179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x179))+((sj1*x178))+((r21*sj1*x180))+((r20*sj1*x179))+((cj1*x176))+((r11*x181))))+IKsqr(((((-1.0)*r11*x177*x180))+((cj1*r20*x179))+((r21*x181))+(((-1.0)*x176*x177))+((cj1*x178))+(((-1.0)*r10*x177*x179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x179))+((sj1*x178))+((r21*sj1*x180))+((r20*sj1*x179))+((cj1*x176))+((r11*x181))), ((((-1.0)*r11*x177*x180))+((cj1*r20*x179))+((r21*x181))+(((-1.0)*x176*x177))+((cj1*x178))+(((-1.0)*r10*x177*x179))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x182=IKsin(j2);
IkReal x183=IKcos(j2);
IkReal x184=((1.0)*cj4);
IkReal x185=(sj3*sj5);
IkReal x186=((0.03868)*sj5);
IkReal x187=(cj3*sj4);
IkReal x188=(cj3*sj5);
IkReal x189=((0.03868)*cj5);
IkReal x190=(cj5*r21);
IkReal x191=((1.0)*sj4);
IkReal x192=(cj5*r11);
IkReal x193=(cj1*x183);
IkReal x194=(sj1*x182);
IkReal x195=((1.0)*cj5*sj3);
IkReal x196=(cj1*x182);
IkReal x197=(sj5*x191);
IkReal x198=(sj1*x183);
IkReal x199=(x193+x194);
evalcond[0]=((((-1.0)*r22*x184))+(((-1.0)*x190*x191))+x199+(((-1.0)*r20*x197)));
evalcond[1]=((((-1.0)*x191*x192))+(((-1.0)*r12*x184))+(((-1.0)*x198))+x196+(((-1.0)*r10*x197)));
evalcond[2]=((((-0.39225)*x194))+(((-0.39225)*x193))+(((-1.0)*pz))+((r21*x186))+(((-0.425001)*cj1))+(((-1.0)*r20*x189)));
evalcond[3]=((((-0.39225)*x196))+(((0.39225)*x198))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x189))+((r11*x186)));
evalcond[4]=((((-1.0)*r10*x184*x188))+x199+((r12*x187))+(((-1.0)*r10*x195))+((r11*x185))+(((-1.0)*cj3*x184*x192)));
evalcond[5]=((((-1.0)*r20*x184*x188))+(((-1.0)*x196))+x198+((r21*x185))+(((-1.0)*r20*x195))+((r22*x187))+(((-1.0)*cj3*x184*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x200=((1.0)*cj5);
IkReal x201=((1.0)*sj5);
CheckValue<IkReal> x202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x200))+(((-1.0)*r20*sj4*x201))+(((-1.0)*cj4*r22)))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x200)))),IkReal(((((-1.0)*cj4*r11*x200))+((r12*sj4))+(((-1.0)*cj4*r10*x201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x203.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x202.value)))+(x203.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x204=IKsin(j3);
IkReal x205=IKcos(j3);
IkReal x206=(cj4*cj5);
IkReal x207=(cj5*r00);
IkReal x208=(r02*sj4);
IkReal x209=((1.0)*x205);
IkReal x210=(r01*x204);
IkReal x211=((1.0)*x204);
IkReal x212=(sj5*x205);
IkReal x213=(cj4*sj5*x204);
evalcond[0]=((((-1.0)*r22*sj4*x211))+((r21*x212))+((r21*x204*x206))+(((-1.0)*cj5*r20*x209))+((r20*x213)));
evalcond[1]=(((r11*x204*x206))+((r11*x212))+(((-1.0)*r12*sj4*x211))+(((-1.0)*cj5*r10*x209))+((r10*x213)));
evalcond[2]=((1.0)+((x206*x210))+(((-1.0)*x207*x209))+((r01*x212))+(((-1.0)*x208*x211))+((r00*x213)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x209))+((x205*x208))+((sj5*x210))+(((-1.0)*x207*x211))+(((-1.0)*r01*x206*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x214=((0.9229390048494)*sj4);
IkReal x215=((0.0910115505610575)*cj5);
IkReal x216=((0.9229390048494)*cj4);
IkReal x217=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*r11*x217))+((r12*x216))+((r10*sj5*x214))+((cj5*r11*x214))+((r10*x215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x215))+((r21*x217))+(((-1.0)*r22*x216))+(((-1.0)*r20*sj5*x214))+(((-1.0)*cj5*r21*x214))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*r11*x217))+((r12*x216))+((r10*sj5*x214))+((cj5*r11*x214))+((r10*x215))))+IKsqr(((((-1.0)*r20*x215))+((r21*x217))+(((-1.0)*r22*x216))+(((-1.0)*r20*sj5*x214))+(((-1.0)*cj5*r21*x214))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*r11*x217))+((r12*x216))+((r10*sj5*x214))+((cj5*r11*x214))+((r10*x215))), ((((-1.0)*r20*x215))+((r21*x217))+(((-1.0)*r22*x216))+(((-1.0)*r20*sj5*x214))+(((-1.0)*cj5*r21*x214))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x218=((1.0)*py);
IkReal x219=((0.39225)*r10);
IkReal x220=(sj4*sj5);
IkReal x221=(cj5*sj3);
IkReal x222=((0.39225)*r11);
IkReal x223=(sj3*sj5);
IkReal x224=(cj3*cj4);
IkReal x225=((0.03868)*sj5);
IkReal x226=((0.39225)*r21);
IkReal x227=((0.03868)*cj5);
IkReal x228=((0.39225)*cj4);
IkReal x229=((0.39225)*r20);
IkReal x230=(cj5*sj4);
IkReal x231=(r11*x225);
IkReal x232=((0.425001)*(IKsin(j1)));
IkReal x233=(r10*x227);
IkReal x234=(r21*x225);
IkReal x235=((0.425001)*(IKcos(j1)));
IkReal x236=(r20*x227);
IkReal x237=((0.39225)*cj3*sj4);
IkReal x238=(x218+x233);
IkReal x239=(x236+x235);
IkReal x240=(x232+x231);
evalcond[0]=(((x226*x230))+(((-1.0)*x234))+x239+((x220*x229))+pz+((r22*x228)));
evalcond[1]=((((-1.0)*x219*x220))+(((-1.0)*x238))+x240+(((-1.0)*r12*x228))+(((-1.0)*x222*x230)));
evalcond[2]=((((-1.0)*r22*x237))+((cj5*x224*x226))+(((-1.0)*x238))+x240+(((-1.0)*x223*x226))+((sj5*x224*x229))+((x221*x229)));
evalcond[3]=((((-1.0)*sj5*x219*x224))+((x222*x223))+(((-1.0)*x219*x221))+(((-1.0)*pz))+(((-1.0)*x239))+x234+(((-1.0)*cj5*x222*x224))+((r12*x237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x241=(cj4*r12);
IkReal x242=((1.0)*sj1);
IkReal x243=(cj4*r22);
IkReal x244=(sj4*sj5);
IkReal x245=(cj5*sj4);
IkReal x246=(cj1*x245);
if( IKabs((((cj1*x241))+((r20*sj1*x244))+((r21*sj1*x245))+((r11*x246))+((cj1*r10*x244))+((sj1*x243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x243))+((cj1*r20*x244))+(((-1.0)*x241*x242))+((r21*x246))+(((-1.0)*r11*x242*x245))+(((-1.0)*r10*x242*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x241))+((r20*sj1*x244))+((r21*sj1*x245))+((r11*x246))+((cj1*r10*x244))+((sj1*x243))))+IKsqr((((cj1*x243))+((cj1*r20*x244))+(((-1.0)*x241*x242))+((r21*x246))+(((-1.0)*r11*x242*x245))+(((-1.0)*r10*x242*x244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x241))+((r20*sj1*x244))+((r21*sj1*x245))+((r11*x246))+((cj1*r10*x244))+((sj1*x243))), (((cj1*x243))+((cj1*r20*x244))+(((-1.0)*x241*x242))+((r21*x246))+(((-1.0)*r11*x242*x245))+(((-1.0)*r10*x242*x244))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x247=IKsin(j2);
IkReal x248=IKcos(j2);
IkReal x249=((1.0)*cj4);
IkReal x250=(sj3*sj5);
IkReal x251=((0.03868)*sj5);
IkReal x252=(cj3*sj4);
IkReal x253=(cj3*sj5);
IkReal x254=((0.03868)*cj5);
IkReal x255=(cj5*r21);
IkReal x256=((1.0)*sj4);
IkReal x257=(cj5*r11);
IkReal x258=(cj1*x248);
IkReal x259=(sj1*x247);
IkReal x260=((1.0)*cj5*sj3);
IkReal x261=(cj1*x247);
IkReal x262=(sj5*x256);
IkReal x263=(sj1*x248);
IkReal x264=(x258+x259);
evalcond[0]=((((-1.0)*x255*x256))+x264+(((-1.0)*r22*x249))+(((-1.0)*r20*x262)));
evalcond[1]=((((-1.0)*x263))+(((-1.0)*x256*x257))+(((-1.0)*r12*x249))+x261+(((-1.0)*r10*x262)));
evalcond[2]=(((r21*x251))+(((-0.39225)*x258))+(((-0.39225)*x259))+(((-1.0)*r20*x254))+(((-1.0)*pz))+(((-0.425001)*cj1)));
evalcond[3]=(((r11*x251))+(((-1.0)*py))+(((0.425001)*sj1))+(((-0.39225)*x261))+(((0.39225)*x263))+(((-1.0)*r10*x254)));
evalcond[4]=(((r11*x250))+((r12*x252))+x264+(((-1.0)*r10*x260))+(((-1.0)*r10*x249*x253))+(((-1.0)*cj3*x249*x257)));
evalcond[5]=((((-1.0)*r20*x249*x253))+((r21*x250))+(((-1.0)*x261))+x263+(((-1.0)*cj3*x249*x255))+((r22*x252))+(((-1.0)*r20*x260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x265=((1.0)*r20);
CheckValue<IkReal> x266 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x265))+((r21*sj5)))),IkReal((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x266.valid){
continue;
}
CheckValue<IkReal> x267=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x267.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x266.value)+(((1.5707963267949)*(x267.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x268=IKsin(j3);
IkReal x269=IKcos(j3);
IkReal x270=(cj4*cj5);
IkReal x271=(cj5*r00);
IkReal x272=(r02*sj4);
IkReal x273=((1.0)*x269);
IkReal x274=(r01*x268);
IkReal x275=((1.0)*x268);
IkReal x276=(sj5*x269);
IkReal x277=(cj4*sj5*x268);
evalcond[0]=((((-1.0)*cj5*r20*x273))+((r21*x268*x270))+(((-1.0)*r22*sj4*x275))+((r21*x276))+((r20*x277)));
evalcond[1]=((((-1.0)*r12*sj4*x275))+((r11*x268*x270))+(((-1.0)*cj5*r10*x273))+((r11*x276))+((r10*x277)));
evalcond[2]=((1.0)+(((-1.0)*x272*x275))+(((-1.0)*x271*x273))+((x270*x274))+((r01*x276))+((r00*x277)));
evalcond[3]=(((sj5*x274))+(((-1.0)*x271*x275))+(((-1.0)*r01*x270*x273))+(((-1.0)*cj4*r00*sj5*x273))+((x269*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x278=((0.9229390048494)*sj4);
IkReal x279=((0.0910115505610575)*cj5);
IkReal x280=((0.9229390048494)*cj4);
IkReal x281=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+((r12*x280))+(((-1.0)*r11*x281))+((cj5*r11*x278))+((r10*sj5*x278))+((r10*x279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x278))+(((-1.0)*cj5*r21*x278))+((r21*x281))+(((-1.0)*r22*x280))+(((-1.0)*r20*x279))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+((r12*x280))+(((-1.0)*r11*x281))+((cj5*r11*x278))+((r10*sj5*x278))+((r10*x279))))+IKsqr(((((-1.0)*r20*sj5*x278))+(((-1.0)*cj5*r21*x278))+((r21*x281))+(((-1.0)*r22*x280))+(((-1.0)*r20*x279))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+((r12*x280))+(((-1.0)*r11*x281))+((cj5*r11*x278))+((r10*sj5*x278))+((r10*x279))), ((((-1.0)*r20*sj5*x278))+(((-1.0)*cj5*r21*x278))+((r21*x281))+(((-1.0)*r22*x280))+(((-1.0)*r20*x279))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x282=((1.0)*py);
IkReal x283=((0.39225)*r10);
IkReal x284=(sj4*sj5);
IkReal x285=(cj5*sj3);
IkReal x286=((0.39225)*r11);
IkReal x287=(sj3*sj5);
IkReal x288=(cj3*cj4);
IkReal x289=((0.03868)*sj5);
IkReal x290=((0.39225)*r21);
IkReal x291=((0.03868)*cj5);
IkReal x292=((0.39225)*cj4);
IkReal x293=((0.39225)*r20);
IkReal x294=(cj5*sj4);
IkReal x295=(r11*x289);
IkReal x296=((0.425001)*(IKsin(j1)));
IkReal x297=(r10*x291);
IkReal x298=(r21*x289);
IkReal x299=((0.425001)*(IKcos(j1)));
IkReal x300=(r20*x291);
IkReal x301=((0.39225)*cj3*sj4);
IkReal x302=(x297+x282);
IkReal x303=(x300+x299);
IkReal x304=(x295+x296);
evalcond[0]=(((x290*x294))+(((-1.0)*x298))+((x284*x293))+x303+pz+((r22*x292)));
evalcond[1]=((((-1.0)*x286*x294))+x304+(((-1.0)*x302))+(((-1.0)*r12*x292))+(((-1.0)*x283*x284)));
evalcond[2]=((((-1.0)*r22*x301))+x304+((cj5*x288*x290))+((x285*x293))+((sj5*x288*x293))+(((-1.0)*x287*x290))+(((-1.0)*x302)));
evalcond[3]=(((x286*x287))+(((-1.0)*sj5*x283*x288))+(((-1.0)*pz))+x298+(((-1.0)*cj5*x286*x288))+(((-1.0)*x303))+((r12*x301))+(((-1.0)*x283*x285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x305=(cj4*r12);
IkReal x306=((1.0)*sj1);
IkReal x307=(cj4*r22);
IkReal x308=(sj4*sj5);
IkReal x309=(cj5*sj4);
IkReal x310=(cj1*x309);
if( IKabs((((r11*x310))+((cj1*x305))+((cj1*r10*x308))+((r20*sj1*x308))+((r21*sj1*x309))+((sj1*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x307))+(((-1.0)*r11*x306*x309))+((cj1*r20*x308))+(((-1.0)*x305*x306))+((r21*x310))+(((-1.0)*r10*x306*x308)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x310))+((cj1*x305))+((cj1*r10*x308))+((r20*sj1*x308))+((r21*sj1*x309))+((sj1*x307))))+IKsqr((((cj1*x307))+(((-1.0)*r11*x306*x309))+((cj1*r20*x308))+(((-1.0)*x305*x306))+((r21*x310))+(((-1.0)*r10*x306*x308))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x310))+((cj1*x305))+((cj1*r10*x308))+((r20*sj1*x308))+((r21*sj1*x309))+((sj1*x307))), (((cj1*x307))+(((-1.0)*r11*x306*x309))+((cj1*r20*x308))+(((-1.0)*x305*x306))+((r21*x310))+(((-1.0)*r10*x306*x308))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x311=IKsin(j2);
IkReal x312=IKcos(j2);
IkReal x313=((1.0)*cj4);
IkReal x314=(sj3*sj5);
IkReal x315=((0.03868)*sj5);
IkReal x316=(cj3*sj4);
IkReal x317=(cj3*sj5);
IkReal x318=((0.03868)*cj5);
IkReal x319=(cj5*r21);
IkReal x320=((1.0)*sj4);
IkReal x321=(cj5*r11);
IkReal x322=(cj1*x312);
IkReal x323=(sj1*x311);
IkReal x324=((1.0)*cj5*sj3);
IkReal x325=(cj1*x311);
IkReal x326=(sj5*x320);
IkReal x327=(sj1*x312);
IkReal x328=(x322+x323);
evalcond[0]=(x328+(((-1.0)*x319*x320))+(((-1.0)*r20*x326))+(((-1.0)*r22*x313)));
evalcond[1]=((((-1.0)*x327))+(((-1.0)*r12*x313))+(((-1.0)*x320*x321))+x325+(((-1.0)*r10*x326)));
evalcond[2]=((((-1.0)*r20*x318))+(((-0.39225)*x323))+(((-0.39225)*x322))+(((-1.0)*pz))+(((-0.425001)*cj1))+((r21*x315)));
evalcond[3]=(((r11*x315))+(((-0.39225)*x325))+(((0.39225)*x327))+(((-1.0)*r10*x318))+(((-1.0)*py))+(((0.425001)*sj1)));
evalcond[4]=((((-1.0)*r10*x313*x317))+((r11*x314))+x328+(((-1.0)*cj3*x313*x321))+((r12*x316))+(((-1.0)*r10*x324)));
evalcond[5]=((((-1.0)*cj3*x313*x319))+(((-1.0)*x325))+x327+(((-1.0)*r20*x324))+((r21*x314))+((r22*x316))+(((-1.0)*r20*x313*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x329=((1.0)*cj5);
IkReal x330=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x330;
j3eval[1]=IKsign(x330);
j3eval[2]=((IKabs((((r11*sj5))+(((-1.0)*r10*x329)))))+(IKabs(((((-1.0)*cj4*r10*sj5))+(((-1.0)*cj4*r11*x329))+((r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x331=((1.0)*sj5);
IkReal x332=((1.0)*cj5);
IkReal x333=((((-1.0)*r11*sj4*x332))+(((-1.0)*r10*sj4*x331))+(((-1.0)*cj4*r12)));
j3eval[0]=x333;
j3eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x332)))))+(IKabs(((((-1.0)*cj4*r20*x331))+((r22*sj4))+(((-1.0)*cj4*r21*x332))))));
j3eval[2]=IKsign(x333);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x334=cj5*cj5;
IkReal x335=cj4*cj4;
IkReal x336=r00*r00;
IkReal x337=r01*r01;
IkReal x338=r02*r02;
IkReal x339=(r00*sj5);
IkReal x340=((1.0)*r01);
IkReal x341=((2.0)*cj5*r01);
IkReal x342=(cj4*r02*sj4);
IkReal x343=((1.0)*x337);
IkReal x344=(x334*x336);
IkReal x345=(((x335*x344))+((x335*x338))+((x334*x337))+(((-1.0)*x334*x335*x343))+(((2.0)*x339*x342))+(((-1.0)*x338))+((x341*x342))+(((-1.0)*x335*x339*x341))+(((-1.0)*x343))+((x339*x341))+(((-1.0)*x335*x336))+(((-1.0)*x344)));
j3eval[0]=x345;
j3eval[1]=((IKabs(((((-1.0)*cj4*cj5*x340))+((r02*sj4))+(((-1.0)*cj4*x339)))))+(IKabs(((((-1.0)*sj5*x340))+((cj5*r00))))));
j3eval[2]=IKsign(x345);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x346=cj5*cj5;
IkReal x347=cj4*cj4;
IkReal x348=r00*r00;
IkReal x349=r01*r01;
IkReal x350=r02*r02;
IkReal x351=(cj5*r01);
IkReal x352=((1.0)*sj5);
IkReal x353=(r00*sj5);
IkReal x354=((1.0)*x348);
IkReal x355=((2.0)*cj4*r02*sj4);
IkReal x356=(x346*x349);
CheckValue<IkReal> x357=IKPowWithIntegerCheck(IKsign(((((-1.0)*x347*x356))+(((2.0)*x351*x353))+(((-2.0)*x347*x351*x353))+((x353*x355))+(((-1.0)*x346*x354))+((x351*x355))+(((-1.0)*x350))+x356+((x347*x350))+(((-1.0)*x347*x354))+((x346*x347*x348))+(((-1.0)*x349)))),-1);
if(!x357.valid){
continue;
}
CheckValue<IkReal> x358 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x352))+((r02*sj4))+(((-1.0)*cj4*x351)))),IkReal(((((-1.0)*r01*x352))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x358.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x357.value)))+(x358.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x359=IKsin(j3);
IkReal x360=IKcos(j3);
IkReal x361=(cj4*cj5);
IkReal x362=(cj5*r00);
IkReal x363=(r02*sj4);
IkReal x364=((1.0)*x360);
IkReal x365=(r01*x359);
IkReal x366=((1.0)*x359);
IkReal x367=(sj5*x360);
IkReal x368=(cj4*sj5*x359);
evalcond[0]=(((r20*x368))+(((-1.0)*r22*sj4*x366))+((r21*x367))+((r21*x359*x361))+(((-1.0)*cj5*r20*x364)));
evalcond[1]=((((-1.0)*cj5*r10*x364))+((r11*x367))+(((-1.0)*r12*sj4*x366))+((r11*x359*x361))+((r10*x368)));
evalcond[2]=((-1.0)+((x361*x365))+(((-1.0)*x363*x366))+(((-1.0)*x362*x364))+((r01*x367))+((r00*x368)));
evalcond[3]=((((-1.0)*x362*x366))+((sj5*x365))+(((-1.0)*r01*x361*x364))+(((-1.0)*cj4*r00*sj5*x364))+((x360*x363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x369=((0.9229390048494)*sj4);
IkReal x370=((0.0910115505610575)*cj5);
IkReal x371=((0.9229390048494)*cj4);
IkReal x372=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*sj5*x369))+(((-1.0)*r10*x370))+(((-1.0)*r12*x371))+((r11*x372))+(((-1.0)*cj5*r11*x369))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x370))+((r21*x372))+(((-1.0)*cj5*r21*x369))+(((-1.0)*r20*sj5*x369))+(((-2.35293564015143)*pz))+(((-1.0)*r22*x371)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x369))+(((-1.0)*r10*x370))+(((-1.0)*r12*x371))+((r11*x372))+(((-1.0)*cj5*r11*x369))+(((-2.35293564015143)*py))))+IKsqr(((((-1.0)*r20*x370))+((r21*x372))+(((-1.0)*cj5*r21*x369))+(((-1.0)*r20*sj5*x369))+(((-2.35293564015143)*pz))+(((-1.0)*r22*x371))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*sj5*x369))+(((-1.0)*r10*x370))+(((-1.0)*r12*x371))+((r11*x372))+(((-1.0)*cj5*r11*x369))+(((-2.35293564015143)*py))), ((((-1.0)*r20*x370))+((r21*x372))+(((-1.0)*cj5*r21*x369))+(((-1.0)*r20*sj5*x369))+(((-2.35293564015143)*pz))+(((-1.0)*r22*x371))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x373=((0.39225)*r10);
IkReal x374=(sj4*sj5);
IkReal x375=(cj5*sj3);
IkReal x376=((0.39225)*r11);
IkReal x377=(sj3*sj5);
IkReal x378=(cj3*cj4);
IkReal x379=((0.03868)*sj5);
IkReal x380=((0.39225)*r21);
IkReal x381=((0.03868)*cj5);
IkReal x382=((0.39225)*cj4);
IkReal x383=((0.39225)*r20);
IkReal x384=(cj5*sj4);
IkReal x385=((0.425001)*(IKcos(j1)));
IkReal x386=(r20*x381);
IkReal x387=(r21*x379);
IkReal x388=(r11*x379);
IkReal x389=((0.425001)*(IKsin(j1)));
IkReal x390=(r10*x381);
IkReal x391=((0.39225)*cj3*sj4);
IkReal x392=(x389+x390);
IkReal x393=(x386+x385+pz);
evalcond[0]=(((x376*x384))+((r12*x382))+x392+py+(((-1.0)*x388))+((x373*x374)));
evalcond[1]=(((r22*x382))+((x374*x383))+x393+(((-1.0)*x387))+((x380*x384)));
evalcond[2]=((((-1.0)*sj5*x373*x378))+(((-1.0)*cj5*x376*x378))+x393+(((-1.0)*x373*x375))+((x376*x377))+(((-1.0)*x387))+((r12*x391)));
evalcond[3]=((((-1.0)*sj5*x378*x383))+((x377*x380))+(((-1.0)*x392))+(((-1.0)*cj5*x378*x380))+(((-1.0)*x375*x383))+x388+(((-1.0)*py))+((r22*x391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x394=(cj5*sj4);
IkReal x395=(cj1*cj4);
IkReal x396=(cj4*sj1);
IkReal x397=((1.0)*cj1);
IkReal x398=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x394*x397))+((r21*sj1*x394))+(((-1.0)*r12*x395))+(((-1.0)*r10*x397*x398))+((r20*sj1*x398))+((r22*x396)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x395))+((cj1*r20*x398))+((r12*x396))+((r10*sj1*x398))+((r11*sj1*x394))+((cj1*r21*x394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x394*x397))+((r21*sj1*x394))+(((-1.0)*r12*x395))+(((-1.0)*r10*x397*x398))+((r20*sj1*x398))+((r22*x396))))+IKsqr((((r22*x395))+((cj1*r20*x398))+((r12*x396))+((r10*sj1*x398))+((r11*sj1*x394))+((cj1*r21*x394))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x394*x397))+((r21*sj1*x394))+(((-1.0)*r12*x395))+(((-1.0)*r10*x397*x398))+((r20*sj1*x398))+((r22*x396))), (((r22*x395))+((cj1*r20*x398))+((r12*x396))+((r10*sj1*x398))+((r11*sj1*x394))+((cj1*r21*x394))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x399=IKcos(j2);
IkReal x400=IKsin(j2);
IkReal x401=((1.0)*cj4);
IkReal x402=(sj3*sj5);
IkReal x403=((0.03868)*sj5);
IkReal x404=(cj5*r21);
IkReal x405=(cj3*sj5);
IkReal x406=((0.03868)*cj5);
IkReal x407=(cj3*sj4);
IkReal x408=((1.0)*sj4);
IkReal x409=(cj5*r11);
IkReal x410=(sj1*x399);
IkReal x411=(cj1*x399);
IkReal x412=((1.0)*cj5*sj3);
IkReal x413=(sj5*x408);
IkReal x414=(sj1*x400);
IkReal x415=(cj1*x400);
IkReal x416=((1.0)*x415);
evalcond[0]=((((-1.0)*r20*x413))+x411+x414+(((-1.0)*x404*x408))+(((-1.0)*r22*x401)));
evalcond[1]=((((-1.0)*r10*x413))+x410+(((-1.0)*x416))+(((-1.0)*r12*x401))+(((-1.0)*x408*x409)));
evalcond[2]=((((-1.0)*r20*x406))+(((-1.0)*pz))+((r21*x403))+(((-0.39225)*x411))+(((-0.39225)*x414))+(((-0.425001)*cj1)));
evalcond[3]=(((r11*x403))+(((-1.0)*r10*x406))+(((0.39225)*x415))+(((-1.0)*py))+(((-0.39225)*x410))+(((-0.425001)*sj1)));
evalcond[4]=(((r22*x407))+(((-1.0)*r20*x412))+(((-1.0)*r20*x401*x405))+x410+((r21*x402))+(((-1.0)*x416))+(((-1.0)*cj3*x401*x404)));
evalcond[5]=(((r11*x402))+((r12*x407))+(((-1.0)*r10*x412))+(((-1.0)*r10*x401*x405))+(((-1.0)*x414))+(((-1.0)*x411))+(((-1.0)*cj3*x401*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x417=((1.0)*sj5);
IkReal x418=((1.0)*cj5);
CheckValue<IkReal> x419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x417))+(((-1.0)*cj4*r12))+(((-1.0)*r11*sj4*x418)))),-1);
if(!x419.valid){
continue;
}
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x418)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r20*x417))+(((-1.0)*cj4*r21*x418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x419.value)))+(x420.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x421=IKsin(j3);
IkReal x422=IKcos(j3);
IkReal x423=(cj4*cj5);
IkReal x424=(cj5*r00);
IkReal x425=(r02*sj4);
IkReal x426=((1.0)*x422);
IkReal x427=(r01*x421);
IkReal x428=((1.0)*x421);
IkReal x429=(sj5*x422);
IkReal x430=(cj4*sj5*x421);
evalcond[0]=((((-1.0)*cj5*r20*x426))+((r21*x429))+(((-1.0)*r22*sj4*x428))+((r21*x421*x423))+((r20*x430)));
evalcond[1]=((((-1.0)*cj5*r10*x426))+(((-1.0)*r12*sj4*x428))+((r11*x421*x423))+((r10*x430))+((r11*x429)));
evalcond[2]=((-1.0)+((r01*x429))+(((-1.0)*x425*x428))+((r00*x430))+(((-1.0)*x424*x426))+((x423*x427)));
evalcond[3]=(((sj5*x427))+(((-1.0)*cj4*r00*sj5*x426))+(((-1.0)*x424*x428))+(((-1.0)*r01*x423*x426))+((x422*x425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x431=((0.9229390048494)*sj4);
IkReal x432=((0.0910115505610575)*cj5);
IkReal x433=((0.9229390048494)*cj4);
IkReal x434=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*x432))+(((-1.0)*r12*x433))+(((-1.0)*cj5*r11*x431))+(((-1.0)*r10*sj5*x431))+((r11*x434))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x431))+((r21*x434))+(((-1.0)*r20*x432))+(((-1.0)*r20*sj5*x431))+(((-1.0)*r22*x433))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x432))+(((-1.0)*r12*x433))+(((-1.0)*cj5*r11*x431))+(((-1.0)*r10*sj5*x431))+((r11*x434))+(((-2.35293564015143)*py))))+IKsqr(((((-1.0)*cj5*r21*x431))+((r21*x434))+(((-1.0)*r20*x432))+(((-1.0)*r20*sj5*x431))+(((-1.0)*r22*x433))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x432))+(((-1.0)*r12*x433))+(((-1.0)*cj5*r11*x431))+(((-1.0)*r10*sj5*x431))+((r11*x434))+(((-2.35293564015143)*py))), ((((-1.0)*cj5*r21*x431))+((r21*x434))+(((-1.0)*r20*x432))+(((-1.0)*r20*sj5*x431))+(((-1.0)*r22*x433))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x435=((0.39225)*r10);
IkReal x436=(sj4*sj5);
IkReal x437=(cj5*sj3);
IkReal x438=((0.39225)*r11);
IkReal x439=(sj3*sj5);
IkReal x440=(cj3*cj4);
IkReal x441=((0.03868)*sj5);
IkReal x442=((0.39225)*r21);
IkReal x443=((0.03868)*cj5);
IkReal x444=((0.39225)*cj4);
IkReal x445=((0.39225)*r20);
IkReal x446=(cj5*sj4);
IkReal x447=((0.425001)*(IKcos(j1)));
IkReal x448=(r20*x443);
IkReal x449=(r21*x441);
IkReal x450=(r11*x441);
IkReal x451=((0.425001)*(IKsin(j1)));
IkReal x452=(r10*x443);
IkReal x453=((0.39225)*cj3*sj4);
IkReal x454=(x452+x451);
IkReal x455=(x448+x447+pz);
evalcond[0]=((((-1.0)*x450))+x454+py+((x438*x446))+((r12*x444))+((x435*x436)));
evalcond[1]=((((-1.0)*x449))+x455+((r22*x444))+((x442*x446))+((x436*x445)));
evalcond[2]=((((-1.0)*x449))+(((-1.0)*x435*x437))+(((-1.0)*cj5*x438*x440))+(((-1.0)*sj5*x435*x440))+x455+((r12*x453))+((x438*x439)));
evalcond[3]=(((x439*x442))+(((-1.0)*x437*x445))+(((-1.0)*x454))+(((-1.0)*py))+x450+(((-1.0)*cj5*x440*x442))+(((-1.0)*sj5*x440*x445))+((r22*x453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x456=(cj5*sj4);
IkReal x457=(cj1*cj4);
IkReal x458=(cj4*sj1);
IkReal x459=((1.0)*cj1);
IkReal x460=(sj4*sj5);
if( IKabs((((r21*sj1*x456))+(((-1.0)*r11*x456*x459))+((r20*sj1*x460))+(((-1.0)*r10*x459*x460))+(((-1.0)*r12*x457))+((r22*x458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x456))+((cj1*r20*x460))+((r11*sj1*x456))+((r12*x458))+((r10*sj1*x460))+((r22*x457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x456))+(((-1.0)*r11*x456*x459))+((r20*sj1*x460))+(((-1.0)*r10*x459*x460))+(((-1.0)*r12*x457))+((r22*x458))))+IKsqr((((cj1*r21*x456))+((cj1*r20*x460))+((r11*sj1*x456))+((r12*x458))+((r10*sj1*x460))+((r22*x457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x456))+(((-1.0)*r11*x456*x459))+((r20*sj1*x460))+(((-1.0)*r10*x459*x460))+(((-1.0)*r12*x457))+((r22*x458))), (((cj1*r21*x456))+((cj1*r20*x460))+((r11*sj1*x456))+((r12*x458))+((r10*sj1*x460))+((r22*x457))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x461=IKcos(j2);
IkReal x462=IKsin(j2);
IkReal x463=((1.0)*cj4);
IkReal x464=(sj3*sj5);
IkReal x465=((0.03868)*sj5);
IkReal x466=(cj5*r21);
IkReal x467=(cj3*sj5);
IkReal x468=((0.03868)*cj5);
IkReal x469=(cj3*sj4);
IkReal x470=((1.0)*sj4);
IkReal x471=(cj5*r11);
IkReal x472=(sj1*x461);
IkReal x473=(cj1*x461);
IkReal x474=((1.0)*cj5*sj3);
IkReal x475=(sj5*x470);
IkReal x476=(sj1*x462);
IkReal x477=(cj1*x462);
IkReal x478=((1.0)*x477);
evalcond[0]=(x476+x473+(((-1.0)*r22*x463))+(((-1.0)*x466*x470))+(((-1.0)*r20*x475)));
evalcond[1]=((((-1.0)*x478))+x472+(((-1.0)*r12*x463))+(((-1.0)*r10*x475))+(((-1.0)*x470*x471)));
evalcond[2]=((((-0.39225)*x473))+(((-0.39225)*x476))+(((-1.0)*pz))+((r21*x465))+(((-0.425001)*cj1))+(((-1.0)*r20*x468)));
evalcond[3]=((((-0.39225)*x472))+(((-1.0)*py))+(((-1.0)*r10*x468))+((r11*x465))+(((-0.425001)*sj1))+(((0.39225)*x477)));
evalcond[4]=(((r22*x469))+(((-1.0)*x478))+x472+(((-1.0)*cj3*x463*x466))+((r21*x464))+(((-1.0)*r20*x474))+(((-1.0)*r20*x463*x467)));
evalcond[5]=((((-1.0)*r10*x463*x467))+(((-1.0)*x473))+(((-1.0)*x476))+((r12*x469))+(((-1.0)*r10*x474))+((r11*x464))+(((-1.0)*cj3*x463*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x479=((1.0)*cj5);
CheckValue<IkReal> x480 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x479)))),IkReal(((((-1.0)*cj4*r10*sj5))+(((-1.0)*cj4*r11*x479))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x480.valid){
continue;
}
CheckValue<IkReal> x481=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x481.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x480.value)+(((1.5707963267949)*(x481.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x482=IKsin(j3);
IkReal x483=IKcos(j3);
IkReal x484=(cj4*cj5);
IkReal x485=(cj5*r00);
IkReal x486=(r02*sj4);
IkReal x487=((1.0)*x483);
IkReal x488=(r01*x482);
IkReal x489=((1.0)*x482);
IkReal x490=(sj5*x483);
IkReal x491=(cj4*sj5*x482);
evalcond[0]=((((-1.0)*r22*sj4*x489))+(((-1.0)*cj5*r20*x487))+((r21*x482*x484))+((r21*x490))+((r20*x491)));
evalcond[1]=(((r11*x482*x484))+((r11*x490))+((r10*x491))+(((-1.0)*cj5*r10*x487))+(((-1.0)*r12*sj4*x489)));
evalcond[2]=((-1.0)+(((-1.0)*x486*x489))+((x484*x488))+((r00*x491))+((r01*x490))+(((-1.0)*x485*x487)));
evalcond[3]=(((x483*x486))+((sj5*x488))+(((-1.0)*r01*x484*x487))+(((-1.0)*cj4*r00*sj5*x487))+(((-1.0)*x485*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x492=((0.9229390048494)*sj4);
IkReal x493=((0.0910115505610575)*cj5);
IkReal x494=((0.9229390048494)*cj4);
IkReal x495=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*x493))+(((-1.0)*cj5*r11*x492))+((r11*x495))+(((-1.0)*r10*sj5*x492))+(((-1.0)*r12*x494))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x492))+(((-1.0)*r22*x494))+((r21*x495))+(((-1.0)*r20*sj5*x492))+(((-2.35293564015143)*pz))+(((-1.0)*r20*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x493))+(((-1.0)*cj5*r11*x492))+((r11*x495))+(((-1.0)*r10*sj5*x492))+(((-1.0)*r12*x494))+(((-2.35293564015143)*py))))+IKsqr(((((-1.0)*cj5*r21*x492))+(((-1.0)*r22*x494))+((r21*x495))+(((-1.0)*r20*sj5*x492))+(((-2.35293564015143)*pz))+(((-1.0)*r20*x493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x493))+(((-1.0)*cj5*r11*x492))+((r11*x495))+(((-1.0)*r10*sj5*x492))+(((-1.0)*r12*x494))+(((-2.35293564015143)*py))), ((((-1.0)*cj5*r21*x492))+(((-1.0)*r22*x494))+((r21*x495))+(((-1.0)*r20*sj5*x492))+(((-2.35293564015143)*pz))+(((-1.0)*r20*x493))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x496=((0.39225)*r10);
IkReal x497=(sj4*sj5);
IkReal x498=(cj5*sj3);
IkReal x499=((0.39225)*r11);
IkReal x500=(sj3*sj5);
IkReal x501=(cj3*cj4);
IkReal x502=((0.03868)*sj5);
IkReal x503=((0.39225)*r21);
IkReal x504=((0.03868)*cj5);
IkReal x505=((0.39225)*cj4);
IkReal x506=((0.39225)*r20);
IkReal x507=(cj5*sj4);
IkReal x508=((0.425001)*(IKcos(j1)));
IkReal x509=(r20*x504);
IkReal x510=(r21*x502);
IkReal x511=(r11*x502);
IkReal x512=((0.425001)*(IKsin(j1)));
IkReal x513=(r10*x504);
IkReal x514=((0.39225)*cj3*sj4);
IkReal x515=(x513+x512);
IkReal x516=(pz+x508+x509);
evalcond[0]=(((x496*x497))+((r12*x505))+py+x515+(((-1.0)*x511))+((x499*x507)));
evalcond[1]=(((x497*x506))+((r22*x505))+x516+((x503*x507))+(((-1.0)*x510)));
evalcond[2]=((((-1.0)*x496*x498))+x516+(((-1.0)*cj5*x499*x501))+(((-1.0)*x510))+((x499*x500))+((r12*x514))+(((-1.0)*sj5*x496*x501)));
evalcond[3]=(((x500*x503))+(((-1.0)*sj5*x501*x506))+(((-1.0)*cj5*x501*x503))+(((-1.0)*py))+x511+(((-1.0)*x515))+((r22*x514))+(((-1.0)*x498*x506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x517=(cj5*sj4);
IkReal x518=(cj1*cj4);
IkReal x519=(cj4*sj1);
IkReal x520=((1.0)*cj1);
IkReal x521=(sj4*sj5);
if( IKabs((((r20*sj1*x521))+(((-1.0)*r12*x518))+(((-1.0)*r11*x517*x520))+(((-1.0)*r10*x520*x521))+((r21*sj1*x517))+((r22*x519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x521))+((r11*sj1*x517))+((r10*sj1*x521))+((r22*x518))+((r12*x519))+((cj1*r21*x517)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x521))+(((-1.0)*r12*x518))+(((-1.0)*r11*x517*x520))+(((-1.0)*r10*x520*x521))+((r21*sj1*x517))+((r22*x519))))+IKsqr((((cj1*r20*x521))+((r11*sj1*x517))+((r10*sj1*x521))+((r22*x518))+((r12*x519))+((cj1*r21*x517))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x521))+(((-1.0)*r12*x518))+(((-1.0)*r11*x517*x520))+(((-1.0)*r10*x520*x521))+((r21*sj1*x517))+((r22*x519))), (((cj1*r20*x521))+((r11*sj1*x517))+((r10*sj1*x521))+((r22*x518))+((r12*x519))+((cj1*r21*x517))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x522=IKcos(j2);
IkReal x523=IKsin(j2);
IkReal x524=((1.0)*cj4);
IkReal x525=(sj3*sj5);
IkReal x526=((0.03868)*sj5);
IkReal x527=(cj5*r21);
IkReal x528=(cj3*sj5);
IkReal x529=((0.03868)*cj5);
IkReal x530=(cj3*sj4);
IkReal x531=((1.0)*sj4);
IkReal x532=(cj5*r11);
IkReal x533=(sj1*x522);
IkReal x534=(cj1*x522);
IkReal x535=((1.0)*cj5*sj3);
IkReal x536=(sj5*x531);
IkReal x537=(sj1*x523);
IkReal x538=(cj1*x523);
IkReal x539=((1.0)*x538);
evalcond[0]=((((-1.0)*x527*x531))+(((-1.0)*r20*x536))+x534+x537+(((-1.0)*r22*x524)));
evalcond[1]=((((-1.0)*r10*x536))+(((-1.0)*x531*x532))+(((-1.0)*x539))+x533+(((-1.0)*r12*x524)));
evalcond[2]=(((r21*x526))+(((-1.0)*r20*x529))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-0.39225)*x534))+(((-0.39225)*x537)));
evalcond[3]=((((0.39225)*x538))+((r11*x526))+(((-1.0)*r10*x529))+(((-1.0)*py))+(((-0.425001)*sj1))+(((-0.39225)*x533)));
evalcond[4]=(((r21*x525))+(((-1.0)*r20*x524*x528))+(((-1.0)*cj3*x524*x527))+(((-1.0)*x539))+(((-1.0)*r20*x535))+((r22*x530))+x533);
evalcond[5]=((((-1.0)*x534))+(((-1.0)*x537))+((r11*x525))+(((-1.0)*cj3*x524*x532))+(((-1.0)*r10*x535))+((r12*x530))+(((-1.0)*r10*x524*x528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x540=((1.0)*r00);
IkReal x541=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x541;
j3eval[1]=IKsign(x541);
j3eval[2]=((IKabs((((r01*sj5))+(((-1.0)*cj5*x540)))))+(IKabs(((((-1.0)*cj4*cj5*r01))+((r02*sj4))+(((-1.0)*cj4*sj5*x540))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x542=((1.0)*sj5);
IkReal x543=((1.0)*cj5);
IkReal x544=((((-1.0)*cj4*r02))+(((-1.0)*r01*sj4*x543))+(((-1.0)*r00*sj4*x542)));
j3eval[0]=x544;
j3eval[1]=IKsign(x544);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x543))+(((-1.0)*cj4*r20*x542)))))+(IKabs((((r21*sj5))+(((-1.0)*r20*x543))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x545=cj4*cj4;
IkReal x546=r11*r11;
IkReal x547=cj5*cj5;
IkReal x548=r10*r10;
IkReal x549=r12*r12;
IkReal x550=(cj5*r11);
IkReal x551=((1.0)*cj4);
IkReal x552=((1.0)*x545);
IkReal x553=((2.0)*r10*sj5);
IkReal x554=(cj4*r12*sj4);
IkReal x555=(x547*x548);
IkReal x556=(x546*x547);
IkReal x557=((((-1.0)*x556))+(((-1.0)*x550*x553))+(((-1.0)*x553*x554))+(((-1.0)*x552*x555))+x555+x546+x549+(((-1.0)*x549*x552))+((x545*x550*x553))+(((-2.0)*x550*x554))+((x545*x556))+((x545*x548)));
j3eval[0]=x557;
j3eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs(((((-1.0)*x550*x551))+((r12*sj4))+(((-1.0)*r10*sj5*x551))))));
j3eval[2]=IKsign(x557);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x558=cj4*cj4;
IkReal x559=r11*r11;
IkReal x560=cj5*cj5;
IkReal x561=r10*r10;
IkReal x562=r12*r12;
IkReal x563=(cj5*r11);
IkReal x564=((1.0)*sj5);
IkReal x565=((2.0)*r10*sj5);
IkReal x566=(cj4*r12*sj4);
IkReal x567=((1.0)*x558);
IkReal x568=(x560*x561);
IkReal x569=(x559*x560);
CheckValue<IkReal> x570=IKPowWithIntegerCheck(IKsign((((x558*x569))+((x558*x561))+(((-1.0)*x562*x567))+(((-2.0)*x563*x566))+x559+x568+x562+(((-1.0)*x569))+(((-1.0)*x563*x565))+((x558*x563*x565))+(((-1.0)*x567*x568))+(((-1.0)*x565*x566)))),-1);
if(!x570.valid){
continue;
}
CheckValue<IkReal> x571 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x563))+((r12*sj4))+(((-1.0)*cj4*r10*x564)))),IkReal((((cj5*r10))+(((-1.0)*r11*x564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x571.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x570.value)))+(x571.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x572=IKsin(j3);
IkReal x573=IKcos(j3);
IkReal x574=(cj4*cj5);
IkReal x575=(r12*sj4);
IkReal x576=(cj5*r10);
IkReal x577=((1.0)*x573);
IkReal x578=(r11*x572);
IkReal x579=((1.0)*x572);
IkReal x580=(sj5*x573);
IkReal x581=(cj4*sj5*x572);
evalcond[0]=(((r20*x581))+(((-1.0)*r22*sj4*x579))+((r21*x572*x574))+((r21*x580))+(((-1.0)*cj5*r20*x577)));
evalcond[1]=((((-1.0)*r02*sj4*x579))+(((-1.0)*cj5*r00*x577))+((r01*x580))+((r00*x581))+((r01*x572*x574)));
evalcond[2]=((1.0)+((r11*x580))+((r10*x581))+((x574*x578))+(((-1.0)*x576*x577))+(((-1.0)*x575*x579)));
evalcond[3]=(((x573*x575))+(((-1.0)*x576*x579))+((sj5*x578))+(((-1.0)*r11*x574*x577))+(((-1.0)*cj4*r10*sj5*x577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x582=((0.9229390048494)*cj4);
IkReal x583=((0.9229390048494)*sj4);
IkReal x584=((0.0910115505610575)*cj5);
IkReal x585=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r02*x582))+(((-1.0)*cj5*r01*x583))+((r01*x585))+(((-1.0)*r00*sj5*x583))+(((-1.0)*r00*x584))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x582))+(((-1.0)*r20*x584))+(((-1.0)*cj5*r21*x583))+(((-1.0)*r20*sj5*x583))+((r21*x585))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x582))+(((-1.0)*cj5*r01*x583))+((r01*x585))+(((-1.0)*r00*sj5*x583))+(((-1.0)*r00*x584))+(((-2.35293564015143)*px))))+IKsqr(((((-1.0)*r22*x582))+(((-1.0)*r20*x584))+(((-1.0)*cj5*r21*x583))+(((-1.0)*r20*sj5*x583))+((r21*x585))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x582))+(((-1.0)*cj5*r01*x583))+((r01*x585))+(((-1.0)*r00*sj5*x583))+(((-1.0)*r00*x584))+(((-2.35293564015143)*px))), ((((-1.0)*r22*x582))+(((-1.0)*r20*x584))+(((-1.0)*cj5*r21*x583))+(((-1.0)*r20*sj5*x583))+((r21*x585))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x586=((0.39225)*sj3);
IkReal x587=(cj5*r00);
IkReal x588=((0.39225)*cj4);
IkReal x589=(r01*sj5);
IkReal x590=(r21*sj5);
IkReal x591=(cj5*r20);
IkReal x592=((0.39225)*sj4);
IkReal x593=(r20*sj5);
IkReal x594=(r00*sj5);
IkReal x595=(cj5*r01);
IkReal x596=(cj5*r21);
IkReal x597=((0.425001)*(IKcos(j1)));
IkReal x598=((0.03868)*x591);
IkReal x599=((0.03868)*x590);
IkReal x600=((0.03868)*x589);
IkReal x601=((0.425001)*(IKsin(j1)));
IkReal x602=((0.03868)*x587);
IkReal x603=(x602+x601);
IkReal x604=(pz+x597+x598);
evalcond[0]=(((r02*x588))+px+x603+(((-1.0)*x600))+((x592*x595))+((x592*x594)));
evalcond[1]=((((-1.0)*x599))+x604+((r22*x588))+((x592*x596))+((x592*x593)));
evalcond[2]=((((-1.0)*x586*x587))+((x586*x589))+((cj3*r02*x592))+(((-1.0)*x599))+x604+(((-1.0)*cj3*x588*x594))+(((-1.0)*cj3*x588*x595)));
evalcond[3]=((((-1.0)*x586*x591))+((cj3*r22*x592))+(((-1.0)*px))+x600+(((-1.0)*x603))+(((-1.0)*cj3*x588*x596))+(((-1.0)*cj3*x588*x593))+((x586*x590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x605=(cj4*sj1);
IkReal x606=(cj1*cj4);
IkReal x607=(cj5*sj4);
IkReal x608=((1.0)*cj1);
IkReal x609=(sj4*sj5);
IkReal x610=(sj1*x609);
if( IKabs(((((-1.0)*r00*x608*x609))+((r20*x610))+((r21*sj1*x607))+(((-1.0)*r01*x607*x608))+(((-1.0)*r02*x606))+((r22*x605)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x610))+((r01*sj1*x607))+((cj1*r21*x607))+((r02*x605))+((cj1*r20*x609))+((r22*x606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x608*x609))+((r20*x610))+((r21*sj1*x607))+(((-1.0)*r01*x607*x608))+(((-1.0)*r02*x606))+((r22*x605))))+IKsqr((((r00*x610))+((r01*sj1*x607))+((cj1*r21*x607))+((r02*x605))+((cj1*r20*x609))+((r22*x606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x608*x609))+((r20*x610))+((r21*sj1*x607))+(((-1.0)*r01*x607*x608))+(((-1.0)*r02*x606))+((r22*x605))), (((r00*x610))+((r01*sj1*x607))+((cj1*r21*x607))+((r02*x605))+((cj1*r20*x609))+((r22*x606))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x611=IKcos(j2);
IkReal x612=IKsin(j2);
IkReal x613=(cj3*sj4);
IkReal x614=((1.0)*cj5);
IkReal x615=((1.0)*cj4);
IkReal x616=(cj3*cj4);
IkReal x617=(r21*sj5);
IkReal x618=(cj3*sj5);
IkReal x619=((0.03868)*cj5);
IkReal x620=(r01*sj5);
IkReal x621=(sj1*x611);
IkReal x622=(cj1*x611);
IkReal x623=((1.0)*sj4*sj5);
IkReal x624=(sj1*x612);
IkReal x625=(cj1*x612);
IkReal x626=((1.0)*x625);
evalcond[0]=((((-1.0)*r22*x615))+(((-1.0)*r21*sj4*x614))+(((-1.0)*r20*x623))+x624+x622);
evalcond[1]=((((-1.0)*x626))+(((-1.0)*r00*x623))+(((-1.0)*r01*sj4*x614))+x621+(((-1.0)*r02*x615)));
evalcond[2]=((((-1.0)*r20*x619))+(((-0.39225)*x624))+(((-0.39225)*x622))+(((0.03868)*x617))+(((-1.0)*pz))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x621))+(((-1.0)*r00*x619))+(((-1.0)*px))+(((0.39225)*x625))+(((-0.425001)*sj1))+(((0.03868)*x620)));
evalcond[4]=((((-1.0)*r20*x615*x618))+(((-1.0)*x626))+(((-1.0)*r20*sj3*x614))+x621+((sj3*x617))+((r22*x613))+(((-1.0)*r21*x614*x616)));
evalcond[5]=((((-1.0)*r00*x615*x618))+(((-1.0)*r01*x614*x616))+((sj3*x620))+(((-1.0)*r00*sj3*x614))+((r02*x613))+(((-1.0)*x622))+(((-1.0)*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x627=((1.0)*sj5);
IkReal x628=((1.0)*cj5);
CheckValue<IkReal> x629 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x628)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x628))+(((-1.0)*cj4*r20*x627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x629.valid){
continue;
}
CheckValue<IkReal> x630=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x627))+(((-1.0)*r01*sj4*x628)))),-1);
if(!x630.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x629.value)+(((1.5707963267949)*(x630.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x631=IKsin(j3);
IkReal x632=IKcos(j3);
IkReal x633=(cj4*cj5);
IkReal x634=(r12*sj4);
IkReal x635=(cj5*r10);
IkReal x636=((1.0)*x632);
IkReal x637=(r11*x631);
IkReal x638=((1.0)*x631);
IkReal x639=(sj5*x632);
IkReal x640=(cj4*sj5*x631);
evalcond[0]=(((r21*x639))+((r20*x640))+(((-1.0)*cj5*r20*x636))+((r21*x631*x633))+(((-1.0)*r22*sj4*x638)));
evalcond[1]=((((-1.0)*cj5*r00*x636))+(((-1.0)*r02*sj4*x638))+((r01*x639))+((r01*x631*x633))+((r00*x640)));
evalcond[2]=((1.0)+(((-1.0)*x634*x638))+(((-1.0)*x635*x636))+((r10*x640))+((x633*x637))+((r11*x639)));
evalcond[3]=(((sj5*x637))+(((-1.0)*x635*x638))+(((-1.0)*cj4*r10*sj5*x636))+((x632*x634))+(((-1.0)*r11*x633*x636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x641=((0.9229390048494)*cj4);
IkReal x642=((0.9229390048494)*sj4);
IkReal x643=((0.0910115505610575)*cj5);
IkReal x644=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r01*x642))+(((-1.0)*r00*x643))+(((-1.0)*r02*x641))+((r01*x644))+(((-1.0)*r00*sj5*x642))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x642))+(((-1.0)*r22*x641))+((r21*x644))+(((-1.0)*r20*x643))+(((-1.0)*cj5*r21*x642))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r01*x642))+(((-1.0)*r00*x643))+(((-1.0)*r02*x641))+((r01*x644))+(((-1.0)*r00*sj5*x642))+(((-2.35293564015143)*px))))+IKsqr(((((-1.0)*r20*sj5*x642))+(((-1.0)*r22*x641))+((r21*x644))+(((-1.0)*r20*x643))+(((-1.0)*cj5*r21*x642))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r01*x642))+(((-1.0)*r00*x643))+(((-1.0)*r02*x641))+((r01*x644))+(((-1.0)*r00*sj5*x642))+(((-2.35293564015143)*px))), ((((-1.0)*r20*sj5*x642))+(((-1.0)*r22*x641))+((r21*x644))+(((-1.0)*r20*x643))+(((-1.0)*cj5*r21*x642))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x645=((0.39225)*sj3);
IkReal x646=(cj5*r00);
IkReal x647=((0.39225)*cj4);
IkReal x648=(r01*sj5);
IkReal x649=(r21*sj5);
IkReal x650=(cj5*r20);
IkReal x651=((0.39225)*sj4);
IkReal x652=(r20*sj5);
IkReal x653=(r00*sj5);
IkReal x654=(cj5*r01);
IkReal x655=(cj5*r21);
IkReal x656=((0.425001)*(IKcos(j1)));
IkReal x657=((0.03868)*x650);
IkReal x658=((0.03868)*x649);
IkReal x659=((0.03868)*x648);
IkReal x660=((0.425001)*(IKsin(j1)));
IkReal x661=((0.03868)*x646);
IkReal x662=(x661+x660);
IkReal x663=(pz+x656+x657);
evalcond[0]=(((r02*x647))+(((-1.0)*x659))+((x651*x654))+((x651*x653))+px+x662);
evalcond[1]=((((-1.0)*x658))+((x651*x655))+((x651*x652))+x663+((r22*x647)));
evalcond[2]=((((-1.0)*cj3*x647*x654))+(((-1.0)*cj3*x647*x653))+((cj3*r02*x651))+(((-1.0)*x658))+((x645*x648))+x663+(((-1.0)*x645*x646)));
evalcond[3]=((((-1.0)*cj3*x647*x652))+(((-1.0)*cj3*x647*x655))+((cj3*r22*x651))+(((-1.0)*px))+((x645*x649))+(((-1.0)*x662))+x659+(((-1.0)*x645*x650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x664=(cj4*sj1);
IkReal x665=(cj1*cj4);
IkReal x666=(cj5*sj4);
IkReal x667=((1.0)*cj1);
IkReal x668=(sj4*sj5);
IkReal x669=(sj1*x668);
if( IKabs((((r21*sj1*x666))+((r20*x669))+(((-1.0)*r00*x667*x668))+(((-1.0)*r01*x666*x667))+(((-1.0)*r02*x665))+((r22*x664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x669))+((r01*sj1*x666))+((r02*x664))+((cj1*r20*x668))+((cj1*r21*x666))+((r22*x665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x666))+((r20*x669))+(((-1.0)*r00*x667*x668))+(((-1.0)*r01*x666*x667))+(((-1.0)*r02*x665))+((r22*x664))))+IKsqr((((r00*x669))+((r01*sj1*x666))+((r02*x664))+((cj1*r20*x668))+((cj1*r21*x666))+((r22*x665))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x666))+((r20*x669))+(((-1.0)*r00*x667*x668))+(((-1.0)*r01*x666*x667))+(((-1.0)*r02*x665))+((r22*x664))), (((r00*x669))+((r01*sj1*x666))+((r02*x664))+((cj1*r20*x668))+((cj1*r21*x666))+((r22*x665))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x670=IKcos(j2);
IkReal x671=IKsin(j2);
IkReal x672=(cj3*sj4);
IkReal x673=((1.0)*cj5);
IkReal x674=((1.0)*cj4);
IkReal x675=(cj3*cj4);
IkReal x676=(r21*sj5);
IkReal x677=(cj3*sj5);
IkReal x678=((0.03868)*cj5);
IkReal x679=(r01*sj5);
IkReal x680=(sj1*x670);
IkReal x681=(cj1*x670);
IkReal x682=((1.0)*sj4*sj5);
IkReal x683=(sj1*x671);
IkReal x684=(cj1*x671);
IkReal x685=((1.0)*x684);
evalcond[0]=((((-1.0)*r22*x674))+x683+x681+(((-1.0)*r20*x682))+(((-1.0)*r21*sj4*x673)));
evalcond[1]=((((-1.0)*r02*x674))+(((-1.0)*x685))+(((-1.0)*r00*x682))+x680+(((-1.0)*r01*sj4*x673)));
evalcond[2]=((((-0.39225)*x683))+(((-0.39225)*x681))+(((0.03868)*x676))+(((-1.0)*r20*x678))+(((-1.0)*pz))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x680))+(((0.03868)*x679))+(((-1.0)*px))+(((0.39225)*x684))+(((-0.425001)*sj1))+(((-1.0)*r00*x678)));
evalcond[4]=((((-1.0)*x685))+(((-1.0)*r21*x673*x675))+((r22*x672))+((sj3*x676))+(((-1.0)*r20*sj3*x673))+x680+(((-1.0)*r20*x674*x677)));
evalcond[5]=(((r02*x672))+(((-1.0)*r00*x674*x677))+((sj3*x679))+(((-1.0)*r00*sj3*x673))+(((-1.0)*r01*x673*x675))+(((-1.0)*x681))+(((-1.0)*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x686=((1.0)*r00);
CheckValue<IkReal> x687 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x686)))),IkReal(((((-1.0)*cj4*sj5*x686))+(((-1.0)*cj4*cj5*r01))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x687.valid){
continue;
}
CheckValue<IkReal> x688=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x688.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x687.value)+(((1.5707963267949)*(x688.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x689=IKsin(j3);
IkReal x690=IKcos(j3);
IkReal x691=(cj4*cj5);
IkReal x692=(r12*sj4);
IkReal x693=(cj5*r10);
IkReal x694=((1.0)*x690);
IkReal x695=(r11*x689);
IkReal x696=((1.0)*x689);
IkReal x697=(sj5*x690);
IkReal x698=(cj4*sj5*x689);
evalcond[0]=(((r20*x698))+((r21*x689*x691))+(((-1.0)*cj5*r20*x694))+((r21*x697))+(((-1.0)*r22*sj4*x696)));
evalcond[1]=((((-1.0)*cj5*r00*x694))+(((-1.0)*r02*sj4*x696))+((r01*x689*x691))+((r00*x698))+((r01*x697)));
evalcond[2]=((1.0)+(((-1.0)*x693*x694))+((x691*x695))+(((-1.0)*x692*x696))+((r10*x698))+((r11*x697)));
evalcond[3]=((((-1.0)*cj4*r10*sj5*x694))+((x690*x692))+(((-1.0)*x693*x696))+((sj5*x695))+(((-1.0)*r11*x691*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x699=((0.9229390048494)*cj4);
IkReal x700=((0.9229390048494)*sj4);
IkReal x701=((0.0910115505610575)*cj5);
IkReal x702=((0.0910115505610575)*sj5);
if( IKabs((((r01*x702))+(((-1.0)*r00*sj5*x700))+(((-1.0)*r02*x699))+(((-1.0)*cj5*r01*x700))+(((-1.0)*r00*x701))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x700))+(((-1.0)*r20*x701))+((r21*x702))+(((-1.0)*r22*x699))+(((-2.35293564015143)*pz))+(((-1.0)*r20*sj5*x700)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x702))+(((-1.0)*r00*sj5*x700))+(((-1.0)*r02*x699))+(((-1.0)*cj5*r01*x700))+(((-1.0)*r00*x701))+(((-2.35293564015143)*px))))+IKsqr(((((-1.0)*cj5*r21*x700))+(((-1.0)*r20*x701))+((r21*x702))+(((-1.0)*r22*x699))+(((-2.35293564015143)*pz))+(((-1.0)*r20*sj5*x700))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x702))+(((-1.0)*r00*sj5*x700))+(((-1.0)*r02*x699))+(((-1.0)*cj5*r01*x700))+(((-1.0)*r00*x701))+(((-2.35293564015143)*px))), ((((-1.0)*cj5*r21*x700))+(((-1.0)*r20*x701))+((r21*x702))+(((-1.0)*r22*x699))+(((-2.35293564015143)*pz))+(((-1.0)*r20*sj5*x700))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x703=((0.39225)*sj3);
IkReal x704=(cj5*r00);
IkReal x705=((0.39225)*cj4);
IkReal x706=(r01*sj5);
IkReal x707=(r21*sj5);
IkReal x708=(cj5*r20);
IkReal x709=((0.39225)*sj4);
IkReal x710=(r20*sj5);
IkReal x711=(r00*sj5);
IkReal x712=(cj5*r01);
IkReal x713=(cj5*r21);
IkReal x714=((0.425001)*(IKcos(j1)));
IkReal x715=((0.03868)*x708);
IkReal x716=((0.03868)*x707);
IkReal x717=((0.03868)*x706);
IkReal x718=((0.425001)*(IKsin(j1)));
IkReal x719=((0.03868)*x704);
IkReal x720=(x719+x718);
IkReal x721=(pz+x715+x714);
evalcond[0]=(((x709*x711))+((x709*x712))+(((-1.0)*x717))+px+x720+((r02*x705)));
evalcond[1]=(((r22*x705))+((x709*x710))+((x709*x713))+(((-1.0)*x716))+x721);
evalcond[2]=((((-1.0)*cj3*x705*x711))+(((-1.0)*cj3*x705*x712))+((x703*x706))+(((-1.0)*x703*x704))+((cj3*r02*x709))+(((-1.0)*x716))+x721);
evalcond[3]=((((-1.0)*cj3*x705*x710))+(((-1.0)*cj3*x705*x713))+((x703*x707))+(((-1.0)*x703*x708))+((cj3*r22*x709))+(((-1.0)*x720))+(((-1.0)*px))+x717);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x722=(cj4*sj1);
IkReal x723=(cj1*cj4);
IkReal x724=(cj5*sj4);
IkReal x725=((1.0)*cj1);
IkReal x726=(sj4*sj5);
IkReal x727=(sj1*x726);
if( IKabs(((((-1.0)*r01*x724*x725))+(((-1.0)*r00*x725*x726))+((r21*sj1*x724))+((r20*x727))+(((-1.0)*r02*x723))+((r22*x722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x727))+((r02*x722))+((cj1*r20*x726))+((r22*x723))+((cj1*r21*x724))+((r01*sj1*x724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x724*x725))+(((-1.0)*r00*x725*x726))+((r21*sj1*x724))+((r20*x727))+(((-1.0)*r02*x723))+((r22*x722))))+IKsqr((((r00*x727))+((r02*x722))+((cj1*r20*x726))+((r22*x723))+((cj1*r21*x724))+((r01*sj1*x724))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x724*x725))+(((-1.0)*r00*x725*x726))+((r21*sj1*x724))+((r20*x727))+(((-1.0)*r02*x723))+((r22*x722))), (((r00*x727))+((r02*x722))+((cj1*r20*x726))+((r22*x723))+((cj1*r21*x724))+((r01*sj1*x724))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x728=IKcos(j2);
IkReal x729=IKsin(j2);
IkReal x730=(cj3*sj4);
IkReal x731=((1.0)*cj5);
IkReal x732=((1.0)*cj4);
IkReal x733=(cj3*cj4);
IkReal x734=(r21*sj5);
IkReal x735=(cj3*sj5);
IkReal x736=((0.03868)*cj5);
IkReal x737=(r01*sj5);
IkReal x738=(sj1*x728);
IkReal x739=(cj1*x728);
IkReal x740=((1.0)*sj4*sj5);
IkReal x741=(sj1*x729);
IkReal x742=(cj1*x729);
IkReal x743=((1.0)*x742);
evalcond[0]=((((-1.0)*r21*sj4*x731))+(((-1.0)*r20*x740))+x739+x741+(((-1.0)*r22*x732)));
evalcond[1]=((((-1.0)*r01*sj4*x731))+(((-1.0)*r02*x732))+(((-1.0)*r00*x740))+x738+(((-1.0)*x743)));
evalcond[2]=((((0.03868)*x734))+(((-0.39225)*x739))+(((-1.0)*pz))+(((-1.0)*r20*x736))+(((-0.39225)*x741))+(((-0.425001)*cj1)));
evalcond[3]=((((0.03868)*x737))+(((-0.39225)*x738))+(((-1.0)*px))+(((-0.425001)*sj1))+(((0.39225)*x742))+(((-1.0)*r00*x736)));
evalcond[4]=((((-1.0)*r20*x732*x735))+((sj3*x734))+(((-1.0)*r21*x731*x733))+x738+((r22*x730))+(((-1.0)*x743))+(((-1.0)*r20*sj3*x731)));
evalcond[5]=((((-1.0)*r00*x732*x735))+((sj3*x737))+(((-1.0)*r00*sj3*x731))+(((-1.0)*r01*x731*x733))+(((-1.0)*x739))+(((-1.0)*x741))+((r02*x730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x744=((1.0)*r20);
IkReal x745=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x745;
j3eval[1]=IKsign(x745);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x744)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x744))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x746=((1.0)*sj4);
IkReal x747=((1.0)*cj4);
IkReal x748=((((-1.0)*r22*x747))+(((-1.0)*cj5*r21*x746))+(((-1.0)*r20*sj5*x746)));
j3eval[0]=x748;
j3eval[1]=((IKabs(((((-1.0)*r00*sj5*x747))+(((-1.0)*cj5*r01*x747))+((r02*sj4)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x748);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x749=cj4*cj4;
IkReal x750=cj5*cj5;
IkReal x751=r10*r10;
IkReal x752=r11*r11;
IkReal x753=r12*r12;
IkReal x754=(cj5*r10);
IkReal x755=((1.0)*x749);
IkReal x756=(cj4*r10*sj5);
IkReal x757=((2.0)*r12*sj4);
IkReal x758=((2.0)*r11*sj5);
IkReal x759=(cj4*cj5*r11);
IkReal x760=(x750*x752);
IkReal x761=(x750*x751);
IkReal x762=(((x756*x757))+(((-1.0)*x755*x760))+(((-1.0)*x749*x754*x758))+(((-1.0)*x751*x755))+(((-1.0)*x761))+(((-1.0)*x752))+(((-1.0)*x753))+x760+((x749*x753))+((x757*x759))+((x749*x761))+((x754*x758)));
j3eval[0]=x762;
j3eval[1]=IKsign(x762);
j3eval[2]=((IKabs(((((-1.0)*r11*sj5))+x754)))+(IKabs((((r12*sj4))+(((-1.0)*x759))+(((-1.0)*x756))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x763=cj4*cj4;
IkReal x764=cj5*cj5;
IkReal x765=r10*r10;
IkReal x766=r11*r11;
IkReal x767=r12*r12;
IkReal x768=(cj5*r11);
IkReal x769=(r10*sj5);
IkReal x770=((1.0)*cj4);
IkReal x771=((1.0)*x763);
IkReal x772=(x764*x766);
IkReal x773=((2.0)*cj4*r12*sj4);
IkReal x774=(x764*x765);
CheckValue<IkReal> x775 = IKatan2WithCheck(IkReal(((((-1.0)*x768*x770))+(((-1.0)*x769*x770))+((r12*sj4)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x775.valid){
continue;
}
CheckValue<IkReal> x776=IKPowWithIntegerCheck(IKsign(((((-2.0)*x763*x768*x769))+((x769*x773))+((x763*x767))+(((-1.0)*x771*x772))+(((-1.0)*x766))+(((-1.0)*x767))+(((2.0)*x768*x769))+(((-1.0)*x765*x771))+((x763*x774))+x772+(((-1.0)*x774))+((x768*x773)))),-1);
if(!x776.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x775.value)+(((1.5707963267949)*(x776.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x777=IKsin(j3);
IkReal x778=IKcos(j3);
IkReal x779=(cj4*cj5);
IkReal x780=(r12*sj4);
IkReal x781=(cj5*r10);
IkReal x782=((1.0)*x778);
IkReal x783=(r11*x777);
IkReal x784=((1.0)*x777);
IkReal x785=(sj5*x778);
IkReal x786=(cj4*sj5*x777);
evalcond[0]=((((-1.0)*cj5*r20*x782))+((r20*x786))+((r21*x785))+(((-1.0)*r22*sj4*x784))+((r21*x777*x779)));
evalcond[1]=(((r00*x786))+((r01*x785))+(((-1.0)*r02*sj4*x784))+((r01*x777*x779))+(((-1.0)*cj5*r00*x782)));
evalcond[2]=((-1.0)+((r10*x786))+(((-1.0)*x781*x782))+((x779*x783))+((r11*x785))+(((-1.0)*x780*x784)));
evalcond[3]=(((sj5*x783))+(((-1.0)*r11*x779*x782))+(((-1.0)*x781*x784))+((x778*x780))+(((-1.0)*cj4*r10*sj5*x782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x787=((0.9229390048494)*cj4);
IkReal x788=((0.9229390048494)*sj4);
IkReal x789=((0.0910115505610575)*cj5);
IkReal x790=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((r00*x789))+((r00*sj5*x788))+(((-1.0)*r01*x790))+((r02*x787))+((cj5*r01*x788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x788))+((r21*x790))+(((-1.0)*r20*x789))+(((-1.0)*r22*x787))+(((-1.0)*cj5*r21*x788))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((r00*x789))+((r00*sj5*x788))+(((-1.0)*r01*x790))+((r02*x787))+((cj5*r01*x788))))+IKsqr(((((-1.0)*r20*sj5*x788))+((r21*x790))+(((-1.0)*r20*x789))+(((-1.0)*r22*x787))+(((-1.0)*cj5*r21*x788))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((r00*x789))+((r00*sj5*x788))+(((-1.0)*r01*x790))+((r02*x787))+((cj5*r01*x788))), ((((-1.0)*r20*sj5*x788))+((r21*x790))+(((-1.0)*r20*x789))+(((-1.0)*r22*x787))+(((-1.0)*cj5*r21*x788))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x791=((1.0)*px);
IkReal x792=((0.39225)*sj3);
IkReal x793=(cj5*r00);
IkReal x794=((0.39225)*cj4);
IkReal x795=(r01*sj5);
IkReal x796=(r21*sj5);
IkReal x797=(cj5*r20);
IkReal x798=((0.39225)*sj4);
IkReal x799=(r20*sj5);
IkReal x800=(r00*sj5);
IkReal x801=(cj5*r01);
IkReal x802=(cj5*r21);
IkReal x803=((0.425001)*(IKsin(j1)));
IkReal x804=((0.03868)*x795);
IkReal x805=((0.03868)*x793);
IkReal x806=((0.03868)*x796);
IkReal x807=((0.425001)*(IKcos(j1)));
IkReal x808=((0.03868)*x797);
IkReal x809=(x791+x805);
IkReal x810=(x808+x807);
IkReal x811=(x804+x803);
evalcond[0]=(((x798*x802))+pz+((r22*x794))+((x798*x799))+x810+(((-1.0)*x806)));
evalcond[1]=((((-1.0)*x798*x800))+(((-1.0)*x798*x801))+x811+(((-1.0)*x809))+(((-1.0)*r02*x794)));
evalcond[2]=((((-1.0)*x792*x796))+((cj3*x794*x799))+(((-1.0)*cj3*r22*x798))+((x792*x797))+((cj3*x794*x802))+x811+(((-1.0)*x809)));
evalcond[3]=((((-1.0)*x792*x793))+(((-1.0)*x810))+(((-1.0)*pz))+(((-1.0)*cj3*x794*x800))+(((-1.0)*cj3*x794*x801))+((x792*x795))+((cj3*r02*x798))+x806);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x812=(cj4*r22);
IkReal x813=((1.0)*sj1);
IkReal x814=(cj5*sj4);
IkReal x815=(cj4*r02);
IkReal x816=(sj4*sj5);
if( IKabs((((cj1*r00*x816))+((sj1*x812))+((r20*sj1*x816))+((cj1*x815))+((r21*sj1*x814))+((cj1*r01*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x813*x816))+((cj1*r21*x814))+((cj1*r20*x816))+(((-1.0)*x813*x815))+((cj1*x812))+(((-1.0)*r01*x813*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r00*x816))+((sj1*x812))+((r20*sj1*x816))+((cj1*x815))+((r21*sj1*x814))+((cj1*r01*x814))))+IKsqr(((((-1.0)*r00*x813*x816))+((cj1*r21*x814))+((cj1*r20*x816))+(((-1.0)*x813*x815))+((cj1*x812))+(((-1.0)*r01*x813*x814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r00*x816))+((sj1*x812))+((r20*sj1*x816))+((cj1*x815))+((r21*sj1*x814))+((cj1*r01*x814))), ((((-1.0)*r00*x813*x816))+((cj1*r21*x814))+((cj1*r20*x816))+(((-1.0)*x813*x815))+((cj1*x812))+(((-1.0)*r01*x813*x814))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x817=IKsin(j2);
IkReal x818=IKcos(j2);
IkReal x819=(cj3*sj4);
IkReal x820=((1.0)*cj5);
IkReal x821=(cj3*cj4);
IkReal x822=(r21*sj5);
IkReal x823=((0.03868)*cj5);
IkReal x824=((1.0)*cj4);
IkReal x825=(r01*sj5);
IkReal x826=(cj1*x818);
IkReal x827=(sj1*x817);
IkReal x828=(cj1*x817);
IkReal x829=(sj1*x818);
IkReal x830=((1.0)*r20*sj5);
IkReal x831=((1.0)*r00*sj5);
IkReal x832=(x827+x826);
evalcond[0]=((((-1.0)*r21*sj4*x820))+(((-1.0)*r22*x824))+x832+(((-1.0)*sj4*x830)));
evalcond[1]=((((-1.0)*r02*x824))+(((-1.0)*x829))+(((-1.0)*r01*sj4*x820))+x828+(((-1.0)*sj4*x831)));
evalcond[2]=((((-1.0)*r20*x823))+(((-0.39225)*x826))+(((-0.39225)*x827))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((0.03868)*x822)));
evalcond[3]=((((-0.39225)*x828))+(((0.39225)*x829))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x825))+(((-1.0)*r00*x823)));
evalcond[4]=((((-1.0)*x821*x831))+(((-1.0)*r01*x820*x821))+((sj3*x825))+(((-1.0)*r00*sj3*x820))+x832+((r02*x819)));
evalcond[5]=((((-1.0)*x821*x830))+((sj3*x822))+(((-1.0)*r21*x820*x821))+(((-1.0)*r20*sj3*x820))+(((-1.0)*x828))+x829+((r22*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x833=((1.0)*sj4);
IkReal x834=((1.0)*cj4);
CheckValue<IkReal> x835 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x834))+((r02*sj4))+(((-1.0)*cj5*r01*x834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x833))+(((-1.0)*cj5*r21*x833))+(((-1.0)*r22*x834)))),-1);
if(!x836.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x835.value)+(((1.5707963267949)*(x836.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x837=IKsin(j3);
IkReal x838=IKcos(j3);
IkReal x839=(cj4*cj5);
IkReal x840=(r12*sj4);
IkReal x841=(cj5*r10);
IkReal x842=((1.0)*x838);
IkReal x843=(r11*x837);
IkReal x844=((1.0)*x837);
IkReal x845=(sj5*x838);
IkReal x846=(cj4*sj5*x837);
evalcond[0]=((((-1.0)*r22*sj4*x844))+((r20*x846))+((r21*x845))+((r21*x837*x839))+(((-1.0)*cj5*r20*x842)));
evalcond[1]=(((r01*x845))+((r00*x846))+(((-1.0)*r02*sj4*x844))+(((-1.0)*cj5*r00*x842))+((r01*x837*x839)));
evalcond[2]=((-1.0)+(((-1.0)*x841*x842))+((x839*x843))+(((-1.0)*x840*x844))+((r10*x846))+((r11*x845)));
evalcond[3]=(((x838*x840))+(((-1.0)*x841*x844))+((sj5*x843))+(((-1.0)*cj4*r10*sj5*x842))+(((-1.0)*r11*x839*x842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x847=((0.9229390048494)*cj4);
IkReal x848=((0.9229390048494)*sj4);
IkReal x849=((0.0910115505610575)*cj5);
IkReal x850=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+(((-1.0)*r01*x850))+((r02*x847))+((cj5*r01*x848))+((r00*x849))+((r00*sj5*x848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x850))+(((-1.0)*r20*x849))+(((-1.0)*r20*sj5*x848))+(((-1.0)*cj5*r21*x848))+(((-1.0)*r22*x847))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+(((-1.0)*r01*x850))+((r02*x847))+((cj5*r01*x848))+((r00*x849))+((r00*sj5*x848))))+IKsqr((((r21*x850))+(((-1.0)*r20*x849))+(((-1.0)*r20*sj5*x848))+(((-1.0)*cj5*r21*x848))+(((-1.0)*r22*x847))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+(((-1.0)*r01*x850))+((r02*x847))+((cj5*r01*x848))+((r00*x849))+((r00*sj5*x848))), (((r21*x850))+(((-1.0)*r20*x849))+(((-1.0)*r20*sj5*x848))+(((-1.0)*cj5*r21*x848))+(((-1.0)*r22*x847))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x851=((1.0)*px);
IkReal x852=((0.39225)*sj3);
IkReal x853=(cj5*r00);
IkReal x854=((0.39225)*cj4);
IkReal x855=(r01*sj5);
IkReal x856=(r21*sj5);
IkReal x857=(cj5*r20);
IkReal x858=((0.39225)*sj4);
IkReal x859=(r20*sj5);
IkReal x860=(r00*sj5);
IkReal x861=(cj5*r01);
IkReal x862=(cj5*r21);
IkReal x863=((0.425001)*(IKsin(j1)));
IkReal x864=((0.03868)*x855);
IkReal x865=((0.03868)*x853);
IkReal x866=((0.03868)*x856);
IkReal x867=((0.425001)*(IKcos(j1)));
IkReal x868=((0.03868)*x857);
IkReal x869=(x851+x865);
IkReal x870=(x868+x867);
IkReal x871=(x864+x863);
evalcond[0]=((((-1.0)*x866))+((x858*x859))+((x858*x862))+((r22*x854))+pz+x870);
evalcond[1]=((((-1.0)*x869))+(((-1.0)*r02*x854))+(((-1.0)*x858*x860))+(((-1.0)*x858*x861))+x871);
evalcond[2]=((((-1.0)*x869))+(((-1.0)*x852*x856))+((cj3*x854*x859))+((cj3*x854*x862))+((x852*x857))+(((-1.0)*cj3*r22*x858))+x871);
evalcond[3]=((((-1.0)*x852*x853))+(((-1.0)*pz))+((x852*x855))+x866+(((-1.0)*cj3*x854*x860))+(((-1.0)*cj3*x854*x861))+((cj3*r02*x858))+(((-1.0)*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x872=(cj4*r22);
IkReal x873=((1.0)*sj1);
IkReal x874=(cj5*sj4);
IkReal x875=(cj4*r02);
IkReal x876=(sj4*sj5);
if( IKabs((((cj1*r00*x876))+((cj1*r01*x874))+((sj1*x872))+((cj1*x875))+((r20*sj1*x876))+((r21*sj1*x874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x873*x875))+((cj1*r20*x876))+((cj1*r21*x874))+((cj1*x872))+(((-1.0)*r00*x873*x876))+(((-1.0)*r01*x873*x874)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r00*x876))+((cj1*r01*x874))+((sj1*x872))+((cj1*x875))+((r20*sj1*x876))+((r21*sj1*x874))))+IKsqr(((((-1.0)*x873*x875))+((cj1*r20*x876))+((cj1*r21*x874))+((cj1*x872))+(((-1.0)*r00*x873*x876))+(((-1.0)*r01*x873*x874))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r00*x876))+((cj1*r01*x874))+((sj1*x872))+((cj1*x875))+((r20*sj1*x876))+((r21*sj1*x874))), ((((-1.0)*x873*x875))+((cj1*r20*x876))+((cj1*r21*x874))+((cj1*x872))+(((-1.0)*r00*x873*x876))+(((-1.0)*r01*x873*x874))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x877=IKsin(j2);
IkReal x878=IKcos(j2);
IkReal x879=(cj3*sj4);
IkReal x880=((1.0)*cj5);
IkReal x881=(cj3*cj4);
IkReal x882=(r21*sj5);
IkReal x883=((0.03868)*cj5);
IkReal x884=((1.0)*cj4);
IkReal x885=(r01*sj5);
IkReal x886=(cj1*x878);
IkReal x887=(sj1*x877);
IkReal x888=(cj1*x877);
IkReal x889=(sj1*x878);
IkReal x890=((1.0)*r20*sj5);
IkReal x891=((1.0)*r00*sj5);
IkReal x892=(x887+x886);
evalcond[0]=((((-1.0)*r21*sj4*x880))+(((-1.0)*sj4*x890))+x892+(((-1.0)*r22*x884)));
evalcond[1]=((((-1.0)*x889))+(((-1.0)*sj4*x891))+(((-1.0)*r01*sj4*x880))+x888+(((-1.0)*r02*x884)));
evalcond[2]=((((-0.39225)*x886))+(((-0.39225)*x887))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-1.0)*r20*x883))+(((0.03868)*x882)));
evalcond[3]=((((-0.39225)*x888))+(((0.39225)*x889))+(((-1.0)*px))+(((0.425001)*sj1))+(((-1.0)*r00*x883))+(((0.03868)*x885)));
evalcond[4]=((((-1.0)*r01*x880*x881))+(((-1.0)*x881*x891))+((sj3*x885))+((r02*x879))+(((-1.0)*r00*sj3*x880))+x892);
evalcond[5]=((((-1.0)*x881*x890))+(((-1.0)*x888))+(((-1.0)*r21*x880*x881))+((r22*x879))+((sj3*x882))+(((-1.0)*r20*sj3*x880))+x889);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x893=((1.0)*r20);
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x893)))),IkReal(((((-1.0)*cj4*sj5*x893))+((r22*sj4))+(((-1.0)*cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
CheckValue<IkReal> x895=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x895.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x894.value)+(((1.5707963267949)*(x895.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x896=IKsin(j3);
IkReal x897=IKcos(j3);
IkReal x898=(cj4*cj5);
IkReal x899=(r12*sj4);
IkReal x900=(cj5*r10);
IkReal x901=((1.0)*x897);
IkReal x902=(r11*x896);
IkReal x903=((1.0)*x896);
IkReal x904=(sj5*x897);
IkReal x905=(cj4*sj5*x896);
evalcond[0]=(((r21*x904))+((r20*x905))+((r21*x896*x898))+(((-1.0)*cj5*r20*x901))+(((-1.0)*r22*sj4*x903)));
evalcond[1]=(((r00*x905))+((r01*x904))+(((-1.0)*r02*sj4*x903))+(((-1.0)*cj5*r00*x901))+((r01*x896*x898)));
evalcond[2]=((-1.0)+(((-1.0)*x900*x901))+((r11*x904))+((r10*x905))+((x898*x902))+(((-1.0)*x899*x903)));
evalcond[3]=((((-1.0)*x900*x903))+(((-1.0)*r11*x898*x901))+((sj5*x902))+(((-1.0)*cj4*r10*sj5*x901))+((x897*x899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x906=((0.9229390048494)*cj4);
IkReal x907=((0.9229390048494)*sj4);
IkReal x908=((0.0910115505610575)*cj5);
IkReal x909=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((r00*x908))+((r02*x906))+(((-1.0)*r01*x909))+((cj5*r01*x907))+((r00*sj5*x907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x909))+(((-1.0)*r22*x906))+(((-1.0)*r20*sj5*x907))+(((-1.0)*r20*x908))+(((-1.0)*cj5*r21*x907))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((r00*x908))+((r02*x906))+(((-1.0)*r01*x909))+((cj5*r01*x907))+((r00*sj5*x907))))+IKsqr((((r21*x909))+(((-1.0)*r22*x906))+(((-1.0)*r20*sj5*x907))+(((-1.0)*r20*x908))+(((-1.0)*cj5*r21*x907))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((r00*x908))+((r02*x906))+(((-1.0)*r01*x909))+((cj5*r01*x907))+((r00*sj5*x907))), (((r21*x909))+(((-1.0)*r22*x906))+(((-1.0)*r20*sj5*x907))+(((-1.0)*r20*x908))+(((-1.0)*cj5*r21*x907))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x910=((1.0)*px);
IkReal x911=((0.39225)*sj3);
IkReal x912=(cj5*r00);
IkReal x913=((0.39225)*cj4);
IkReal x914=(r01*sj5);
IkReal x915=(r21*sj5);
IkReal x916=(cj5*r20);
IkReal x917=((0.39225)*sj4);
IkReal x918=(r20*sj5);
IkReal x919=(r00*sj5);
IkReal x920=(cj5*r01);
IkReal x921=(cj5*r21);
IkReal x922=((0.425001)*(IKsin(j1)));
IkReal x923=((0.03868)*x914);
IkReal x924=((0.03868)*x912);
IkReal x925=((0.03868)*x915);
IkReal x926=((0.425001)*(IKcos(j1)));
IkReal x927=((0.03868)*x916);
IkReal x928=(x924+x910);
IkReal x929=(x926+x927);
IkReal x930=(x922+x923);
evalcond[0]=((((-1.0)*x925))+((x917*x918))+pz+((x917*x921))+((r22*x913))+x929);
evalcond[1]=((((-1.0)*x928))+(((-1.0)*r02*x913))+x930+(((-1.0)*x917*x920))+(((-1.0)*x917*x919)));
evalcond[2]=((((-1.0)*x928))+((cj3*x913*x918))+((cj3*x913*x921))+((x911*x916))+(((-1.0)*cj3*r22*x917))+x930+(((-1.0)*x911*x915)));
evalcond[3]=((((-1.0)*x929))+(((-1.0)*cj3*x913*x920))+((x911*x914))+(((-1.0)*pz))+(((-1.0)*cj3*x913*x919))+((cj3*r02*x917))+x925+(((-1.0)*x911*x912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x931=(cj4*r22);
IkReal x932=((1.0)*sj1);
IkReal x933=(cj5*sj4);
IkReal x934=(cj4*r02);
IkReal x935=(sj4*sj5);
if( IKabs((((r20*sj1*x935))+((sj1*x931))+((cj1*r00*x935))+((cj1*r01*x933))+((cj1*x934))+((r21*sj1*x933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x932*x933))+((cj1*r20*x935))+((cj1*r21*x933))+(((-1.0)*x932*x934))+((cj1*x931))+(((-1.0)*r00*x932*x935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x935))+((sj1*x931))+((cj1*r00*x935))+((cj1*r01*x933))+((cj1*x934))+((r21*sj1*x933))))+IKsqr(((((-1.0)*r01*x932*x933))+((cj1*r20*x935))+((cj1*r21*x933))+(((-1.0)*x932*x934))+((cj1*x931))+(((-1.0)*r00*x932*x935))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x935))+((sj1*x931))+((cj1*r00*x935))+((cj1*r01*x933))+((cj1*x934))+((r21*sj1*x933))), ((((-1.0)*r01*x932*x933))+((cj1*r20*x935))+((cj1*r21*x933))+(((-1.0)*x932*x934))+((cj1*x931))+(((-1.0)*r00*x932*x935))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x936=IKsin(j2);
IkReal x937=IKcos(j2);
IkReal x938=(cj3*sj4);
IkReal x939=((1.0)*cj5);
IkReal x940=(cj3*cj4);
IkReal x941=(r21*sj5);
IkReal x942=((0.03868)*cj5);
IkReal x943=((1.0)*cj4);
IkReal x944=(r01*sj5);
IkReal x945=(cj1*x937);
IkReal x946=(sj1*x936);
IkReal x947=(cj1*x936);
IkReal x948=(sj1*x937);
IkReal x949=((1.0)*r20*sj5);
IkReal x950=((1.0)*r00*sj5);
IkReal x951=(x945+x946);
evalcond[0]=((((-1.0)*r21*sj4*x939))+(((-1.0)*sj4*x949))+(((-1.0)*r22*x943))+x951);
evalcond[1]=((((-1.0)*r02*x943))+(((-1.0)*r01*sj4*x939))+(((-1.0)*x948))+(((-1.0)*sj4*x950))+x947);
evalcond[2]=((((-1.0)*r20*x942))+(((-1.0)*pz))+(((0.03868)*x941))+(((-0.425001)*cj1))+(((-0.39225)*x946))+(((-0.39225)*x945)));
evalcond[3]=((((0.39225)*x948))+(((-1.0)*r00*x942))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x944))+(((-0.39225)*x947)));
evalcond[4]=(((sj3*x944))+(((-1.0)*x940*x950))+(((-1.0)*r01*x939*x940))+x951+(((-1.0)*r00*sj3*x939))+((r02*x938)));
evalcond[5]=((((-1.0)*r21*x939*x940))+((r22*x938))+((sj3*x941))+(((-1.0)*x947))+(((-1.0)*r20*sj3*x939))+x948+(((-1.0)*x940*x949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x952=((1.0)*sj4);
IkReal x953=(cj5*sj0);
IkReal x954=(cj0*sj5);
IkReal x955=(sj0*sj5);
IkReal x956=((1.0)*cj4);
IkReal x957=(cj0*cj5);
CheckValue<IkReal> x958 = IKatan2WithCheck(IkReal((((r00*x953))+((r11*x954))+(((-1.0)*r01*x955))+(((-1.0)*r10*x957)))),IkReal(((((-1.0)*r11*x956*x957))+((cj0*r12*sj4))+(((-1.0)*r02*sj0*x952))+((cj4*r01*x953))+((cj4*r00*x955))+(((-1.0)*r10*x954*x956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x958.valid){
continue;
}
CheckValue<IkReal> x959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x952))+(((-1.0)*r22*x956))+(((-1.0)*cj5*r21*x952)))),-1);
if(!x959.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x958.value)+(((1.5707963267949)*(x959.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x960=IKsin(j3);
IkReal x961=IKcos(j3);
IkReal x962=(sj5*x961);
IkReal x963=(cj4*cj5*x960);
IkReal x964=(cj4*sj5*x960);
IkReal x965=((1.0)*cj5*x961);
IkReal x966=((1.0)*sj4*x960);
evalcond[0]=((((-1.0)*r20*x965))+((r21*x963))+((r21*x962))+((r20*x964))+(((-1.0)*r22*x966)));
evalcond[1]=(cj0+(((-1.0)*r00*x965))+((r00*x964))+((r01*x963))+((r01*x962))+(((-1.0)*r02*x966)));
evalcond[2]=(sj0+(((-1.0)*r10*x965))+((r11*x962))+((r11*x963))+(((-1.0)*r12*x966))+((r10*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x967=((0.9229390048494)*cj4);
IkReal x968=((0.9229390048494)*sj4);
IkReal x969=((0.0910115505610575)*cj5);
IkReal x970=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r00*sj5*x968))+(((-1.0)*cj5*r01*x968))+(((-1.0)*r00*x969))+((r01*x970))+(((-2.35293564015143)*px))+(((-1.0)*r02*x967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x969))+(((-1.0)*r20*sj5*x968))+((r21*x970))+(((-1.0)*cj5*r21*x968))+(((-1.0)*r22*x967))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj5*x968))+(((-1.0)*cj5*r01*x968))+(((-1.0)*r00*x969))+((r01*x970))+(((-2.35293564015143)*px))+(((-1.0)*r02*x967))))+IKsqr(((((-1.0)*r20*x969))+(((-1.0)*r20*sj5*x968))+((r21*x970))+(((-1.0)*cj5*r21*x968))+(((-1.0)*r22*x967))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*sj5*x968))+(((-1.0)*cj5*r01*x968))+(((-1.0)*r00*x969))+((r01*x970))+(((-2.35293564015143)*px))+(((-1.0)*r02*x967))), ((((-1.0)*r20*x969))+(((-1.0)*r20*sj5*x968))+((r21*x970))+(((-1.0)*cj5*r21*x968))+(((-1.0)*r22*x967))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x971=((0.39225)*sj3);
IkReal x972=(cj5*r00);
IkReal x973=((0.39225)*cj4);
IkReal x974=(r01*sj5);
IkReal x975=(r21*sj5);
IkReal x976=(cj5*r20);
IkReal x977=((0.39225)*sj4);
IkReal x978=(r20*sj5);
IkReal x979=(r00*sj5);
IkReal x980=(cj5*r01);
IkReal x981=(cj5*r21);
IkReal x982=((0.425001)*(IKcos(j1)));
IkReal x983=((0.03868)*x976);
IkReal x984=((0.03868)*x975);
IkReal x985=((0.03868)*x974);
IkReal x986=((0.425001)*(IKsin(j1)));
IkReal x987=((0.03868)*x972);
IkReal x988=(x986+x987);
IkReal x989=(pz+x982+x983);
evalcond[0]=((((-1.0)*x985))+((x977*x979))+((x977*x980))+px+((r02*x973))+x988);
evalcond[1]=((((-1.0)*x984))+((r22*x973))+((x977*x978))+((x977*x981))+x989);
evalcond[2]=((((-1.0)*x984))+((cj3*r02*x977))+(((-1.0)*x971*x972))+(((-1.0)*cj3*x973*x980))+(((-1.0)*cj3*x973*x979))+((x971*x974))+x989);
evalcond[3]=((((-1.0)*x988))+(((-1.0)*x971*x976))+(((-1.0)*cj3*x973*x981))+(((-1.0)*px))+(((-1.0)*cj3*x973*x978))+((x971*x975))+((cj3*r22*x977))+x985);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x990=(cj4*sj1);
IkReal x991=(cj1*cj4);
IkReal x992=(cj5*sj4);
IkReal x993=((1.0)*cj1);
IkReal x994=(sj4*sj5);
IkReal x995=(sj1*x994);
if( IKabs((((r21*sj1*x992))+((r20*x995))+(((-1.0)*r02*x991))+((r22*x990))+(((-1.0)*r01*x992*x993))+(((-1.0)*r00*x993*x994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x992))+((cj1*r20*x994))+((r00*x995))+((cj1*r21*x992))+((r02*x990))+((r22*x991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x992))+((r20*x995))+(((-1.0)*r02*x991))+((r22*x990))+(((-1.0)*r01*x992*x993))+(((-1.0)*r00*x993*x994))))+IKsqr((((r01*sj1*x992))+((cj1*r20*x994))+((r00*x995))+((cj1*r21*x992))+((r02*x990))+((r22*x991))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x992))+((r20*x995))+(((-1.0)*r02*x991))+((r22*x990))+(((-1.0)*r01*x992*x993))+(((-1.0)*r00*x993*x994))), (((r01*sj1*x992))+((cj1*r20*x994))+((r00*x995))+((cj1*r21*x992))+((r02*x990))+((r22*x991))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x996=IKcos(j2);
IkReal x997=IKsin(j2);
IkReal x998=(cj3*sj4);
IkReal x999=((1.0)*cj5);
IkReal x1000=((1.0)*cj4);
IkReal x1001=(cj3*cj4);
IkReal x1002=(r21*sj5);
IkReal x1003=(cj3*sj5);
IkReal x1004=((0.03868)*cj5);
IkReal x1005=(r01*sj5);
IkReal x1006=(sj1*x996);
IkReal x1007=(cj1*x996);
IkReal x1008=((1.0)*sj4*sj5);
IkReal x1009=(sj1*x997);
IkReal x1010=(cj1*x997);
IkReal x1011=((1.0)*x1010);
evalcond[0]=((((-1.0)*r21*sj4*x999))+x1009+x1007+(((-1.0)*r20*x1008))+(((-1.0)*r22*x1000)));
evalcond[1]=((((-1.0)*r01*sj4*x999))+x1006+(((-1.0)*x1011))+(((-1.0)*r02*x1000))+(((-1.0)*r00*x1008)));
evalcond[2]=((((-0.39225)*x1007))+(((-0.39225)*x1009))+(((-1.0)*r20*x1004))+(((-1.0)*pz))+(((0.03868)*x1002))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x1006))+(((0.39225)*x1010))+(((-1.0)*px))+(((0.03868)*x1005))+(((-0.425001)*sj1))+(((-1.0)*r00*x1004)));
evalcond[4]=((((-1.0)*r21*x1001*x999))+x1006+(((-1.0)*x1011))+((sj3*x1002))+(((-1.0)*r20*sj3*x999))+((r22*x998))+(((-1.0)*r20*x1000*x1003)));
evalcond[5]=((((-1.0)*x1009))+(((-1.0)*x1007))+(((-1.0)*r00*sj3*x999))+(((-1.0)*r01*x1001*x999))+((r02*x998))+((sj3*x1005))+(((-1.0)*r00*x1000*x1003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1012=((0.9229390048494)*cj4);
IkReal x1013=((0.9229390048494)*sj4);
IkReal x1014=((0.0910115505610575)*cj5);
IkReal x1015=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((cj5*r01*x1013))+((r00*sj5*x1013))+((r02*x1012))+(((-1.0)*r01*x1015))+((r00*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1012))+(((-1.0)*r20*x1014))+((r21*x1015))+(((-1.0)*cj5*r21*x1013))+(((-1.0)*r20*sj5*x1013))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((cj5*r01*x1013))+((r00*sj5*x1013))+((r02*x1012))+(((-1.0)*r01*x1015))+((r00*x1014))))+IKsqr(((((-1.0)*r22*x1012))+(((-1.0)*r20*x1014))+((r21*x1015))+(((-1.0)*cj5*r21*x1013))+(((-1.0)*r20*sj5*x1013))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((cj5*r01*x1013))+((r00*sj5*x1013))+((r02*x1012))+(((-1.0)*r01*x1015))+((r00*x1014))), ((((-1.0)*r22*x1012))+(((-1.0)*r20*x1014))+((r21*x1015))+(((-1.0)*cj5*r21*x1013))+(((-1.0)*r20*sj5*x1013))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1016=((1.0)*px);
IkReal x1017=((0.39225)*sj3);
IkReal x1018=(cj5*r00);
IkReal x1019=((0.39225)*cj4);
IkReal x1020=(r01*sj5);
IkReal x1021=(r21*sj5);
IkReal x1022=(cj5*r20);
IkReal x1023=((0.39225)*sj4);
IkReal x1024=(r20*sj5);
IkReal x1025=(r00*sj5);
IkReal x1026=(cj5*r01);
IkReal x1027=(cj5*r21);
IkReal x1028=((0.425001)*(IKsin(j1)));
IkReal x1029=((0.03868)*x1020);
IkReal x1030=((0.03868)*x1018);
IkReal x1031=((0.03868)*x1021);
IkReal x1032=((0.425001)*(IKcos(j1)));
IkReal x1033=((0.03868)*x1022);
IkReal x1034=(x1016+x1030);
IkReal x1035=(x1032+x1033);
IkReal x1036=(x1029+x1028);
evalcond[0]=((((-1.0)*x1031))+x1035+((r22*x1019))+((x1023*x1027))+((x1023*x1024))+pz);
evalcond[1]=((((-1.0)*x1034))+x1036+(((-1.0)*x1023*x1025))+(((-1.0)*x1023*x1026))+(((-1.0)*r02*x1019)));
evalcond[2]=(((x1017*x1022))+(((-1.0)*x1034))+x1036+(((-1.0)*cj3*r22*x1023))+((cj3*x1019*x1024))+((cj3*x1019*x1027))+(((-1.0)*x1017*x1021)));
evalcond[3]=(((x1017*x1020))+(((-1.0)*x1035))+x1031+(((-1.0)*x1017*x1018))+((cj3*r02*x1023))+(((-1.0)*pz))+(((-1.0)*cj3*x1019*x1026))+(((-1.0)*cj3*x1019*x1025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1037=(cj4*r22);
IkReal x1038=((1.0)*sj1);
IkReal x1039=(cj5*sj4);
IkReal x1040=(cj4*r02);
IkReal x1041=(sj4*sj5);
if( IKabs((((sj1*x1037))+((cj1*r01*x1039))+((cj1*x1040))+((r20*sj1*x1041))+((cj1*r00*x1041))+((r21*sj1*x1039)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1038*x1040))+((cj1*r20*x1041))+(((-1.0)*r00*x1038*x1041))+(((-1.0)*r01*x1038*x1039))+((cj1*x1037))+((cj1*r21*x1039)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1037))+((cj1*r01*x1039))+((cj1*x1040))+((r20*sj1*x1041))+((cj1*r00*x1041))+((r21*sj1*x1039))))+IKsqr(((((-1.0)*x1038*x1040))+((cj1*r20*x1041))+(((-1.0)*r00*x1038*x1041))+(((-1.0)*r01*x1038*x1039))+((cj1*x1037))+((cj1*r21*x1039))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1037))+((cj1*r01*x1039))+((cj1*x1040))+((r20*sj1*x1041))+((cj1*r00*x1041))+((r21*sj1*x1039))), ((((-1.0)*x1038*x1040))+((cj1*r20*x1041))+(((-1.0)*r00*x1038*x1041))+(((-1.0)*r01*x1038*x1039))+((cj1*x1037))+((cj1*r21*x1039))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1042=IKsin(j2);
IkReal x1043=IKcos(j2);
IkReal x1044=(cj3*sj4);
IkReal x1045=((1.0)*cj5);
IkReal x1046=(cj3*cj4);
IkReal x1047=(r21*sj5);
IkReal x1048=((0.03868)*cj5);
IkReal x1049=((1.0)*cj4);
IkReal x1050=(r01*sj5);
IkReal x1051=(cj1*x1043);
IkReal x1052=(sj1*x1042);
IkReal x1053=(cj1*x1042);
IkReal x1054=(sj1*x1043);
IkReal x1055=((1.0)*r20*sj5);
IkReal x1056=((1.0)*r00*sj5);
IkReal x1057=(x1051+x1052);
evalcond[0]=((((-1.0)*r21*sj4*x1045))+x1057+(((-1.0)*r22*x1049))+(((-1.0)*sj4*x1055)));
evalcond[1]=((((-1.0)*r02*x1049))+x1053+(((-1.0)*x1054))+(((-1.0)*sj4*x1056))+(((-1.0)*r01*sj4*x1045)));
evalcond[2]=((((0.03868)*x1047))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-0.39225)*x1051))+(((-0.39225)*x1052))+(((-1.0)*r20*x1048)));
evalcond[3]=((((0.03868)*x1050))+(((-1.0)*r00*x1048))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.39225)*x1054))+(((-0.39225)*x1053)));
evalcond[4]=(((r02*x1044))+(((-1.0)*x1046*x1056))+x1057+((sj3*x1050))+(((-1.0)*r00*sj3*x1045))+(((-1.0)*r01*x1045*x1046)));
evalcond[5]=((((-1.0)*x1046*x1055))+x1054+((sj3*x1047))+(((-1.0)*r20*sj3*x1045))+(((-1.0)*x1053))+(((-1.0)*r21*x1045*x1046))+((r22*x1044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1058=((0.9229390048494)*sj4);
IkReal x1059=((0.0910115505610575)*cj5);
IkReal x1060=((0.9229390048494)*cj4);
IkReal x1061=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+((r12*x1060))+((cj5*r11*x1058))+(((-1.0)*r11*x1061))+((r10*x1059))+((r10*sj5*x1058)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1060))+(((-1.0)*cj5*r21*x1058))+(((-1.0)*r20*sj5*x1058))+((r21*x1061))+(((-1.0)*r20*x1059))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+((r12*x1060))+((cj5*r11*x1058))+(((-1.0)*r11*x1061))+((r10*x1059))+((r10*sj5*x1058))))+IKsqr(((((-1.0)*r22*x1060))+(((-1.0)*cj5*r21*x1058))+(((-1.0)*r20*sj5*x1058))+((r21*x1061))+(((-1.0)*r20*x1059))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+((r12*x1060))+((cj5*r11*x1058))+(((-1.0)*r11*x1061))+((r10*x1059))+((r10*sj5*x1058))), ((((-1.0)*r22*x1060))+(((-1.0)*cj5*r21*x1058))+(((-1.0)*r20*sj5*x1058))+((r21*x1061))+(((-1.0)*r20*x1059))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1062=((1.0)*py);
IkReal x1063=((0.39225)*r10);
IkReal x1064=(sj4*sj5);
IkReal x1065=(cj5*sj3);
IkReal x1066=((0.39225)*r11);
IkReal x1067=(sj3*sj5);
IkReal x1068=(cj3*cj4);
IkReal x1069=((0.03868)*sj5);
IkReal x1070=((0.39225)*r21);
IkReal x1071=((0.03868)*cj5);
IkReal x1072=((0.39225)*cj4);
IkReal x1073=((0.39225)*r20);
IkReal x1074=(cj5*sj4);
IkReal x1075=(r11*x1069);
IkReal x1076=((0.425001)*(IKsin(j1)));
IkReal x1077=(r10*x1071);
IkReal x1078=(r21*x1069);
IkReal x1079=((0.425001)*(IKcos(j1)));
IkReal x1080=(r20*x1071);
IkReal x1081=((0.39225)*cj3*sj4);
IkReal x1082=(x1077+x1062);
IkReal x1083=(x1079+x1080);
IkReal x1084=(x1076+x1075);
evalcond[0]=(x1083+((x1070*x1074))+pz+((r22*x1072))+(((-1.0)*x1078))+((x1064*x1073)));
evalcond[1]=((((-1.0)*x1063*x1064))+x1084+(((-1.0)*r12*x1072))+(((-1.0)*x1066*x1074))+(((-1.0)*x1082)));
evalcond[2]=(x1084+((cj5*x1068*x1070))+(((-1.0)*x1067*x1070))+((sj5*x1068*x1073))+(((-1.0)*x1082))+(((-1.0)*r22*x1081))+((x1065*x1073)));
evalcond[3]=((((-1.0)*x1063*x1065))+(((-1.0)*sj5*x1063*x1068))+x1078+((r12*x1081))+((x1066*x1067))+(((-1.0)*pz))+(((-1.0)*cj5*x1066*x1068))+(((-1.0)*x1083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1085=(cj4*r12);
IkReal x1086=((1.0)*sj1);
IkReal x1087=(cj4*r22);
IkReal x1088=(sj4*sj5);
IkReal x1089=(cj5*sj4);
IkReal x1090=(cj1*x1089);
if( IKabs((((r20*sj1*x1088))+((cj1*x1085))+((r21*sj1*x1089))+((r11*x1090))+((sj1*x1087))+((cj1*r10*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1086*x1089))+(((-1.0)*r10*x1086*x1088))+((cj1*x1087))+((r21*x1090))+(((-1.0)*x1085*x1086))+((cj1*r20*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1088))+((cj1*x1085))+((r21*sj1*x1089))+((r11*x1090))+((sj1*x1087))+((cj1*r10*x1088))))+IKsqr(((((-1.0)*r11*x1086*x1089))+(((-1.0)*r10*x1086*x1088))+((cj1*x1087))+((r21*x1090))+(((-1.0)*x1085*x1086))+((cj1*r20*x1088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1088))+((cj1*x1085))+((r21*sj1*x1089))+((r11*x1090))+((sj1*x1087))+((cj1*r10*x1088))), ((((-1.0)*r11*x1086*x1089))+(((-1.0)*r10*x1086*x1088))+((cj1*x1087))+((r21*x1090))+(((-1.0)*x1085*x1086))+((cj1*r20*x1088))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1091=IKsin(j2);
IkReal x1092=IKcos(j2);
IkReal x1093=((1.0)*cj4);
IkReal x1094=(sj3*sj5);
IkReal x1095=((0.03868)*sj5);
IkReal x1096=(cj3*sj4);
IkReal x1097=(cj3*sj5);
IkReal x1098=((0.03868)*cj5);
IkReal x1099=(cj5*r21);
IkReal x1100=((1.0)*sj4);
IkReal x1101=(cj5*r11);
IkReal x1102=(cj1*x1092);
IkReal x1103=(sj1*x1091);
IkReal x1104=((1.0)*cj5*sj3);
IkReal x1105=(cj1*x1091);
IkReal x1106=(sj5*x1100);
IkReal x1107=(sj1*x1092);
IkReal x1108=(x1102+x1103);
evalcond[0]=(x1108+(((-1.0)*r20*x1106))+(((-1.0)*x1099*x1100))+(((-1.0)*r22*x1093)));
evalcond[1]=(x1105+(((-1.0)*x1107))+(((-1.0)*r12*x1093))+(((-1.0)*x1100*x1101))+(((-1.0)*r10*x1106)));
evalcond[2]=(((r21*x1095))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-1.0)*r20*x1098))+(((-0.39225)*x1102))+(((-0.39225)*x1103)));
evalcond[3]=((((0.39225)*x1107))+(((-1.0)*py))+(((0.425001)*sj1))+((r11*x1095))+(((-1.0)*r10*x1098))+(((-0.39225)*x1105)));
evalcond[4]=((((-1.0)*r10*x1093*x1097))+x1108+((r11*x1094))+((r12*x1096))+(((-1.0)*cj3*x1093*x1101))+(((-1.0)*r10*x1104)));
evalcond[5]=(x1107+((r21*x1094))+((r22*x1096))+(((-1.0)*x1105))+(((-1.0)*r20*x1093*x1097))+(((-1.0)*r20*x1104))+(((-1.0)*cj3*x1093*x1099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1109=((0.9229390048494)*sj4);
IkReal x1110=((0.0910115505610575)*cj5);
IkReal x1111=((0.9229390048494)*cj4);
IkReal x1112=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r12*x1111))+(((-1.0)*r10*sj5*x1109))+(((-1.0)*cj5*r11*x1109))+((r11*x1112))+(((-1.0)*r10*x1110))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1111))+(((-1.0)*r20*sj5*x1109))+(((-1.0)*r20*x1110))+((r21*x1112))+(((-1.0)*cj5*r21*x1109))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1111))+(((-1.0)*r10*sj5*x1109))+(((-1.0)*cj5*r11*x1109))+((r11*x1112))+(((-1.0)*r10*x1110))+(((-2.35293564015143)*py))))+IKsqr(((((-1.0)*r22*x1111))+(((-1.0)*r20*sj5*x1109))+(((-1.0)*r20*x1110))+((r21*x1112))+(((-1.0)*cj5*r21*x1109))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1111))+(((-1.0)*r10*sj5*x1109))+(((-1.0)*cj5*r11*x1109))+((r11*x1112))+(((-1.0)*r10*x1110))+(((-2.35293564015143)*py))), ((((-1.0)*r22*x1111))+(((-1.0)*r20*sj5*x1109))+(((-1.0)*r20*x1110))+((r21*x1112))+(((-1.0)*cj5*r21*x1109))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1113=((0.39225)*r10);
IkReal x1114=(sj4*sj5);
IkReal x1115=(cj5*sj3);
IkReal x1116=((0.39225)*r11);
IkReal x1117=(sj3*sj5);
IkReal x1118=(cj3*cj4);
IkReal x1119=((0.03868)*sj5);
IkReal x1120=((0.39225)*r21);
IkReal x1121=((0.03868)*cj5);
IkReal x1122=((0.39225)*cj4);
IkReal x1123=((0.39225)*r20);
IkReal x1124=(cj5*sj4);
IkReal x1125=((0.425001)*(IKcos(j1)));
IkReal x1126=(r20*x1121);
IkReal x1127=(r21*x1119);
IkReal x1128=(r11*x1119);
IkReal x1129=((0.425001)*(IKsin(j1)));
IkReal x1130=(r10*x1121);
IkReal x1131=((0.39225)*cj3*sj4);
IkReal x1132=(x1129+x1130);
IkReal x1133=(x1125+x1126+pz);
evalcond[0]=(x1132+((x1113*x1114))+py+(((-1.0)*x1128))+((r12*x1122))+((x1116*x1124)));
evalcond[1]=(x1133+((x1114*x1123))+((x1120*x1124))+((r22*x1122))+(((-1.0)*x1127)));
evalcond[2]=(x1133+(((-1.0)*sj5*x1113*x1118))+(((-1.0)*x1113*x1115))+(((-1.0)*cj5*x1116*x1118))+((x1116*x1117))+(((-1.0)*x1127))+((r12*x1131)));
evalcond[3]=((((-1.0)*sj5*x1118*x1123))+x1128+(((-1.0)*cj5*x1118*x1120))+(((-1.0)*py))+((r22*x1131))+(((-1.0)*x1132))+((x1117*x1120))+(((-1.0)*x1115*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1134=(cj5*sj4);
IkReal x1135=(cj1*cj4);
IkReal x1136=(cj4*sj1);
IkReal x1137=((1.0)*cj1);
IkReal x1138=(sj4*sj5);
if( IKabs((((r21*sj1*x1134))+(((-1.0)*r10*x1137*x1138))+((r22*x1136))+(((-1.0)*r11*x1134*x1137))+((r20*sj1*x1138))+(((-1.0)*r12*x1135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x1134))+((r22*x1135))+((cj1*r21*x1134))+((cj1*r20*x1138))+((r12*x1136))+((r10*sj1*x1138)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1134))+(((-1.0)*r10*x1137*x1138))+((r22*x1136))+(((-1.0)*r11*x1134*x1137))+((r20*sj1*x1138))+(((-1.0)*r12*x1135))))+IKsqr((((r11*sj1*x1134))+((r22*x1135))+((cj1*r21*x1134))+((cj1*r20*x1138))+((r12*x1136))+((r10*sj1*x1138))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1134))+(((-1.0)*r10*x1137*x1138))+((r22*x1136))+(((-1.0)*r11*x1134*x1137))+((r20*sj1*x1138))+(((-1.0)*r12*x1135))), (((r11*sj1*x1134))+((r22*x1135))+((cj1*r21*x1134))+((cj1*r20*x1138))+((r12*x1136))+((r10*sj1*x1138))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1139=IKcos(j2);
IkReal x1140=IKsin(j2);
IkReal x1141=((1.0)*cj4);
IkReal x1142=(sj3*sj5);
IkReal x1143=((0.03868)*sj5);
IkReal x1144=(cj5*r21);
IkReal x1145=(cj3*sj5);
IkReal x1146=((0.03868)*cj5);
IkReal x1147=(cj3*sj4);
IkReal x1148=((1.0)*sj4);
IkReal x1149=(cj5*r11);
IkReal x1150=(sj1*x1139);
IkReal x1151=(cj1*x1139);
IkReal x1152=((1.0)*cj5*sj3);
IkReal x1153=(sj5*x1148);
IkReal x1154=(sj1*x1140);
IkReal x1155=(cj1*x1140);
IkReal x1156=((1.0)*x1155);
evalcond[0]=(x1154+x1151+(((-1.0)*r20*x1153))+(((-1.0)*x1144*x1148))+(((-1.0)*r22*x1141)));
evalcond[1]=(x1150+(((-1.0)*x1156))+(((-1.0)*r10*x1153))+(((-1.0)*x1148*x1149))+(((-1.0)*r12*x1141)));
evalcond[2]=((((-0.39225)*x1154))+(((-0.39225)*x1151))+(((-1.0)*pz))+(((-1.0)*r20*x1146))+((r21*x1143))+(((-0.425001)*cj1)));
evalcond[3]=(((r11*x1143))+(((-0.39225)*x1150))+(((0.39225)*x1155))+(((-1.0)*r10*x1146))+(((-1.0)*py))+(((-0.425001)*sj1)));
evalcond[4]=(x1150+(((-1.0)*x1156))+((r22*x1147))+(((-1.0)*r20*x1141*x1145))+(((-1.0)*cj3*x1141*x1144))+(((-1.0)*r20*x1152))+((r21*x1142)));
evalcond[5]=(((r11*x1142))+(((-1.0)*x1151))+(((-1.0)*x1154))+(((-1.0)*cj3*x1141*x1149))+(((-1.0)*r10*x1152))+(((-1.0)*r10*x1141*x1145))+((r12*x1147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1157=((0.39225)*cj0);
IkReal x1158=((0.9229390048494)*sj4);
IkReal x1159=((0.03868)*cj0);
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(cj0,-2);
if(!x1160.valid){
continue;
}
if( IKabs(((-2.35293564015143)*(x1160.value)*(((((-1.0)*r10*sj4*sj5*x1157))+(((-1.0)*cj4*r12*x1157))+(((-1.0)*cj5*r11*sj4*x1157))+(((-1.0)*cj5*r10*x1159))+(((-0.032446)*cj0*sj0))+((r11*sj5*x1159))+(((-1.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0910115505610575)*r21*sj5))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1158))+(((-1.0)*cj5*r21*x1158))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.35293564015143)*(x1160.value)*(((((-1.0)*r10*sj4*sj5*x1157))+(((-1.0)*cj4*r12*x1157))+(((-1.0)*cj5*r11*sj4*x1157))+(((-1.0)*cj5*r10*x1159))+(((-0.032446)*cj0*sj0))+((r11*sj5*x1159))+(((-1.0)*cj0*py))))))+IKsqr(((((0.0910115505610575)*r21*sj5))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1158))+(((-1.0)*cj5*r21*x1158))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.35293564015143)*(x1160.value)*(((((-1.0)*r10*sj4*sj5*x1157))+(((-1.0)*cj4*r12*x1157))+(((-1.0)*cj5*r11*sj4*x1157))+(((-1.0)*cj5*r10*x1159))+(((-0.032446)*cj0*sj0))+((r11*sj5*x1159))+(((-1.0)*cj0*py))))), ((((0.0910115505610575)*r21*sj5))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1158))+(((-1.0)*cj5*r21*x1158))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1161=IKsin(j1);
IkReal x1162=IKcos(j1);
IkReal x1163=sj0*sj0;
IkReal x1164=cj0*cj0;
IkReal x1165=(r00*sj4);
IkReal x1166=((0.425001)*cj0);
IkReal x1167=(cj3*cj4);
IkReal x1168=(cj5*r00);
IkReal x1169=((0.03868)*sj0);
IkReal x1170=((0.39225)*sj4);
IkReal x1171=(r10*sj5);
IkReal x1172=((1.0)*cj0);
IkReal x1173=((0.39225)*sj3);
IkReal x1174=(cj0*cj5);
IkReal x1175=(cj5*r10);
IkReal x1176=(r11*sj5);
IkReal x1177=(r01*sj5);
IkReal x1178=(cj3*r22);
IkReal x1179=(cj5*r11);
IkReal x1180=((0.03868)*r20);
IkReal x1181=((0.03868)*cj0);
IkReal x1182=((0.39225)*cj4);
IkReal x1183=((0.032446)*cj0);
IkReal x1184=(r20*sj5);
IkReal x1185=((0.39225)*sj5);
IkReal x1186=(cj5*sj0);
IkReal x1187=((0.39225)*r21);
IkReal x1188=(r21*sj5);
IkReal x1189=(sj0*x1183);
IkReal x1190=(cj0*x1185);
IkReal x1191=(sj0*x1182);
IkReal x1192=((0.03868)*x1188);
IkReal x1193=((0.425001)*x1161);
IkReal x1194=((0.425001)*x1162);
IkReal x1195=(sj0*x1161*x1166);
evalcond[0]=(x1194+((r22*x1182))+((cj5*x1180))+(((-1.0)*x1192))+((cj5*r21*x1170))+pz+((x1170*x1184)));
evalcond[1]=((((-1.0)*r11*x1170*x1174))+(((-0.03868)*r10*x1174))+((x1164*x1193))+((x1176*x1181))+(((-1.0)*py*x1172))+(((-1.0)*x1189))+(((-1.0)*cj0*x1170*x1171))+(((-1.0)*cj0*r12*x1182)));
evalcond[2]=(x1189+((x1168*x1169))+((r02*x1191))+((sj0*x1165*x1185))+((x1163*x1193))+(((-1.0)*x1169*x1177))+((px*sj0))+((r01*x1170*x1186)));
evalcond[3]=((((-1.0)*x1168*x1173))+((x1173*x1177))+((cj3*r02*x1170))+(((-1.0)*x1169*x1188))+((sj0*x1194))+((cj5*r20*x1169))+(((-0.39225)*cj5*r01*x1167))+((pz*sj0))+(((-1.0)*r00*x1167*x1185)));
evalcond[4]=((((-1.0)*x1173*x1175))+((x1173*x1176))+(((-1.0)*x1162*x1166))+((cj3*r12*x1170))+(((-0.39225)*x1167*x1171))+(((-0.39225)*x1167*x1179))+(((-1.0)*pz*x1172))+((x1181*x1188))+(((-1.0)*x1174*x1180)));
evalcond[5]=(((r20*x1173*x1174))+(((0.03868)*x1176))+(((-0.032446)*sj0))+(((-0.03868)*x1175))+(((0.39225)*cj0*x1167*x1184))+(((-1.0)*py))+(((-1.0)*cj0*x1173*x1188))+((x1167*x1174*x1187))+(((-1.0)*cj0*x1170*x1178))+((x1161*x1166)));
evalcond[6]=((((0.03868)*x1177))+(((-1.0)*x1167*x1186*x1187))+(((-0.03868)*x1168))+((sj0*x1170*x1178))+(((-1.0)*px))+(((-1.0)*x1183))+(((-0.39225)*sj0*x1167*x1184))+(((-1.0)*sj0*x1193))+(((-1.0)*r20*x1173*x1186))+((sj0*x1173*x1188)));
evalcond[7]=((((-1.0)*r01*x1170*x1174))+(((0.032446)*x1163))+(((-1.0)*x1195))+(((-1.0)*cj0*r02*x1182))+(((-1.0)*x1169*x1176))+(((-1.0)*x1165*x1190))+((py*sj0))+((x1169*x1175)));
evalcond[8]=((((-0.032446)*x1164))+((sj0*x1170*x1171))+((sj0*x1170*x1179))+((x1177*x1181))+(((-1.0)*x1195))+(((-1.0)*px*x1172))+((r12*x1191))+(((-1.0)*x1168*x1181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1196=(cj4*sj1);
IkReal x1197=(cj1*cj4);
IkReal x1198=(cj5*sj4);
IkReal x1199=((1.0)*cj1);
IkReal x1200=(sj4*sj5);
IkReal x1201=(sj1*x1200);
if( IKabs((((r21*sj1*x1198))+(((-1.0)*r01*x1198*x1199))+((r22*x1196))+((r20*x1201))+(((-1.0)*r00*x1199*x1200))+(((-1.0)*r02*x1197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x1198))+((r22*x1197))+((cj1*r20*x1200))+((r02*x1196))+((cj1*r21*x1198))+((r00*x1201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1198))+(((-1.0)*r01*x1198*x1199))+((r22*x1196))+((r20*x1201))+(((-1.0)*r00*x1199*x1200))+(((-1.0)*r02*x1197))))+IKsqr((((r01*sj1*x1198))+((r22*x1197))+((cj1*r20*x1200))+((r02*x1196))+((cj1*r21*x1198))+((r00*x1201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1198))+(((-1.0)*r01*x1198*x1199))+((r22*x1196))+((r20*x1201))+(((-1.0)*r00*x1199*x1200))+(((-1.0)*r02*x1197))), (((r01*sj1*x1198))+((r22*x1197))+((cj1*r20*x1200))+((r02*x1196))+((cj1*r21*x1198))+((r00*x1201))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1202=IKcos(j2);
IkReal x1203=IKsin(j2);
IkReal x1204=(cj3*sj4);
IkReal x1205=((1.0)*cj5);
IkReal x1206=((1.0)*cj4);
IkReal x1207=(cj3*cj4);
IkReal x1208=(r21*sj5);
IkReal x1209=(cj3*sj5);
IkReal x1210=((0.03868)*cj5);
IkReal x1211=(r01*sj5);
IkReal x1212=(sj1*x1202);
IkReal x1213=(cj1*x1202);
IkReal x1214=((1.0)*sj4*sj5);
IkReal x1215=(sj1*x1203);
IkReal x1216=(cj1*x1203);
IkReal x1217=((1.0)*x1216);
evalcond[0]=(x1213+x1215+(((-1.0)*r22*x1206))+(((-1.0)*r21*sj4*x1205))+(((-1.0)*r20*x1214)));
evalcond[1]=((((-1.0)*r01*sj4*x1205))+x1212+(((-1.0)*r02*x1206))+(((-1.0)*r00*x1214))+(((-1.0)*x1217)));
evalcond[2]=((((-0.39225)*x1213))+(((-0.39225)*x1215))+(((-1.0)*pz))+(((-1.0)*r20*x1210))+(((-0.425001)*cj1))+(((0.03868)*x1208)));
evalcond[3]=((((0.03868)*x1211))+(((-0.39225)*x1212))+(((0.39225)*x1216))+(((-1.0)*r00*x1210))+(((-1.0)*px))+(((-0.425001)*sj1)));
evalcond[4]=(x1212+(((-1.0)*r21*x1205*x1207))+(((-1.0)*r20*sj3*x1205))+((sj3*x1208))+(((-1.0)*x1217))+(((-1.0)*r20*x1206*x1209))+((r22*x1204)));
evalcond[5]=((((-1.0)*r00*x1206*x1209))+(((-1.0)*r00*sj3*x1205))+(((-1.0)*r01*x1205*x1207))+((sj3*x1211))+((r02*x1204))+(((-1.0)*x1213))+(((-1.0)*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1218=(cj4*r22);
IkReal x1219=((1.0)*sj1);
IkReal x1220=(cj5*sj4);
IkReal x1221=(cj4*r02);
IkReal x1222=(sj4*sj5);
if( IKabs((((r20*sj1*x1222))+((cj1*r00*x1222))+((cj1*r01*x1220))+((sj1*x1218))+((r21*sj1*x1220))+((cj1*x1221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1222))+(((-1.0)*r00*x1219*x1222))+((cj1*r21*x1220))+(((-1.0)*r01*x1219*x1220))+((cj1*x1218))+(((-1.0)*x1219*x1221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1222))+((cj1*r00*x1222))+((cj1*r01*x1220))+((sj1*x1218))+((r21*sj1*x1220))+((cj1*x1221))))+IKsqr((((cj1*r20*x1222))+(((-1.0)*r00*x1219*x1222))+((cj1*r21*x1220))+(((-1.0)*r01*x1219*x1220))+((cj1*x1218))+(((-1.0)*x1219*x1221))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1222))+((cj1*r00*x1222))+((cj1*r01*x1220))+((sj1*x1218))+((r21*sj1*x1220))+((cj1*x1221))), (((cj1*r20*x1222))+(((-1.0)*r00*x1219*x1222))+((cj1*r21*x1220))+(((-1.0)*r01*x1219*x1220))+((cj1*x1218))+(((-1.0)*x1219*x1221))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1223=IKsin(j2);
IkReal x1224=IKcos(j2);
IkReal x1225=(cj3*sj4);
IkReal x1226=((1.0)*cj5);
IkReal x1227=(cj3*cj4);
IkReal x1228=(r21*sj5);
IkReal x1229=((0.03868)*cj5);
IkReal x1230=((1.0)*cj4);
IkReal x1231=(r01*sj5);
IkReal x1232=(cj1*x1224);
IkReal x1233=(sj1*x1223);
IkReal x1234=(cj1*x1223);
IkReal x1235=(sj1*x1224);
IkReal x1236=((1.0)*r20*sj5);
IkReal x1237=((1.0)*r00*sj5);
IkReal x1238=(x1232+x1233);
evalcond[0]=(x1238+(((-1.0)*r21*sj4*x1226))+(((-1.0)*sj4*x1236))+(((-1.0)*r22*x1230)));
evalcond[1]=((((-1.0)*x1235))+x1234+(((-1.0)*r01*sj4*x1226))+(((-1.0)*sj4*x1237))+(((-1.0)*r02*x1230)));
evalcond[2]=((((-1.0)*r20*x1229))+(((0.03868)*x1228))+(((-1.0)*pz))+(((-0.39225)*x1232))+(((-0.39225)*x1233))+(((-0.425001)*cj1)));
evalcond[3]=((((-1.0)*r00*x1229))+(((0.03868)*x1231))+(((-1.0)*px))+(((-0.39225)*x1234))+(((0.425001)*sj1))+(((0.39225)*x1235)));
evalcond[4]=(x1238+((sj3*x1231))+(((-1.0)*r01*x1226*x1227))+(((-1.0)*r00*sj3*x1226))+((r02*x1225))+(((-1.0)*x1227*x1237)));
evalcond[5]=((((-1.0)*x1234))+x1235+((sj3*x1228))+(((-1.0)*r20*sj3*x1226))+(((-1.0)*x1227*x1236))+((r22*x1225))+(((-1.0)*r21*x1226*x1227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1239=(cj4*r12);
IkReal x1240=((1.0)*sj1);
IkReal x1241=(cj4*r22);
IkReal x1242=(sj4*sj5);
IkReal x1243=(cj5*sj4);
IkReal x1244=(cj1*x1243);
if( IKabs((((r20*sj1*x1242))+((r11*x1244))+((r21*sj1*x1243))+((sj1*x1241))+((cj1*r10*x1242))+((cj1*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1239*x1240))+((cj1*x1241))+(((-1.0)*r10*x1240*x1242))+(((-1.0)*r11*x1240*x1243))+((cj1*r20*x1242))+((r21*x1244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1242))+((r11*x1244))+((r21*sj1*x1243))+((sj1*x1241))+((cj1*r10*x1242))+((cj1*x1239))))+IKsqr(((((-1.0)*x1239*x1240))+((cj1*x1241))+(((-1.0)*r10*x1240*x1242))+(((-1.0)*r11*x1240*x1243))+((cj1*r20*x1242))+((r21*x1244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1242))+((r11*x1244))+((r21*sj1*x1243))+((sj1*x1241))+((cj1*r10*x1242))+((cj1*x1239))), ((((-1.0)*x1239*x1240))+((cj1*x1241))+(((-1.0)*r10*x1240*x1242))+(((-1.0)*r11*x1240*x1243))+((cj1*r20*x1242))+((r21*x1244))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1245=IKsin(j2);
IkReal x1246=IKcos(j2);
IkReal x1247=((1.0)*cj4);
IkReal x1248=(sj3*sj5);
IkReal x1249=((0.03868)*sj5);
IkReal x1250=(cj3*sj4);
IkReal x1251=(cj3*sj5);
IkReal x1252=((0.03868)*cj5);
IkReal x1253=(cj5*r21);
IkReal x1254=((1.0)*sj4);
IkReal x1255=(cj5*r11);
IkReal x1256=(cj1*x1246);
IkReal x1257=(sj1*x1245);
IkReal x1258=((1.0)*cj5*sj3);
IkReal x1259=(cj1*x1245);
IkReal x1260=(sj5*x1254);
IkReal x1261=(sj1*x1246);
IkReal x1262=(x1256+x1257);
evalcond[0]=(x1262+(((-1.0)*x1253*x1254))+(((-1.0)*r22*x1247))+(((-1.0)*r20*x1260)));
evalcond[1]=((((-1.0)*r10*x1260))+x1259+(((-1.0)*r12*x1247))+(((-1.0)*x1254*x1255))+(((-1.0)*x1261)));
evalcond[2]=((((-1.0)*r20*x1252))+(((-0.39225)*x1256))+(((-0.39225)*x1257))+(((-1.0)*pz))+((r21*x1249))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x1259))+(((-1.0)*py))+(((0.425001)*sj1))+((r11*x1249))+(((0.39225)*x1261))+(((-1.0)*r10*x1252)));
evalcond[4]=(x1262+((r12*x1250))+(((-1.0)*r10*x1247*x1251))+((r11*x1248))+(((-1.0)*cj3*x1247*x1255))+(((-1.0)*r10*x1258)));
evalcond[5]=((((-1.0)*r20*x1258))+x1261+(((-1.0)*r20*x1247*x1251))+((r22*x1250))+((r21*x1248))+(((-1.0)*x1259))+(((-1.0)*cj3*x1247*x1253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1263=(cj5*sj4);
IkReal x1264=(cj1*cj4);
IkReal x1265=(cj4*sj1);
IkReal x1266=((1.0)*cj1);
IkReal x1267=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x1266*x1267))+((r22*x1265))+((r21*sj1*x1263))+(((-1.0)*r11*x1263*x1266))+(((-1.0)*r12*x1264))+((r20*sj1*x1267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1264))+((r12*x1265))+((cj1*r20*x1267))+((cj1*r21*x1263))+((r11*sj1*x1263))+((r10*sj1*x1267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1266*x1267))+((r22*x1265))+((r21*sj1*x1263))+(((-1.0)*r11*x1263*x1266))+(((-1.0)*r12*x1264))+((r20*sj1*x1267))))+IKsqr((((r22*x1264))+((r12*x1265))+((cj1*r20*x1267))+((cj1*r21*x1263))+((r11*sj1*x1263))+((r10*sj1*x1267))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1266*x1267))+((r22*x1265))+((r21*sj1*x1263))+(((-1.0)*r11*x1263*x1266))+(((-1.0)*r12*x1264))+((r20*sj1*x1267))), (((r22*x1264))+((r12*x1265))+((cj1*r20*x1267))+((cj1*r21*x1263))+((r11*sj1*x1263))+((r10*sj1*x1267))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1268=IKcos(j2);
IkReal x1269=IKsin(j2);
IkReal x1270=((1.0)*cj4);
IkReal x1271=(sj3*sj5);
IkReal x1272=((0.03868)*sj5);
IkReal x1273=(cj5*r21);
IkReal x1274=(cj3*sj5);
IkReal x1275=((0.03868)*cj5);
IkReal x1276=(cj3*sj4);
IkReal x1277=((1.0)*sj4);
IkReal x1278=(cj5*r11);
IkReal x1279=(sj1*x1268);
IkReal x1280=(cj1*x1268);
IkReal x1281=((1.0)*cj5*sj3);
IkReal x1282=(sj5*x1277);
IkReal x1283=(sj1*x1269);
IkReal x1284=(cj1*x1269);
IkReal x1285=((1.0)*x1284);
evalcond[0]=(x1280+x1283+(((-1.0)*r22*x1270))+(((-1.0)*x1273*x1277))+(((-1.0)*r20*x1282)));
evalcond[1]=(x1279+(((-1.0)*r12*x1270))+(((-1.0)*x1277*x1278))+(((-1.0)*r10*x1282))+(((-1.0)*x1285)));
evalcond[2]=((((-0.39225)*x1280))+(((-0.39225)*x1283))+((r21*x1272))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-1.0)*r20*x1275)));
evalcond[3]=((((0.39225)*x1284))+((r11*x1272))+(((-0.39225)*x1279))+(((-1.0)*py))+(((-0.425001)*sj1))+(((-1.0)*r10*x1275)));
evalcond[4]=(x1279+((r21*x1271))+((r22*x1276))+(((-1.0)*cj3*x1270*x1273))+(((-1.0)*x1285))+(((-1.0)*r20*x1281))+(((-1.0)*r20*x1270*x1274)));
evalcond[5]=((((-1.0)*x1283))+(((-1.0)*x1280))+((r12*x1276))+((r11*x1271))+(((-1.0)*cj3*x1270*x1278))+(((-1.0)*r10*x1281))+(((-1.0)*r10*x1270*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1286=(cj4*r12);
IkReal x1287=((1.0)*sj1);
IkReal x1288=(cj5*r21);
IkReal x1289=(r20*sj5);
IkReal x1290=(cj1*sj4);
IkReal x1291=(r10*sj5);
IkReal x1292=(cj5*r11*sj4);
IkReal x1293=(cj0*cj4*r22);
IkReal x1294=(cj0*sj1*sj4);
CheckValue<IkReal> x1295 = IKatan2WithCheck(IkReal((((sj1*x1293))+((x1290*x1291))+((x1288*x1294))+((cj5*r11*x1290))+((cj1*x1286))+((x1289*x1294)))),IkReal((((cj0*x1288*x1290))+(((-1.0)*x1287*x1292))+((cj0*x1289*x1290))+((cj1*x1293))+(((-1.0)*x1286*x1287))+(((-1.0)*sj4*x1287*x1291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1296.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1295.value)+(((1.5707963267949)*(x1296.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1297=IKcos(j2);
IkReal x1298=IKsin(j2);
IkReal x1299=(cj3*sj4);
IkReal x1300=((1.0)*cj4);
IkReal x1301=(sj3*sj5);
IkReal x1302=(cj3*cj5);
IkReal x1303=((1.0)*sj0);
IkReal x1304=((0.03868)*sj5);
IkReal x1305=(cj0*sj1);
IkReal x1306=(cj3*sj5);
IkReal x1307=((0.03868)*cj5);
IkReal x1308=(cj1*x1297);
IkReal x1309=((1.0)*cj5*sj3);
IkReal x1310=(cj1*x1298);
IkReal x1311=(sj1*x1298);
IkReal x1312=((1.0)*sj4*sj5);
IkReal x1313=(sj1*x1297);
IkReal x1314=((1.0)*cj5*sj4);
IkReal x1315=((0.39225)*x1313);
evalcond[0]=(x1308+x1311+(((-1.0)*r22*x1300))+(((-1.0)*r20*x1312))+(((-1.0)*r21*x1314)));
evalcond[1]=((((-0.39225)*x1311))+(((-0.39225)*x1308))+((r21*x1304))+(((-1.0)*r20*x1307))+(((-1.0)*pz))+(((-0.425001)*cj1)));
evalcond[2]=((((-1.0)*r00*x1312))+(((-1.0)*r01*x1314))+(((-1.0)*r02*x1300))+(((-1.0)*x1303*x1310))+((sj0*x1313)));
evalcond[3]=((((-1.0)*r11*x1314))+(((-1.0)*x1297*x1305))+(((-1.0)*r12*x1300))+(((-1.0)*r10*x1312))+((cj0*x1310)));
evalcond[4]=((((-0.425001)*sj0*sj1))+(((-1.0)*r00*x1307))+(((-1.0)*sj0*x1315))+(((-1.0)*px))+(((-0.032446)*cj0))+(((0.39225)*sj0*x1310))+((r01*x1304)));
evalcond[5]=((((-0.032446)*sj0))+(((-1.0)*py))+(((-1.0)*r10*x1307))+((r11*x1304))+(((-0.39225)*cj0*x1310))+(((0.39225)*x1297*x1305))+(((0.425001)*x1305)));
evalcond[6]=(x1313+(((-1.0)*x1310))+(((-1.0)*r20*x1300*x1306))+((r21*x1301))+(((-1.0)*r20*x1309))+((r22*x1299))+(((-1.0)*r21*x1300*x1302)));
evalcond[7]=((((-1.0)*r11*x1300*x1302))+(((-1.0)*r10*x1300*x1306))+((r12*x1299))+(((-1.0)*r10*x1309))+((r11*x1301))+((cj0*x1308))+((x1298*x1305)));
evalcond[8]=((((-1.0)*r00*x1309))+(((-1.0)*x1303*x1308))+(((-1.0)*x1303*x1311))+((r02*x1299))+(((-1.0)*r01*x1300*x1302))+((r01*x1301))+(((-1.0)*r00*x1300*x1306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1316=(cj4*sj1);
IkReal x1317=(r22*sj0);
IkReal x1318=(sj1*sj4);
IkReal x1319=(cj5*r01);
IkReal x1320=(r00*sj5);
IkReal x1321=(cj1*cj4);
IkReal x1322=(cj1*sj4);
IkReal x1323=(cj5*r21*sj0);
IkReal x1324=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1325=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1325.valid){
continue;
}
CheckValue<IkReal> x1326 = IKatan2WithCheck(IkReal((((x1316*x1317))+(((-1.0)*x1320*x1322))+(((-1.0)*x1319*x1322))+((r20*sj0*sj5*x1318))+((x1318*x1323))+(((-1.0)*r02*x1321)))),IkReal((((x1318*x1319))+((x1322*x1323))+((r02*x1316))+((r20*sj0*sj5*x1322))+((x1318*x1320))+((x1317*x1321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1326.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1325.value)))+(x1326.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1327=IKcos(j2);
IkReal x1328=IKsin(j2);
IkReal x1329=(cj3*sj4);
IkReal x1330=((1.0)*cj4);
IkReal x1331=(sj3*sj5);
IkReal x1332=(cj3*cj5);
IkReal x1333=((1.0)*sj0);
IkReal x1334=((0.03868)*sj5);
IkReal x1335=(cj0*sj1);
IkReal x1336=(cj3*sj5);
IkReal x1337=((0.03868)*cj5);
IkReal x1338=(cj1*x1327);
IkReal x1339=((1.0)*cj5*sj3);
IkReal x1340=(cj1*x1328);
IkReal x1341=(sj1*x1328);
IkReal x1342=((1.0)*sj4*sj5);
IkReal x1343=(sj1*x1327);
IkReal x1344=((1.0)*cj5*sj4);
IkReal x1345=((0.39225)*x1343);
evalcond[0]=(x1341+x1338+(((-1.0)*r20*x1342))+(((-1.0)*r21*x1344))+(((-1.0)*r22*x1330)));
evalcond[1]=((((-0.39225)*x1338))+((r21*x1334))+(((-1.0)*pz))+(((-1.0)*r20*x1337))+(((-0.425001)*cj1))+(((-0.39225)*x1341)));
evalcond[2]=(((sj0*x1343))+(((-1.0)*r00*x1342))+(((-1.0)*r01*x1344))+(((-1.0)*r02*x1330))+(((-1.0)*x1333*x1340)));
evalcond[3]=((((-1.0)*x1327*x1335))+(((-1.0)*r11*x1344))+((cj0*x1340))+(((-1.0)*r12*x1330))+(((-1.0)*r10*x1342)));
evalcond[4]=((((-0.425001)*sj0*sj1))+(((0.39225)*sj0*x1340))+((r01*x1334))+(((-1.0)*px))+(((-1.0)*sj0*x1345))+(((-0.032446)*cj0))+(((-1.0)*r00*x1337)));
evalcond[5]=((((-0.39225)*cj0*x1340))+(((0.39225)*x1327*x1335))+(((-0.032446)*sj0))+((r11*x1334))+(((-1.0)*py))+(((0.425001)*x1335))+(((-1.0)*r10*x1337)));
evalcond[6]=((((-1.0)*r21*x1330*x1332))+x1343+((r21*x1331))+((r22*x1329))+(((-1.0)*r20*x1339))+(((-1.0)*r20*x1330*x1336))+(((-1.0)*x1340)));
evalcond[7]=((((-1.0)*r10*x1330*x1336))+((r11*x1331))+((cj0*x1338))+((r12*x1329))+((x1328*x1335))+(((-1.0)*r11*x1330*x1332))+(((-1.0)*r10*x1339)));
evalcond[8]=((((-1.0)*r00*x1330*x1336))+((r01*x1331))+(((-1.0)*x1333*x1338))+((r02*x1329))+(((-1.0)*r00*x1339))+(((-1.0)*x1333*x1341))+(((-1.0)*r01*x1330*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1346=((0.03868)*sj0);
IkReal x1347=((0.9229390048494)*sj4);
IkReal x1348=((0.39225)*sj0);
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(sj0,-2);
if(!x1349.valid){
continue;
}
if( IKabs(((-2.35293564015143)*(x1349.value)*((((cj5*r00*x1346))+(((0.032446)*cj0*sj0))+((cj5*r01*sj4*x1348))+((r00*sj4*sj5*x1348))+(((-1.0)*r01*sj5*x1346))+((px*sj0))+((cj4*r02*x1348)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0910115505610575)*r21*sj5))+(((-1.0)*cj5*r21*x1347))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1347))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.35293564015143)*(x1349.value)*((((cj5*r00*x1346))+(((0.032446)*cj0*sj0))+((cj5*r01*sj4*x1348))+((r00*sj4*sj5*x1348))+(((-1.0)*r01*sj5*x1346))+((px*sj0))+((cj4*r02*x1348))))))+IKsqr(((((0.0910115505610575)*r21*sj5))+(((-1.0)*cj5*r21*x1347))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1347))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.35293564015143)*(x1349.value)*((((cj5*r00*x1346))+(((0.032446)*cj0*sj0))+((cj5*r01*sj4*x1348))+((r00*sj4*sj5*x1348))+(((-1.0)*r01*sj5*x1346))+((px*sj0))+((cj4*r02*x1348))))), ((((0.0910115505610575)*r21*sj5))+(((-1.0)*cj5*r21*x1347))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*r20*sj5*x1347))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1350=IKsin(j1);
IkReal x1351=IKcos(j1);
IkReal x1352=sj0*sj0;
IkReal x1353=cj0*cj0;
IkReal x1354=(r00*sj4);
IkReal x1355=((0.425001)*cj0);
IkReal x1356=(cj3*cj4);
IkReal x1357=(cj5*r00);
IkReal x1358=((0.03868)*sj0);
IkReal x1359=((0.39225)*sj4);
IkReal x1360=(r10*sj5);
IkReal x1361=((1.0)*cj0);
IkReal x1362=((0.39225)*sj3);
IkReal x1363=(cj0*cj5);
IkReal x1364=(cj5*r10);
IkReal x1365=(r11*sj5);
IkReal x1366=(r01*sj5);
IkReal x1367=(cj3*r22);
IkReal x1368=(cj5*r11);
IkReal x1369=((0.03868)*r20);
IkReal x1370=((0.03868)*cj0);
IkReal x1371=((0.39225)*cj4);
IkReal x1372=((0.032446)*cj0);
IkReal x1373=(r20*sj5);
IkReal x1374=((0.39225)*sj5);
IkReal x1375=(cj5*sj0);
IkReal x1376=((0.39225)*r21);
IkReal x1377=(r21*sj5);
IkReal x1378=(sj0*x1372);
IkReal x1379=(cj0*x1374);
IkReal x1380=(sj0*x1371);
IkReal x1381=((0.03868)*x1377);
IkReal x1382=((0.425001)*x1350);
IkReal x1383=((0.425001)*x1351);
IkReal x1384=(sj0*x1350*x1355);
evalcond[0]=((((-1.0)*x1381))+x1383+((cj5*x1369))+((cj5*r21*x1359))+((r22*x1371))+pz+((x1359*x1373)));
evalcond[1]=(((x1365*x1370))+(((-1.0)*r11*x1359*x1363))+(((-1.0)*cj0*r12*x1371))+(((-1.0)*x1378))+(((-1.0)*cj0*x1359*x1360))+((x1353*x1382))+(((-1.0)*py*x1361))+(((-0.03868)*r10*x1363)));
evalcond[2]=(x1378+((x1357*x1358))+((sj0*x1354*x1374))+((px*sj0))+((x1352*x1382))+((r01*x1359*x1375))+((r02*x1380))+(((-1.0)*x1358*x1366)));
evalcond[3]=((((-0.39225)*cj5*r01*x1356))+(((-1.0)*x1358*x1377))+((cj5*r20*x1358))+((sj0*x1383))+((cj3*r02*x1359))+(((-1.0)*x1357*x1362))+((pz*sj0))+(((-1.0)*r00*x1356*x1374))+((x1362*x1366)));
evalcond[4]=((((-1.0)*pz*x1361))+(((-0.39225)*x1356*x1360))+(((-0.39225)*x1356*x1368))+((cj3*r12*x1359))+(((-1.0)*x1362*x1364))+((x1370*x1377))+(((-1.0)*x1351*x1355))+(((-1.0)*x1363*x1369))+((x1362*x1365)));
evalcond[5]=((((-0.032446)*sj0))+(((0.39225)*cj0*x1356*x1373))+((x1356*x1363*x1376))+(((-1.0)*py))+(((-1.0)*cj0*x1359*x1367))+(((0.03868)*x1365))+(((-1.0)*cj0*x1362*x1377))+((r20*x1362*x1363))+((x1350*x1355))+(((-0.03868)*x1364)));
evalcond[6]=((((-0.03868)*x1357))+(((-1.0)*r20*x1362*x1375))+((sj0*x1359*x1367))+(((-1.0)*x1372))+(((-1.0)*x1356*x1375*x1376))+(((-1.0)*px))+(((0.03868)*x1366))+(((-1.0)*sj0*x1382))+((sj0*x1362*x1377))+(((-0.39225)*sj0*x1356*x1373)));
evalcond[7]=((((-1.0)*x1384))+(((-1.0)*cj0*r02*x1371))+((x1358*x1364))+(((0.032446)*x1352))+(((-1.0)*r01*x1359*x1363))+(((-1.0)*x1354*x1379))+((py*sj0))+(((-1.0)*x1358*x1365)));
evalcond[8]=((((-1.0)*x1384))+(((-0.032446)*x1353))+(((-1.0)*px*x1361))+((sj0*x1359*x1368))+((sj0*x1359*x1360))+((x1366*x1370))+(((-1.0)*x1357*x1370))+((r12*x1380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1385=(cj4*sj1);
IkReal x1386=(cj1*cj4);
IkReal x1387=(cj5*sj4);
IkReal x1388=((1.0)*cj1);
IkReal x1389=(sj4*sj5);
IkReal x1390=(sj1*x1389);
if( IKabs(((((-1.0)*r02*x1386))+((r20*x1390))+((r21*sj1*x1387))+((r22*x1385))+(((-1.0)*r01*x1387*x1388))+(((-1.0)*r00*x1388*x1389)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1389))+((cj1*r21*x1387))+((r22*x1386))+((r01*sj1*x1387))+((r00*x1390))+((r02*x1385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1386))+((r20*x1390))+((r21*sj1*x1387))+((r22*x1385))+(((-1.0)*r01*x1387*x1388))+(((-1.0)*r00*x1388*x1389))))+IKsqr((((cj1*r20*x1389))+((cj1*r21*x1387))+((r22*x1386))+((r01*sj1*x1387))+((r00*x1390))+((r02*x1385))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x1386))+((r20*x1390))+((r21*sj1*x1387))+((r22*x1385))+(((-1.0)*r01*x1387*x1388))+(((-1.0)*r00*x1388*x1389))), (((cj1*r20*x1389))+((cj1*r21*x1387))+((r22*x1386))+((r01*sj1*x1387))+((r00*x1390))+((r02*x1385))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1391=IKcos(j2);
IkReal x1392=IKsin(j2);
IkReal x1393=(cj3*sj4);
IkReal x1394=((1.0)*cj5);
IkReal x1395=((1.0)*cj4);
IkReal x1396=(cj3*cj4);
IkReal x1397=(r21*sj5);
IkReal x1398=(cj3*sj5);
IkReal x1399=((0.03868)*cj5);
IkReal x1400=(r01*sj5);
IkReal x1401=(sj1*x1391);
IkReal x1402=(cj1*x1391);
IkReal x1403=((1.0)*sj4*sj5);
IkReal x1404=(sj1*x1392);
IkReal x1405=(cj1*x1392);
IkReal x1406=((1.0)*x1405);
evalcond[0]=((((-1.0)*r21*sj4*x1394))+x1402+x1404+(((-1.0)*r22*x1395))+(((-1.0)*r20*x1403)));
evalcond[1]=((((-1.0)*r02*x1395))+(((-1.0)*r01*sj4*x1394))+(((-1.0)*r00*x1403))+(((-1.0)*x1406))+x1401);
evalcond[2]=((((-1.0)*r20*x1399))+(((-0.39225)*x1402))+(((-0.39225)*x1404))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((0.03868)*x1397)));
evalcond[3]=((((0.03868)*x1400))+(((-0.39225)*x1401))+(((-1.0)*px))+(((-1.0)*r00*x1399))+(((0.39225)*x1405))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*r21*x1394*x1396))+(((-1.0)*x1406))+(((-1.0)*r20*sj3*x1394))+((sj3*x1397))+x1401+((r22*x1393))+(((-1.0)*r20*x1395*x1398)));
evalcond[5]=((((-1.0)*x1404))+(((-1.0)*x1402))+(((-1.0)*r01*x1394*x1396))+((sj3*x1400))+(((-1.0)*r00*x1395*x1398))+(((-1.0)*r00*sj3*x1394))+((r02*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1407=(cj4*r22);
IkReal x1408=((1.0)*sj1);
IkReal x1409=(cj5*sj4);
IkReal x1410=(cj4*r02);
IkReal x1411=(sj4*sj5);
if( IKabs((((r21*sj1*x1409))+((sj1*x1407))+((cj1*r01*x1409))+((cj1*x1410))+((cj1*r00*x1411))+((r20*sj1*x1411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1408*x1409))+((cj1*r21*x1409))+((cj1*r20*x1411))+(((-1.0)*x1408*x1410))+(((-1.0)*r00*x1408*x1411))+((cj1*x1407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1409))+((sj1*x1407))+((cj1*r01*x1409))+((cj1*x1410))+((cj1*r00*x1411))+((r20*sj1*x1411))))+IKsqr(((((-1.0)*r01*x1408*x1409))+((cj1*r21*x1409))+((cj1*r20*x1411))+(((-1.0)*x1408*x1410))+(((-1.0)*r00*x1408*x1411))+((cj1*x1407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1409))+((sj1*x1407))+((cj1*r01*x1409))+((cj1*x1410))+((cj1*r00*x1411))+((r20*sj1*x1411))), ((((-1.0)*r01*x1408*x1409))+((cj1*r21*x1409))+((cj1*r20*x1411))+(((-1.0)*x1408*x1410))+(((-1.0)*r00*x1408*x1411))+((cj1*x1407))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1412=IKsin(j2);
IkReal x1413=IKcos(j2);
IkReal x1414=(cj3*sj4);
IkReal x1415=((1.0)*cj5);
IkReal x1416=(cj3*cj4);
IkReal x1417=(r21*sj5);
IkReal x1418=((0.03868)*cj5);
IkReal x1419=((1.0)*cj4);
IkReal x1420=(r01*sj5);
IkReal x1421=(cj1*x1413);
IkReal x1422=(sj1*x1412);
IkReal x1423=(cj1*x1412);
IkReal x1424=(sj1*x1413);
IkReal x1425=((1.0)*r20*sj5);
IkReal x1426=((1.0)*r00*sj5);
IkReal x1427=(x1421+x1422);
evalcond[0]=((((-1.0)*r21*sj4*x1415))+(((-1.0)*r22*x1419))+x1427+(((-1.0)*sj4*x1425)));
evalcond[1]=((((-1.0)*r01*sj4*x1415))+(((-1.0)*r02*x1419))+(((-1.0)*x1424))+x1423+(((-1.0)*sj4*x1426)));
evalcond[2]=((((0.03868)*x1417))+(((-1.0)*pz))+(((-1.0)*r20*x1418))+(((-0.39225)*x1421))+(((-0.39225)*x1422))+(((-0.425001)*cj1)));
evalcond[3]=((((0.39225)*x1424))+(((-1.0)*px))+(((0.425001)*sj1))+(((-1.0)*r00*x1418))+(((0.03868)*x1420))+(((-0.39225)*x1423)));
evalcond[4]=((((-1.0)*x1416*x1426))+(((-1.0)*r01*x1415*x1416))+(((-1.0)*r00*sj3*x1415))+x1427+((r02*x1414))+((sj3*x1420)));
evalcond[5]=((((-1.0)*x1416*x1425))+((r22*x1414))+(((-1.0)*x1423))+(((-1.0)*r21*x1415*x1416))+x1424+(((-1.0)*r20*sj3*x1415))+((sj3*x1417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1428=(cj4*r12);
IkReal x1429=((1.0)*sj1);
IkReal x1430=(cj4*r22);
IkReal x1431=(sj4*sj5);
IkReal x1432=(cj5*sj4);
IkReal x1433=(cj1*x1432);
if( IKabs((((r20*sj1*x1431))+((r21*sj1*x1432))+((cj1*x1428))+((r11*x1433))+((sj1*x1430))+((cj1*r10*x1431)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1429*x1431))+(((-1.0)*r11*x1429*x1432))+((cj1*r20*x1431))+((r21*x1433))+((cj1*x1430))+(((-1.0)*x1428*x1429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x1431))+((r21*sj1*x1432))+((cj1*x1428))+((r11*x1433))+((sj1*x1430))+((cj1*r10*x1431))))+IKsqr(((((-1.0)*r10*x1429*x1431))+(((-1.0)*r11*x1429*x1432))+((cj1*r20*x1431))+((r21*x1433))+((cj1*x1430))+(((-1.0)*x1428*x1429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x1431))+((r21*sj1*x1432))+((cj1*x1428))+((r11*x1433))+((sj1*x1430))+((cj1*r10*x1431))), ((((-1.0)*r10*x1429*x1431))+(((-1.0)*r11*x1429*x1432))+((cj1*r20*x1431))+((r21*x1433))+((cj1*x1430))+(((-1.0)*x1428*x1429))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1434=IKsin(j2);
IkReal x1435=IKcos(j2);
IkReal x1436=((1.0)*cj4);
IkReal x1437=(sj3*sj5);
IkReal x1438=((0.03868)*sj5);
IkReal x1439=(cj3*sj4);
IkReal x1440=(cj3*sj5);
IkReal x1441=((0.03868)*cj5);
IkReal x1442=(cj5*r21);
IkReal x1443=((1.0)*sj4);
IkReal x1444=(cj5*r11);
IkReal x1445=(cj1*x1435);
IkReal x1446=(sj1*x1434);
IkReal x1447=((1.0)*cj5*sj3);
IkReal x1448=(cj1*x1434);
IkReal x1449=(sj5*x1443);
IkReal x1450=(sj1*x1435);
IkReal x1451=(x1446+x1445);
evalcond[0]=((((-1.0)*r20*x1449))+(((-1.0)*r22*x1436))+x1451+(((-1.0)*x1442*x1443)));
evalcond[1]=((((-1.0)*r12*x1436))+(((-1.0)*x1450))+(((-1.0)*r10*x1449))+x1448+(((-1.0)*x1443*x1444)));
evalcond[2]=((((-1.0)*r20*x1441))+(((-1.0)*pz))+((r21*x1438))+(((-0.39225)*x1445))+(((-0.39225)*x1446))+(((-0.425001)*cj1)));
evalcond[3]=((((-1.0)*r10*x1441))+(((0.39225)*x1450))+(((-1.0)*py))+((r11*x1438))+(((0.425001)*sj1))+(((-0.39225)*x1448)));
evalcond[4]=((((-1.0)*cj3*x1436*x1444))+(((-1.0)*r10*x1436*x1440))+((r12*x1439))+(((-1.0)*r10*x1447))+((r11*x1437))+x1451);
evalcond[5]=((((-1.0)*cj3*x1436*x1442))+(((-1.0)*r20*x1447))+(((-1.0)*x1448))+((r21*x1437))+x1450+(((-1.0)*r20*x1436*x1440))+((r22*x1439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1452=(cj5*sj4);
IkReal x1453=(cj1*cj4);
IkReal x1454=(cj4*sj1);
IkReal x1455=((1.0)*cj1);
IkReal x1456=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x1455*x1456))+((r21*sj1*x1452))+(((-1.0)*r11*x1452*x1455))+(((-1.0)*r12*x1453))+((r22*x1454))+((r20*sj1*x1456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1456))+((cj1*r21*x1452))+((r12*x1454))+((r11*sj1*x1452))+((r10*sj1*x1456))+((r22*x1453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1455*x1456))+((r21*sj1*x1452))+(((-1.0)*r11*x1452*x1455))+(((-1.0)*r12*x1453))+((r22*x1454))+((r20*sj1*x1456))))+IKsqr((((cj1*r20*x1456))+((cj1*r21*x1452))+((r12*x1454))+((r11*sj1*x1452))+((r10*sj1*x1456))+((r22*x1453))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1455*x1456))+((r21*sj1*x1452))+(((-1.0)*r11*x1452*x1455))+(((-1.0)*r12*x1453))+((r22*x1454))+((r20*sj1*x1456))), (((cj1*r20*x1456))+((cj1*r21*x1452))+((r12*x1454))+((r11*sj1*x1452))+((r10*sj1*x1456))+((r22*x1453))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1457=IKcos(j2);
IkReal x1458=IKsin(j2);
IkReal x1459=((1.0)*cj4);
IkReal x1460=(sj3*sj5);
IkReal x1461=((0.03868)*sj5);
IkReal x1462=(cj5*r21);
IkReal x1463=(cj3*sj5);
IkReal x1464=((0.03868)*cj5);
IkReal x1465=(cj3*sj4);
IkReal x1466=((1.0)*sj4);
IkReal x1467=(cj5*r11);
IkReal x1468=(sj1*x1457);
IkReal x1469=(cj1*x1457);
IkReal x1470=((1.0)*cj5*sj3);
IkReal x1471=(sj5*x1466);
IkReal x1472=(sj1*x1458);
IkReal x1473=(cj1*x1458);
IkReal x1474=((1.0)*x1473);
evalcond[0]=((((-1.0)*r22*x1459))+(((-1.0)*r20*x1471))+(((-1.0)*x1462*x1466))+x1469+x1472);
evalcond[1]=((((-1.0)*r10*x1471))+(((-1.0)*x1466*x1467))+x1468+(((-1.0)*x1474))+(((-1.0)*r12*x1459)));
evalcond[2]=((((-0.39225)*x1469))+(((-1.0)*pz))+(((-1.0)*r20*x1464))+(((-0.39225)*x1472))+((r21*x1461))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x1468))+(((0.39225)*x1473))+(((-1.0)*py))+((r11*x1461))+(((-0.425001)*sj1))+(((-1.0)*r10*x1464)));
evalcond[4]=((((-1.0)*r20*x1470))+(((-1.0)*cj3*x1459*x1462))+((r22*x1465))+x1468+(((-1.0)*x1474))+((r21*x1460))+(((-1.0)*r20*x1459*x1463)));
evalcond[5]=((((-1.0)*r10*x1459*x1463))+(((-1.0)*cj3*x1459*x1467))+(((-1.0)*r10*x1470))+(((-1.0)*x1472))+((r12*x1465))+((r11*x1460))+(((-1.0)*x1469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1475=(cj4*r12);
IkReal x1476=((1.0)*sj1);
IkReal x1477=(cj5*r21);
IkReal x1478=(r20*sj5);
IkReal x1479=(cj1*sj4);
IkReal x1480=(r10*sj5);
IkReal x1481=(cj5*r11*sj4);
IkReal x1482=(cj0*cj4*r22);
IkReal x1483=(cj0*sj1*sj4);
CheckValue<IkReal> x1484 = IKatan2WithCheck(IkReal((((cj1*x1475))+((sj1*x1482))+((x1477*x1483))+((cj5*r11*x1479))+((x1478*x1483))+((x1479*x1480)))),IkReal((((cj1*x1482))+(((-1.0)*x1475*x1476))+((cj0*x1478*x1479))+((cj0*x1477*x1479))+(((-1.0)*sj4*x1476*x1480))+(((-1.0)*x1476*x1481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1484.valid){
continue;
}
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1485.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1484.value)+(((1.5707963267949)*(x1485.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1486=IKcos(j2);
IkReal x1487=IKsin(j2);
IkReal x1488=(cj3*sj4);
IkReal x1489=((1.0)*cj4);
IkReal x1490=(sj3*sj5);
IkReal x1491=(cj3*cj5);
IkReal x1492=((1.0)*sj0);
IkReal x1493=((0.03868)*sj5);
IkReal x1494=(cj0*sj1);
IkReal x1495=(cj3*sj5);
IkReal x1496=((0.03868)*cj5);
IkReal x1497=(cj1*x1486);
IkReal x1498=((1.0)*cj5*sj3);
IkReal x1499=(cj1*x1487);
IkReal x1500=(sj1*x1487);
IkReal x1501=((1.0)*sj4*sj5);
IkReal x1502=(sj1*x1486);
IkReal x1503=((1.0)*cj5*sj4);
IkReal x1504=((0.39225)*x1502);
evalcond[0]=((((-1.0)*r20*x1501))+x1500+(((-1.0)*r22*x1489))+x1497+(((-1.0)*r21*x1503)));
evalcond[1]=((((-0.39225)*x1500))+(((-1.0)*r20*x1496))+(((-0.39225)*x1497))+((r21*x1493))+(((-1.0)*pz))+(((-0.425001)*cj1)));
evalcond[2]=((((-1.0)*r01*x1503))+(((-1.0)*r00*x1501))+(((-1.0)*x1492*x1499))+((sj0*x1502))+(((-1.0)*r02*x1489)));
evalcond[3]=((((-1.0)*r12*x1489))+(((-1.0)*x1486*x1494))+((cj0*x1499))+(((-1.0)*r11*x1503))+(((-1.0)*r10*x1501)));
evalcond[4]=((((-0.425001)*sj0*sj1))+(((-1.0)*r00*x1496))+((r01*x1493))+(((-1.0)*sj0*x1504))+(((-1.0)*px))+(((-0.032446)*cj0))+(((0.39225)*sj0*x1499)));
evalcond[5]=((((-0.032446)*sj0))+((r11*x1493))+(((-1.0)*py))+(((0.425001)*x1494))+(((0.39225)*x1486*x1494))+(((-0.39225)*cj0*x1499))+(((-1.0)*r10*x1496)));
evalcond[6]=((((-1.0)*r20*x1489*x1495))+(((-1.0)*r21*x1489*x1491))+(((-1.0)*r20*x1498))+((r21*x1490))+(((-1.0)*x1499))+x1502+((r22*x1488)));
evalcond[7]=(((r12*x1488))+((x1487*x1494))+((r11*x1490))+((cj0*x1497))+(((-1.0)*r10*x1489*x1495))+(((-1.0)*r11*x1489*x1491))+(((-1.0)*r10*x1498)));
evalcond[8]=((((-1.0)*r00*x1498))+((r01*x1490))+(((-1.0)*x1492*x1497))+(((-1.0)*r01*x1489*x1491))+((r02*x1488))+(((-1.0)*x1492*x1500))+(((-1.0)*r00*x1489*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1505=(cj4*sj1);
IkReal x1506=(r22*sj0);
IkReal x1507=(sj1*sj4);
IkReal x1508=(cj5*r01);
IkReal x1509=(r00*sj5);
IkReal x1510=(cj1*cj4);
IkReal x1511=(cj1*sj4);
IkReal x1512=(cj5*r21*sj0);
IkReal x1513=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1514 = IKatan2WithCheck(IkReal((((r20*sj0*sj5*x1507))+((x1507*x1512))+(((-1.0)*x1509*x1511))+(((-1.0)*x1508*x1511))+(((-1.0)*r02*x1510))+((x1505*x1506)))),IkReal((((r20*sj0*sj5*x1511))+((x1506*x1510))+((x1507*x1509))+((x1507*x1508))+((r02*x1505))+((x1511*x1512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1514.valid){
continue;
}
CheckValue<IkReal> x1515=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1515.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1514.value)+(((1.5707963267949)*(x1515.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1516=IKcos(j2);
IkReal x1517=IKsin(j2);
IkReal x1518=(cj3*sj4);
IkReal x1519=((1.0)*cj4);
IkReal x1520=(sj3*sj5);
IkReal x1521=(cj3*cj5);
IkReal x1522=((1.0)*sj0);
IkReal x1523=((0.03868)*sj5);
IkReal x1524=(cj0*sj1);
IkReal x1525=(cj3*sj5);
IkReal x1526=((0.03868)*cj5);
IkReal x1527=(cj1*x1516);
IkReal x1528=((1.0)*cj5*sj3);
IkReal x1529=(cj1*x1517);
IkReal x1530=(sj1*x1517);
IkReal x1531=((1.0)*sj4*sj5);
IkReal x1532=(sj1*x1516);
IkReal x1533=((1.0)*cj5*sj4);
IkReal x1534=((0.39225)*x1532);
evalcond[0]=((((-1.0)*r22*x1519))+x1527+x1530+(((-1.0)*r21*x1533))+(((-1.0)*r20*x1531)));
evalcond[1]=((((-0.39225)*x1530))+(((-0.39225)*x1527))+(((-1.0)*pz))+((r21*x1523))+(((-1.0)*r20*x1526))+(((-0.425001)*cj1)));
evalcond[2]=((((-1.0)*r01*x1533))+(((-1.0)*r00*x1531))+((sj0*x1532))+(((-1.0)*r02*x1519))+(((-1.0)*x1522*x1529)));
evalcond[3]=(((cj0*x1529))+(((-1.0)*r11*x1533))+(((-1.0)*x1516*x1524))+(((-1.0)*r10*x1531))+(((-1.0)*r12*x1519)));
evalcond[4]=((((-0.425001)*sj0*sj1))+(((-1.0)*r00*x1526))+(((-1.0)*sj0*x1534))+((r01*x1523))+(((0.39225)*sj0*x1529))+(((-1.0)*px))+(((-0.032446)*cj0)));
evalcond[5]=((((-0.032446)*sj0))+(((-0.39225)*cj0*x1529))+(((0.39225)*x1516*x1524))+((r11*x1523))+(((-1.0)*py))+(((0.425001)*x1524))+(((-1.0)*r10*x1526)));
evalcond[6]=((((-1.0)*r20*x1519*x1525))+x1532+((r21*x1520))+((r22*x1518))+(((-1.0)*r21*x1519*x1521))+(((-1.0)*r20*x1528))+(((-1.0)*x1529)));
evalcond[7]=(((cj0*x1527))+((r12*x1518))+((r11*x1520))+((x1517*x1524))+(((-1.0)*r11*x1519*x1521))+(((-1.0)*r10*x1519*x1525))+(((-1.0)*r10*x1528)));
evalcond[8]=((((-1.0)*r00*x1528))+(((-1.0)*r00*x1519*x1525))+((r01*x1520))+(((-1.0)*r01*x1519*x1521))+((r02*x1518))+(((-1.0)*x1522*x1530))+(((-1.0)*x1522*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1535=((1.0)*sj4);
IkReal x1536=(r21*sj0);
IkReal x1537=((1.0)*cj4);
IkReal x1538=((1.0)*r20*sj0);
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x1535))+(((-1.0)*r02*x1537))+(((-1.0)*r00*sj5*x1535)))),-1);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal((((sj5*x1536))+(((-1.0)*cj5*x1538)))),IkReal(((((-1.0)*cj5*x1536*x1537))+((r22*sj0*sj4))+(((-1.0)*r20*sj0*sj5*x1537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1539.value)))+(x1540.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1541=IKsin(j3);
IkReal x1542=IKcos(j3);
IkReal x1543=(sj5*x1542);
IkReal x1544=(cj4*cj5*x1541);
IkReal x1545=(cj4*sj5*x1541);
IkReal x1546=((1.0)*cj5*x1542);
IkReal x1547=((1.0)*sj4*x1541);
evalcond[0]=((((-1.0)*r22*x1547))+((r21*x1543))+((r21*x1544))+(((-1.0)*r20*x1546))+((r20*x1545)));
evalcond[1]=((((-1.0)*r02*x1547))+cj0+(((-1.0)*r00*x1546))+((r01*x1543))+((r01*x1544))+((r00*x1545)));
evalcond[2]=(sj0+((r11*x1544))+((r11*x1543))+(((-1.0)*r10*x1546))+((r10*x1545))+(((-1.0)*r12*x1547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1548=((0.9229390048494)*cj4);
IkReal x1549=((0.9229390048494)*sj4);
IkReal x1550=((0.0910115505610575)*cj5);
IkReal x1551=((0.0910115505610575)*sj5);
if( IKabs((((r01*x1551))+(((-1.0)*r02*x1548))+(((-1.0)*r00*x1550))+(((-1.0)*cj5*r01*x1549))+(((-1.0)*r00*sj5*x1549))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1548))+(((-1.0)*r20*x1550))+(((-1.0)*cj5*r21*x1549))+((r21*x1551))+(((-2.35293564015143)*pz))+(((-1.0)*r20*sj5*x1549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1551))+(((-1.0)*r02*x1548))+(((-1.0)*r00*x1550))+(((-1.0)*cj5*r01*x1549))+(((-1.0)*r00*sj5*x1549))+(((-2.35293564015143)*px))))+IKsqr(((((-1.0)*r22*x1548))+(((-1.0)*r20*x1550))+(((-1.0)*cj5*r21*x1549))+((r21*x1551))+(((-2.35293564015143)*pz))+(((-1.0)*r20*sj5*x1549))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x1551))+(((-1.0)*r02*x1548))+(((-1.0)*r00*x1550))+(((-1.0)*cj5*r01*x1549))+(((-1.0)*r00*sj5*x1549))+(((-2.35293564015143)*px))), ((((-1.0)*r22*x1548))+(((-1.0)*r20*x1550))+(((-1.0)*cj5*r21*x1549))+((r21*x1551))+(((-2.35293564015143)*pz))+(((-1.0)*r20*sj5*x1549))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1552=((0.39225)*sj3);
IkReal x1553=(cj5*r00);
IkReal x1554=((0.39225)*cj4);
IkReal x1555=(r01*sj5);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=((0.39225)*sj4);
IkReal x1559=(r20*sj5);
IkReal x1560=(r00*sj5);
IkReal x1561=(cj5*r01);
IkReal x1562=(cj5*r21);
IkReal x1563=((0.425001)*(IKcos(j1)));
IkReal x1564=((0.03868)*x1557);
IkReal x1565=((0.03868)*x1556);
IkReal x1566=((0.03868)*x1555);
IkReal x1567=((0.425001)*(IKsin(j1)));
IkReal x1568=((0.03868)*x1553);
IkReal x1569=(x1568+x1567);
IkReal x1570=(x1563+x1564+pz);
evalcond[0]=(x1569+px+((r02*x1554))+(((-1.0)*x1566))+((x1558*x1561))+((x1558*x1560)));
evalcond[1]=(((r22*x1554))+x1570+((x1558*x1559))+(((-1.0)*x1565))+((x1558*x1562)));
evalcond[2]=(((cj3*r02*x1558))+(((-1.0)*cj3*x1554*x1560))+(((-1.0)*cj3*x1554*x1561))+((x1552*x1555))+(((-1.0)*x1552*x1553))+x1570+(((-1.0)*x1565)));
evalcond[3]=((((-1.0)*cj3*x1554*x1562))+((x1552*x1556))+(((-1.0)*x1552*x1557))+(((-1.0)*px))+x1566+((cj3*r22*x1558))+(((-1.0)*x1569))+(((-1.0)*cj3*x1554*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1571=(cj4*sj1);
IkReal x1572=(cj1*cj4);
IkReal x1573=(cj5*sj4);
IkReal x1574=((1.0)*cj1);
IkReal x1575=(sj4*sj5);
IkReal x1576=(sj1*x1575);
if( IKabs((((r20*x1576))+(((-1.0)*r00*x1574*x1575))+((r22*x1571))+(((-1.0)*r01*x1573*x1574))+(((-1.0)*r02*x1572))+((r21*sj1*x1573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1575))+((r02*x1571))+((r22*x1572))+((r01*sj1*x1573))+((cj1*r21*x1573))+((r00*x1576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1576))+(((-1.0)*r00*x1574*x1575))+((r22*x1571))+(((-1.0)*r01*x1573*x1574))+(((-1.0)*r02*x1572))+((r21*sj1*x1573))))+IKsqr((((cj1*r20*x1575))+((r02*x1571))+((r22*x1572))+((r01*sj1*x1573))+((cj1*r21*x1573))+((r00*x1576))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1576))+(((-1.0)*r00*x1574*x1575))+((r22*x1571))+(((-1.0)*r01*x1573*x1574))+(((-1.0)*r02*x1572))+((r21*sj1*x1573))), (((cj1*r20*x1575))+((r02*x1571))+((r22*x1572))+((r01*sj1*x1573))+((cj1*r21*x1573))+((r00*x1576))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1577=IKcos(j2);
IkReal x1578=IKsin(j2);
IkReal x1579=(cj3*sj4);
IkReal x1580=((1.0)*cj5);
IkReal x1581=((1.0)*cj4);
IkReal x1582=(cj3*cj4);
IkReal x1583=(r21*sj5);
IkReal x1584=(cj3*sj5);
IkReal x1585=((0.03868)*cj5);
IkReal x1586=(r01*sj5);
IkReal x1587=(sj1*x1577);
IkReal x1588=(cj1*x1577);
IkReal x1589=((1.0)*sj4*sj5);
IkReal x1590=(sj1*x1578);
IkReal x1591=(cj1*x1578);
IkReal x1592=((1.0)*x1591);
evalcond[0]=((((-1.0)*r21*sj4*x1580))+x1588+x1590+(((-1.0)*r22*x1581))+(((-1.0)*r20*x1589)));
evalcond[1]=((((-1.0)*x1592))+(((-1.0)*r01*sj4*x1580))+(((-1.0)*r02*x1581))+(((-1.0)*r00*x1589))+x1587);
evalcond[2]=((((-0.39225)*x1588))+(((-0.39225)*x1590))+(((0.03868)*x1583))+(((-1.0)*pz))+(((-1.0)*r20*x1585))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x1587))+(((0.03868)*x1586))+(((0.39225)*x1591))+(((-1.0)*r00*x1585))+(((-1.0)*px))+(((-0.425001)*sj1)));
evalcond[4]=(((sj3*x1583))+(((-1.0)*x1592))+(((-1.0)*r20*x1581*x1584))+(((-1.0)*r21*x1580*x1582))+x1587+((r22*x1579))+(((-1.0)*r20*sj3*x1580)));
evalcond[5]=(((sj3*x1586))+(((-1.0)*r01*x1580*x1582))+((r02*x1579))+(((-1.0)*x1588))+(((-1.0)*x1590))+(((-1.0)*r00*sj3*x1580))+(((-1.0)*r00*x1581*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1593=((0.9229390048494)*cj4);
IkReal x1594=((0.9229390048494)*sj4);
IkReal x1595=((0.0910115505610575)*cj5);
IkReal x1596=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((r00*x1595))+((r00*sj5*x1594))+((cj5*r01*x1594))+(((-1.0)*r01*x1596))+((r02*x1593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1594))+(((-1.0)*r22*x1593))+(((-1.0)*r20*x1595))+((r21*x1596))+(((-1.0)*r20*sj5*x1594))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((r00*x1595))+((r00*sj5*x1594))+((cj5*r01*x1594))+(((-1.0)*r01*x1596))+((r02*x1593))))+IKsqr(((((-1.0)*cj5*r21*x1594))+(((-1.0)*r22*x1593))+(((-1.0)*r20*x1595))+((r21*x1596))+(((-1.0)*r20*sj5*x1594))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((r00*x1595))+((r00*sj5*x1594))+((cj5*r01*x1594))+(((-1.0)*r01*x1596))+((r02*x1593))), ((((-1.0)*cj5*r21*x1594))+(((-1.0)*r22*x1593))+(((-1.0)*r20*x1595))+((r21*x1596))+(((-1.0)*r20*sj5*x1594))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1597=((1.0)*px);
IkReal x1598=((0.39225)*sj3);
IkReal x1599=(cj5*r00);
IkReal x1600=((0.39225)*cj4);
IkReal x1601=(r01*sj5);
IkReal x1602=(r21*sj5);
IkReal x1603=(cj5*r20);
IkReal x1604=((0.39225)*sj4);
IkReal x1605=(r20*sj5);
IkReal x1606=(r00*sj5);
IkReal x1607=(cj5*r01);
IkReal x1608=(cj5*r21);
IkReal x1609=((0.425001)*(IKsin(j1)));
IkReal x1610=((0.03868)*x1601);
IkReal x1611=((0.03868)*x1599);
IkReal x1612=((0.03868)*x1602);
IkReal x1613=((0.425001)*(IKcos(j1)));
IkReal x1614=((0.03868)*x1603);
IkReal x1615=(x1611+x1597);
IkReal x1616=(x1614+x1613);
IkReal x1617=(x1610+x1609);
evalcond[0]=(x1616+(((-1.0)*x1612))+((r22*x1600))+pz+((x1604*x1605))+((x1604*x1608)));
evalcond[1]=(x1617+(((-1.0)*x1615))+(((-1.0)*r02*x1600))+(((-1.0)*x1604*x1607))+(((-1.0)*x1604*x1606)));
evalcond[2]=(x1617+(((-1.0)*x1615))+((cj3*x1600*x1608))+((cj3*x1600*x1605))+((x1598*x1603))+(((-1.0)*cj3*r22*x1604))+(((-1.0)*x1598*x1602)));
evalcond[3]=(x1612+(((-1.0)*x1616))+((cj3*r02*x1604))+(((-1.0)*cj3*x1600*x1606))+(((-1.0)*cj3*x1600*x1607))+(((-1.0)*pz))+((x1598*x1601))+(((-1.0)*x1598*x1599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1618=(cj4*r22);
IkReal x1619=((1.0)*sj1);
IkReal x1620=(cj5*sj4);
IkReal x1621=(cj4*r02);
IkReal x1622=(sj4*sj5);
if( IKabs((((cj1*r01*x1620))+((cj1*r00*x1622))+((sj1*x1618))+((r20*sj1*x1622))+((cj1*x1621))+((r21*sj1*x1620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1619*x1621))+(((-1.0)*r01*x1619*x1620))+((cj1*r21*x1620))+((cj1*r20*x1622))+(((-1.0)*r00*x1619*x1622))+((cj1*x1618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01*x1620))+((cj1*r00*x1622))+((sj1*x1618))+((r20*sj1*x1622))+((cj1*x1621))+((r21*sj1*x1620))))+IKsqr(((((-1.0)*x1619*x1621))+(((-1.0)*r01*x1619*x1620))+((cj1*r21*x1620))+((cj1*r20*x1622))+(((-1.0)*r00*x1619*x1622))+((cj1*x1618))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r01*x1620))+((cj1*r00*x1622))+((sj1*x1618))+((r20*sj1*x1622))+((cj1*x1621))+((r21*sj1*x1620))), ((((-1.0)*x1619*x1621))+(((-1.0)*r01*x1619*x1620))+((cj1*r21*x1620))+((cj1*r20*x1622))+(((-1.0)*r00*x1619*x1622))+((cj1*x1618))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1623=IKsin(j2);
IkReal x1624=IKcos(j2);
IkReal x1625=(cj3*sj4);
IkReal x1626=((1.0)*cj5);
IkReal x1627=(cj3*cj4);
IkReal x1628=(r21*sj5);
IkReal x1629=((0.03868)*cj5);
IkReal x1630=((1.0)*cj4);
IkReal x1631=(r01*sj5);
IkReal x1632=(cj1*x1624);
IkReal x1633=(sj1*x1623);
IkReal x1634=(cj1*x1623);
IkReal x1635=(sj1*x1624);
IkReal x1636=((1.0)*r20*sj5);
IkReal x1637=((1.0)*r00*sj5);
IkReal x1638=(x1632+x1633);
evalcond[0]=((((-1.0)*sj4*x1636))+(((-1.0)*r22*x1630))+x1638+(((-1.0)*r21*sj4*x1626)));
evalcond[1]=((((-1.0)*sj4*x1637))+x1634+(((-1.0)*x1635))+(((-1.0)*r01*sj4*x1626))+(((-1.0)*r02*x1630)));
evalcond[2]=((((-1.0)*r20*x1629))+(((-1.0)*pz))+(((0.03868)*x1628))+(((-0.39225)*x1633))+(((-0.39225)*x1632))+(((-0.425001)*cj1)));
evalcond[3]=((((0.03868)*x1631))+(((-1.0)*r00*x1629))+(((-1.0)*px))+(((0.39225)*x1635))+(((0.425001)*sj1))+(((-0.39225)*x1634)));
evalcond[4]=(((r02*x1625))+(((-1.0)*r00*sj3*x1626))+x1638+((sj3*x1631))+(((-1.0)*r01*x1626*x1627))+(((-1.0)*x1627*x1637)));
evalcond[5]=(((sj3*x1628))+x1635+(((-1.0)*x1634))+((r22*x1625))+(((-1.0)*r21*x1626*x1627))+(((-1.0)*r20*sj3*x1626))+(((-1.0)*x1627*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1639=((0.9229390048494)*sj4);
IkReal x1640=((0.0910115505610575)*cj5);
IkReal x1641=((0.9229390048494)*cj4);
IkReal x1642=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+((r10*x1640))+(((-1.0)*r11*x1642))+((r12*x1641))+((cj5*r11*x1639))+((r10*sj5*x1639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1642))+(((-1.0)*r22*x1641))+(((-1.0)*cj5*r21*x1639))+(((-1.0)*r20*x1640))+(((-1.0)*r20*sj5*x1639))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+((r10*x1640))+(((-1.0)*r11*x1642))+((r12*x1641))+((cj5*r11*x1639))+((r10*sj5*x1639))))+IKsqr((((r21*x1642))+(((-1.0)*r22*x1641))+(((-1.0)*cj5*r21*x1639))+(((-1.0)*r20*x1640))+(((-1.0)*r20*sj5*x1639))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+((r10*x1640))+(((-1.0)*r11*x1642))+((r12*x1641))+((cj5*r11*x1639))+((r10*sj5*x1639))), (((r21*x1642))+(((-1.0)*r22*x1641))+(((-1.0)*cj5*r21*x1639))+(((-1.0)*r20*x1640))+(((-1.0)*r20*sj5*x1639))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1643=((1.0)*py);
IkReal x1644=((0.39225)*r10);
IkReal x1645=(sj4*sj5);
IkReal x1646=(cj5*sj3);
IkReal x1647=((0.39225)*r11);
IkReal x1648=(sj3*sj5);
IkReal x1649=(cj3*cj4);
IkReal x1650=((0.03868)*sj5);
IkReal x1651=((0.39225)*r21);
IkReal x1652=((0.03868)*cj5);
IkReal x1653=((0.39225)*cj4);
IkReal x1654=((0.39225)*r20);
IkReal x1655=(cj5*sj4);
IkReal x1656=(r11*x1650);
IkReal x1657=((0.425001)*(IKsin(j1)));
IkReal x1658=(r10*x1652);
IkReal x1659=(r21*x1650);
IkReal x1660=((0.425001)*(IKcos(j1)));
IkReal x1661=(r20*x1652);
IkReal x1662=((0.39225)*cj3*sj4);
IkReal x1663=(x1658+x1643);
IkReal x1664=(x1661+x1660);
IkReal x1665=(x1656+x1657);
evalcond[0]=(((r22*x1653))+x1664+((x1645*x1654))+(((-1.0)*x1659))+pz+((x1651*x1655)));
evalcond[1]=((((-1.0)*x1644*x1645))+x1665+(((-1.0)*x1647*x1655))+(((-1.0)*r12*x1653))+(((-1.0)*x1663)));
evalcond[2]=(((cj5*x1649*x1651))+x1665+((sj5*x1649*x1654))+(((-1.0)*r22*x1662))+((x1646*x1654))+(((-1.0)*x1663))+(((-1.0)*x1648*x1651)));
evalcond[3]=(((r12*x1662))+(((-1.0)*x1644*x1646))+x1659+(((-1.0)*sj5*x1644*x1649))+(((-1.0)*pz))+((x1647*x1648))+(((-1.0)*x1664))+(((-1.0)*cj5*x1647*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1666=(cj4*r12);
IkReal x1667=((1.0)*sj1);
IkReal x1668=(cj4*r22);
IkReal x1669=(sj4*sj5);
IkReal x1670=(cj5*sj4);
IkReal x1671=(cj1*x1670);
if( IKabs((((sj1*x1668))+((r21*sj1*x1670))+((cj1*x1666))+((r20*sj1*x1669))+((cj1*r10*x1669))+((r11*x1671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1671))+((cj1*x1668))+((cj1*r20*x1669))+(((-1.0)*r10*x1667*x1669))+(((-1.0)*r11*x1667*x1670))+(((-1.0)*x1666*x1667)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1668))+((r21*sj1*x1670))+((cj1*x1666))+((r20*sj1*x1669))+((cj1*r10*x1669))+((r11*x1671))))+IKsqr((((r21*x1671))+((cj1*x1668))+((cj1*r20*x1669))+(((-1.0)*r10*x1667*x1669))+(((-1.0)*r11*x1667*x1670))+(((-1.0)*x1666*x1667))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1668))+((r21*sj1*x1670))+((cj1*x1666))+((r20*sj1*x1669))+((cj1*r10*x1669))+((r11*x1671))), (((r21*x1671))+((cj1*x1668))+((cj1*r20*x1669))+(((-1.0)*r10*x1667*x1669))+(((-1.0)*r11*x1667*x1670))+(((-1.0)*x1666*x1667))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1672=IKsin(j2);
IkReal x1673=IKcos(j2);
IkReal x1674=((1.0)*cj4);
IkReal x1675=(sj3*sj5);
IkReal x1676=((0.03868)*sj5);
IkReal x1677=(cj3*sj4);
IkReal x1678=(cj3*sj5);
IkReal x1679=((0.03868)*cj5);
IkReal x1680=(cj5*r21);
IkReal x1681=((1.0)*sj4);
IkReal x1682=(cj5*r11);
IkReal x1683=(cj1*x1673);
IkReal x1684=(sj1*x1672);
IkReal x1685=((1.0)*cj5*sj3);
IkReal x1686=(cj1*x1672);
IkReal x1687=(sj5*x1681);
IkReal x1688=(sj1*x1673);
IkReal x1689=(x1683+x1684);
evalcond[0]=(x1689+(((-1.0)*r20*x1687))+(((-1.0)*x1680*x1681))+(((-1.0)*r22*x1674)));
evalcond[1]=((((-1.0)*x1681*x1682))+(((-1.0)*r10*x1687))+x1686+(((-1.0)*x1688))+(((-1.0)*r12*x1674)));
evalcond[2]=(((r21*x1676))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-1.0)*r20*x1679))+(((-0.39225)*x1683))+(((-0.39225)*x1684)));
evalcond[3]=((((0.39225)*x1688))+(((-1.0)*r10*x1679))+(((-1.0)*py))+(((0.425001)*sj1))+((r11*x1676))+(((-0.39225)*x1686)));
evalcond[4]=((((-1.0)*r10*x1674*x1678))+(((-1.0)*r10*x1685))+x1689+(((-1.0)*cj3*x1674*x1682))+((r11*x1675))+((r12*x1677)));
evalcond[5]=(((r21*x1675))+(((-1.0)*r20*x1674*x1678))+x1688+(((-1.0)*r20*x1685))+(((-1.0)*x1686))+(((-1.0)*cj3*x1674*x1680))+((r22*x1677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1690=((0.9229390048494)*sj4);
IkReal x1691=((0.0910115505610575)*cj5);
IkReal x1692=((0.9229390048494)*cj4);
IkReal x1693=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r11*x1690))+(((-1.0)*r12*x1692))+((r11*x1693))+(((-1.0)*r10*sj5*x1690))+(((-1.0)*r10*x1691))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x1693))+(((-1.0)*r20*x1691))+(((-1.0)*cj5*r21*x1690))+(((-1.0)*r22*x1692))+(((-1.0)*r20*sj5*x1690))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x1690))+(((-1.0)*r12*x1692))+((r11*x1693))+(((-1.0)*r10*sj5*x1690))+(((-1.0)*r10*x1691))+(((-2.35293564015143)*py))))+IKsqr((((r21*x1693))+(((-1.0)*r20*x1691))+(((-1.0)*cj5*r21*x1690))+(((-1.0)*r22*x1692))+(((-1.0)*r20*sj5*x1690))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r11*x1690))+(((-1.0)*r12*x1692))+((r11*x1693))+(((-1.0)*r10*sj5*x1690))+(((-1.0)*r10*x1691))+(((-2.35293564015143)*py))), (((r21*x1693))+(((-1.0)*r20*x1691))+(((-1.0)*cj5*r21*x1690))+(((-1.0)*r22*x1692))+(((-1.0)*r20*sj5*x1690))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1694=((0.39225)*r10);
IkReal x1695=(sj4*sj5);
IkReal x1696=(cj5*sj3);
IkReal x1697=((0.39225)*r11);
IkReal x1698=(sj3*sj5);
IkReal x1699=(cj3*cj4);
IkReal x1700=((0.03868)*sj5);
IkReal x1701=((0.39225)*r21);
IkReal x1702=((0.03868)*cj5);
IkReal x1703=((0.39225)*cj4);
IkReal x1704=((0.39225)*r20);
IkReal x1705=(cj5*sj4);
IkReal x1706=((0.425001)*(IKcos(j1)));
IkReal x1707=(r20*x1702);
IkReal x1708=(r21*x1700);
IkReal x1709=(r11*x1700);
IkReal x1710=((0.425001)*(IKsin(j1)));
IkReal x1711=(r10*x1702);
IkReal x1712=((0.39225)*cj3*sj4);
IkReal x1713=(x1711+x1710);
IkReal x1714=(x1706+x1707+pz);
evalcond[0]=(((x1697*x1705))+((r12*x1703))+x1713+(((-1.0)*x1709))+py+((x1694*x1695)));
evalcond[1]=(((r22*x1703))+x1714+(((-1.0)*x1708))+((x1701*x1705))+((x1695*x1704)));
evalcond[2]=((((-1.0)*sj5*x1694*x1699))+x1714+(((-1.0)*cj5*x1697*x1699))+((r12*x1712))+(((-1.0)*x1694*x1696))+(((-1.0)*x1708))+((x1697*x1698)));
evalcond[3]=((((-1.0)*cj5*x1699*x1701))+((r22*x1712))+(((-1.0)*sj5*x1699*x1704))+x1709+(((-1.0)*x1713))+(((-1.0)*py))+(((-1.0)*x1696*x1704))+((x1698*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1715=(cj5*sj4);
IkReal x1716=(cj1*cj4);
IkReal x1717=(cj4*sj1);
IkReal x1718=((1.0)*cj1);
IkReal x1719=(sj4*sj5);
if( IKabs(((((-1.0)*r10*x1718*x1719))+((r22*x1717))+((r21*sj1*x1715))+(((-1.0)*r11*x1715*x1718))+(((-1.0)*r12*x1716))+((r20*sj1*x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1716))+((cj1*r20*x1719))+((r12*x1717))+((cj1*r21*x1715))+((r11*sj1*x1715))+((r10*sj1*x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1718*x1719))+((r22*x1717))+((r21*sj1*x1715))+(((-1.0)*r11*x1715*x1718))+(((-1.0)*r12*x1716))+((r20*sj1*x1719))))+IKsqr((((r22*x1716))+((cj1*r20*x1719))+((r12*x1717))+((cj1*r21*x1715))+((r11*sj1*x1715))+((r10*sj1*x1719))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1718*x1719))+((r22*x1717))+((r21*sj1*x1715))+(((-1.0)*r11*x1715*x1718))+(((-1.0)*r12*x1716))+((r20*sj1*x1719))), (((r22*x1716))+((cj1*r20*x1719))+((r12*x1717))+((cj1*r21*x1715))+((r11*sj1*x1715))+((r10*sj1*x1719))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1720=IKcos(j2);
IkReal x1721=IKsin(j2);
IkReal x1722=((1.0)*cj4);
IkReal x1723=(sj3*sj5);
IkReal x1724=((0.03868)*sj5);
IkReal x1725=(cj5*r21);
IkReal x1726=(cj3*sj5);
IkReal x1727=((0.03868)*cj5);
IkReal x1728=(cj3*sj4);
IkReal x1729=((1.0)*sj4);
IkReal x1730=(cj5*r11);
IkReal x1731=(sj1*x1720);
IkReal x1732=(cj1*x1720);
IkReal x1733=((1.0)*cj5*sj3);
IkReal x1734=(sj5*x1729);
IkReal x1735=(sj1*x1721);
IkReal x1736=(cj1*x1721);
IkReal x1737=((1.0)*x1736);
evalcond[0]=((((-1.0)*r22*x1722))+x1732+x1735+(((-1.0)*x1725*x1729))+(((-1.0)*r20*x1734)));
evalcond[1]=((((-1.0)*r10*x1734))+x1731+(((-1.0)*r12*x1722))+(((-1.0)*x1729*x1730))+(((-1.0)*x1737)));
evalcond[2]=(((r21*x1724))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-1.0)*r20*x1727))+(((-0.39225)*x1732))+(((-0.39225)*x1735)));
evalcond[3]=((((-1.0)*r10*x1727))+(((0.39225)*x1736))+(((-1.0)*py))+((r11*x1724))+(((-0.425001)*sj1))+(((-0.39225)*x1731)));
evalcond[4]=((((-1.0)*r20*x1722*x1726))+(((-1.0)*cj3*x1722*x1725))+x1731+((r21*x1723))+((r22*x1728))+(((-1.0)*x1737))+(((-1.0)*r20*x1733)));
evalcond[5]=((((-1.0)*cj3*x1722*x1730))+(((-1.0)*r10*x1733))+(((-1.0)*r10*x1722*x1726))+((r11*x1723))+((r12*x1728))+(((-1.0)*x1732))+(((-1.0)*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1738=((0.39225)*cj0);
IkReal x1739=((0.9229390048494)*sj4);
IkReal x1740=((0.03868)*cj0);
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(cj0,-2);
if(!x1741.valid){
continue;
}
if( IKabs(((-2.35293564015143)*(x1741.value)*(((((-1.0)*cj4*r12*x1738))+(((-1.0)*r10*sj4*sj5*x1738))+(((-1.0)*cj5*r11*sj4*x1738))+((r11*sj5*x1740))+(((-1.0)*cj5*r10*x1740))+(((-0.032446)*cj0*sj0))+(((-1.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x1739))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x1739))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.35293564015143)*(x1741.value)*(((((-1.0)*cj4*r12*x1738))+(((-1.0)*r10*sj4*sj5*x1738))+(((-1.0)*cj5*r11*sj4*x1738))+((r11*sj5*x1740))+(((-1.0)*cj5*r10*x1740))+(((-0.032446)*cj0*sj0))+(((-1.0)*cj0*py))))))+IKsqr(((((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x1739))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x1739))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.35293564015143)*(x1741.value)*(((((-1.0)*cj4*r12*x1738))+(((-1.0)*r10*sj4*sj5*x1738))+(((-1.0)*cj5*r11*sj4*x1738))+((r11*sj5*x1740))+(((-1.0)*cj5*r10*x1740))+(((-0.032446)*cj0*sj0))+(((-1.0)*cj0*py))))), ((((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x1739))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-1.0)*cj5*r21*x1739))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1742=IKsin(j1);
IkReal x1743=IKcos(j1);
IkReal x1744=sj0*sj0;
IkReal x1745=cj0*cj0;
IkReal x1746=(r00*sj4);
IkReal x1747=((0.425001)*cj0);
IkReal x1748=(cj3*cj4);
IkReal x1749=(cj5*r00);
IkReal x1750=((0.03868)*sj0);
IkReal x1751=((0.39225)*sj4);
IkReal x1752=(r10*sj5);
IkReal x1753=((1.0)*cj0);
IkReal x1754=((0.39225)*sj3);
IkReal x1755=(cj0*cj5);
IkReal x1756=(cj5*r10);
IkReal x1757=(r11*sj5);
IkReal x1758=(r01*sj5);
IkReal x1759=(cj3*r22);
IkReal x1760=(cj5*r11);
IkReal x1761=((0.03868)*r20);
IkReal x1762=((0.03868)*cj0);
IkReal x1763=((0.39225)*cj4);
IkReal x1764=((0.032446)*cj0);
IkReal x1765=(r20*sj5);
IkReal x1766=((0.39225)*sj5);
IkReal x1767=(cj5*sj0);
IkReal x1768=((0.39225)*r21);
IkReal x1769=(r21*sj5);
IkReal x1770=(sj0*x1764);
IkReal x1771=(cj0*x1766);
IkReal x1772=(sj0*x1763);
IkReal x1773=((0.03868)*x1769);
IkReal x1774=((0.425001)*x1742);
IkReal x1775=((0.425001)*x1743);
IkReal x1776=(sj0*x1742*x1747);
evalcond[0]=(((cj5*r21*x1751))+x1775+((x1751*x1765))+((cj5*x1761))+(((-1.0)*x1773))+pz+((r22*x1763)));
evalcond[1]=((((-1.0)*cj0*x1751*x1752))+(((-0.03868)*r10*x1755))+(((-1.0)*cj0*r12*x1763))+((x1757*x1762))+(((-1.0)*x1770))+(((-1.0)*py*x1753))+(((-1.0)*r11*x1751*x1755))+((x1745*x1774)));
evalcond[2]=(((r01*x1751*x1767))+((x1749*x1750))+x1770+((sj0*x1746*x1766))+((r02*x1772))+(((-1.0)*x1750*x1758))+((x1744*x1774))+((px*sj0)));
evalcond[3]=((((-1.0)*x1750*x1769))+((x1754*x1758))+(((-1.0)*x1749*x1754))+(((-1.0)*r00*x1748*x1766))+(((-0.39225)*cj5*r01*x1748))+((pz*sj0))+((cj5*r20*x1750))+((sj0*x1775))+((cj3*r02*x1751)));
evalcond[4]=(((x1754*x1757))+(((-0.39225)*x1748*x1760))+(((-1.0)*x1755*x1761))+((x1762*x1769))+(((-1.0)*pz*x1753))+(((-0.39225)*x1748*x1752))+(((-1.0)*x1754*x1756))+(((-1.0)*x1743*x1747))+((cj3*r12*x1751)));
evalcond[5]=((((0.39225)*cj0*x1748*x1765))+(((-0.032446)*sj0))+(((-1.0)*cj0*x1751*x1759))+((r20*x1754*x1755))+(((-1.0)*cj0*x1754*x1769))+((x1748*x1755*x1768))+(((-1.0)*py))+(((0.03868)*x1757))+((x1742*x1747))+(((-0.03868)*x1756)));
evalcond[6]=(((sj0*x1754*x1769))+(((-1.0)*x1748*x1767*x1768))+(((-1.0)*x1764))+(((-1.0)*r20*x1754*x1767))+(((-1.0)*px))+(((-1.0)*sj0*x1774))+(((0.03868)*x1758))+((sj0*x1751*x1759))+(((-0.03868)*x1749))+(((-0.39225)*sj0*x1748*x1765)));
evalcond[7]=((((0.032446)*x1744))+((x1750*x1756))+(((-1.0)*x1750*x1757))+(((-1.0)*x1776))+(((-1.0)*cj0*r02*x1763))+(((-1.0)*x1746*x1771))+((py*sj0))+(((-1.0)*r01*x1751*x1755)));
evalcond[8]=(((r12*x1772))+((sj0*x1751*x1760))+(((-1.0)*x1776))+((x1758*x1762))+(((-0.032446)*x1745))+(((-1.0)*px*x1753))+((sj0*x1751*x1752))+(((-1.0)*x1749*x1762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1777=(cj4*sj1);
IkReal x1778=(cj1*cj4);
IkReal x1779=(cj5*sj4);
IkReal x1780=((1.0)*cj1);
IkReal x1781=(sj4*sj5);
IkReal x1782=(sj1*x1781);
if( IKabs((((r20*x1782))+((r22*x1777))+((r21*sj1*x1779))+(((-1.0)*r00*x1780*x1781))+(((-1.0)*r01*x1779*x1780))+(((-1.0)*r02*x1778)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1778))+((r01*sj1*x1779))+((cj1*r21*x1779))+((r02*x1777))+((cj1*r20*x1781))+((r00*x1782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1782))+((r22*x1777))+((r21*sj1*x1779))+(((-1.0)*r00*x1780*x1781))+(((-1.0)*r01*x1779*x1780))+(((-1.0)*r02*x1778))))+IKsqr((((r22*x1778))+((r01*sj1*x1779))+((cj1*r21*x1779))+((r02*x1777))+((cj1*r20*x1781))+((r00*x1782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1782))+((r22*x1777))+((r21*sj1*x1779))+(((-1.0)*r00*x1780*x1781))+(((-1.0)*r01*x1779*x1780))+(((-1.0)*r02*x1778))), (((r22*x1778))+((r01*sj1*x1779))+((cj1*r21*x1779))+((r02*x1777))+((cj1*r20*x1781))+((r00*x1782))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1783=IKcos(j2);
IkReal x1784=IKsin(j2);
IkReal x1785=(cj3*sj4);
IkReal x1786=((1.0)*cj5);
IkReal x1787=((1.0)*cj4);
IkReal x1788=(cj3*cj4);
IkReal x1789=(r21*sj5);
IkReal x1790=(cj3*sj5);
IkReal x1791=((0.03868)*cj5);
IkReal x1792=(r01*sj5);
IkReal x1793=(sj1*x1783);
IkReal x1794=(cj1*x1783);
IkReal x1795=((1.0)*sj4*sj5);
IkReal x1796=(sj1*x1784);
IkReal x1797=(cj1*x1784);
IkReal x1798=((1.0)*x1797);
evalcond[0]=(x1796+x1794+(((-1.0)*r22*x1787))+(((-1.0)*r20*x1795))+(((-1.0)*r21*sj4*x1786)));
evalcond[1]=((((-1.0)*x1798))+x1793+(((-1.0)*r00*x1795))+(((-1.0)*r01*sj4*x1786))+(((-1.0)*r02*x1787)));
evalcond[2]=((((-0.39225)*x1796))+(((-0.39225)*x1794))+(((-1.0)*pz))+(((0.03868)*x1789))+(((-1.0)*r20*x1791))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x1793))+(((-1.0)*r00*x1791))+(((0.03868)*x1792))+(((-1.0)*px))+(((0.39225)*x1797))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*x1798))+((sj3*x1789))+x1793+(((-1.0)*r20*sj3*x1786))+((r22*x1785))+(((-1.0)*r20*x1787*x1790))+(((-1.0)*r21*x1786*x1788)));
evalcond[5]=((((-1.0)*r00*x1787*x1790))+((sj3*x1792))+(((-1.0)*r00*sj3*x1786))+(((-1.0)*r01*x1786*x1788))+((r02*x1785))+(((-1.0)*x1796))+(((-1.0)*x1794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1799=(cj4*r22);
IkReal x1800=((1.0)*sj1);
IkReal x1801=(cj5*sj4);
IkReal x1802=(cj4*r02);
IkReal x1803=(sj4*sj5);
if( IKabs((((r21*sj1*x1801))+((sj1*x1799))+((cj1*r01*x1801))+((cj1*r00*x1803))+((r20*sj1*x1803))+((cj1*x1802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1800*x1801))+((cj1*r21*x1801))+(((-1.0)*r00*x1800*x1803))+((cj1*x1799))+((cj1*r20*x1803))+(((-1.0)*x1800*x1802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1801))+((sj1*x1799))+((cj1*r01*x1801))+((cj1*r00*x1803))+((r20*sj1*x1803))+((cj1*x1802))))+IKsqr(((((-1.0)*r01*x1800*x1801))+((cj1*r21*x1801))+(((-1.0)*r00*x1800*x1803))+((cj1*x1799))+((cj1*r20*x1803))+(((-1.0)*x1800*x1802))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1801))+((sj1*x1799))+((cj1*r01*x1801))+((cj1*r00*x1803))+((r20*sj1*x1803))+((cj1*x1802))), ((((-1.0)*r01*x1800*x1801))+((cj1*r21*x1801))+(((-1.0)*r00*x1800*x1803))+((cj1*x1799))+((cj1*r20*x1803))+(((-1.0)*x1800*x1802))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1804=IKsin(j2);
IkReal x1805=IKcos(j2);
IkReal x1806=(cj3*sj4);
IkReal x1807=((1.0)*cj5);
IkReal x1808=(cj3*cj4);
IkReal x1809=(r21*sj5);
IkReal x1810=((0.03868)*cj5);
IkReal x1811=((1.0)*cj4);
IkReal x1812=(r01*sj5);
IkReal x1813=(cj1*x1805);
IkReal x1814=(sj1*x1804);
IkReal x1815=(cj1*x1804);
IkReal x1816=(sj1*x1805);
IkReal x1817=((1.0)*r20*sj5);
IkReal x1818=((1.0)*r00*sj5);
IkReal x1819=(x1814+x1813);
evalcond[0]=((((-1.0)*r21*sj4*x1807))+x1819+(((-1.0)*sj4*x1817))+(((-1.0)*r22*x1811)));
evalcond[1]=((((-1.0)*r02*x1811))+x1815+(((-1.0)*sj4*x1818))+(((-1.0)*r01*sj4*x1807))+(((-1.0)*x1816)));
evalcond[2]=((((0.03868)*x1809))+(((-1.0)*pz))+(((-0.39225)*x1814))+(((-0.39225)*x1813))+(((-0.425001)*cj1))+(((-1.0)*r20*x1810)));
evalcond[3]=((((0.03868)*x1812))+(((-1.0)*px))+(((-1.0)*r00*x1810))+(((0.39225)*x1816))+(((-0.39225)*x1815))+(((0.425001)*sj1)));
evalcond[4]=((((-1.0)*r00*sj3*x1807))+((sj3*x1812))+(((-1.0)*r01*x1807*x1808))+(((-1.0)*x1808*x1818))+((r02*x1806))+x1819);
evalcond[5]=((((-1.0)*x1808*x1817))+((r22*x1806))+((sj3*x1809))+(((-1.0)*r21*x1807*x1808))+x1816+(((-1.0)*r20*sj3*x1807))+(((-1.0)*x1815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1820=(cj4*r12);
IkReal x1821=((1.0)*sj1);
IkReal x1822=(cj4*r22);
IkReal x1823=(sj4*sj5);
IkReal x1824=(cj5*sj4);
IkReal x1825=(cj1*x1824);
if( IKabs((((cj1*x1820))+((sj1*x1822))+((r21*sj1*x1824))+((r11*x1825))+((r20*sj1*x1823))+((cj1*r10*x1823)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1822))+(((-1.0)*r10*x1821*x1823))+((cj1*r20*x1823))+(((-1.0)*r11*x1821*x1824))+(((-1.0)*x1820*x1821))+((r21*x1825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1820))+((sj1*x1822))+((r21*sj1*x1824))+((r11*x1825))+((r20*sj1*x1823))+((cj1*r10*x1823))))+IKsqr((((cj1*x1822))+(((-1.0)*r10*x1821*x1823))+((cj1*r20*x1823))+(((-1.0)*r11*x1821*x1824))+(((-1.0)*x1820*x1821))+((r21*x1825))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1820))+((sj1*x1822))+((r21*sj1*x1824))+((r11*x1825))+((r20*sj1*x1823))+((cj1*r10*x1823))), (((cj1*x1822))+(((-1.0)*r10*x1821*x1823))+((cj1*r20*x1823))+(((-1.0)*r11*x1821*x1824))+(((-1.0)*x1820*x1821))+((r21*x1825))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1826=IKsin(j2);
IkReal x1827=IKcos(j2);
IkReal x1828=((1.0)*cj4);
IkReal x1829=(sj3*sj5);
IkReal x1830=((0.03868)*sj5);
IkReal x1831=(cj3*sj4);
IkReal x1832=(cj3*sj5);
IkReal x1833=((0.03868)*cj5);
IkReal x1834=(cj5*r21);
IkReal x1835=((1.0)*sj4);
IkReal x1836=(cj5*r11);
IkReal x1837=(cj1*x1827);
IkReal x1838=(sj1*x1826);
IkReal x1839=((1.0)*cj5*sj3);
IkReal x1840=(cj1*x1826);
IkReal x1841=(sj5*x1835);
IkReal x1842=(sj1*x1827);
IkReal x1843=(x1837+x1838);
evalcond[0]=((((-1.0)*x1834*x1835))+(((-1.0)*r22*x1828))+x1843+(((-1.0)*r20*x1841)));
evalcond[1]=((((-1.0)*r10*x1841))+(((-1.0)*x1835*x1836))+(((-1.0)*r12*x1828))+x1840+(((-1.0)*x1842)));
evalcond[2]=((((-1.0)*r20*x1833))+(((-1.0)*pz))+((r21*x1830))+(((-0.39225)*x1838))+(((-0.39225)*x1837))+(((-0.425001)*cj1)));
evalcond[3]=((((-1.0)*r10*x1833))+(((-1.0)*py))+((r11*x1830))+(((0.425001)*sj1))+(((0.39225)*x1842))+(((-0.39225)*x1840)));
evalcond[4]=((((-1.0)*r10*x1839))+x1843+((r12*x1831))+((r11*x1829))+(((-1.0)*r10*x1828*x1832))+(((-1.0)*cj3*x1828*x1836)));
evalcond[5]=((((-1.0)*r20*x1839))+((r22*x1831))+x1842+(((-1.0)*x1840))+(((-1.0)*r20*x1828*x1832))+((r21*x1829))+(((-1.0)*cj3*x1828*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1844=(cj5*sj4);
IkReal x1845=(cj1*cj4);
IkReal x1846=(cj4*sj1);
IkReal x1847=((1.0)*cj1);
IkReal x1848=(sj4*sj5);
if( IKabs((((r22*x1846))+(((-1.0)*r11*x1844*x1847))+((r21*sj1*x1844))+((r20*sj1*x1848))+(((-1.0)*r12*x1845))+(((-1.0)*r10*x1847*x1848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1845))+((cj1*r21*x1844))+((r10*sj1*x1848))+((r11*sj1*x1844))+((cj1*r20*x1848))+((r12*x1846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1846))+(((-1.0)*r11*x1844*x1847))+((r21*sj1*x1844))+((r20*sj1*x1848))+(((-1.0)*r12*x1845))+(((-1.0)*r10*x1847*x1848))))+IKsqr((((r22*x1845))+((cj1*r21*x1844))+((r10*sj1*x1848))+((r11*sj1*x1844))+((cj1*r20*x1848))+((r12*x1846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1846))+(((-1.0)*r11*x1844*x1847))+((r21*sj1*x1844))+((r20*sj1*x1848))+(((-1.0)*r12*x1845))+(((-1.0)*r10*x1847*x1848))), (((r22*x1845))+((cj1*r21*x1844))+((r10*sj1*x1848))+((r11*sj1*x1844))+((cj1*r20*x1848))+((r12*x1846))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1849=IKcos(j2);
IkReal x1850=IKsin(j2);
IkReal x1851=((1.0)*cj4);
IkReal x1852=(sj3*sj5);
IkReal x1853=((0.03868)*sj5);
IkReal x1854=(cj5*r21);
IkReal x1855=(cj3*sj5);
IkReal x1856=((0.03868)*cj5);
IkReal x1857=(cj3*sj4);
IkReal x1858=((1.0)*sj4);
IkReal x1859=(cj5*r11);
IkReal x1860=(sj1*x1849);
IkReal x1861=(cj1*x1849);
IkReal x1862=((1.0)*cj5*sj3);
IkReal x1863=(sj5*x1858);
IkReal x1864=(sj1*x1850);
IkReal x1865=(cj1*x1850);
IkReal x1866=((1.0)*x1865);
evalcond[0]=((((-1.0)*r22*x1851))+(((-1.0)*r20*x1863))+x1861+x1864+(((-1.0)*x1854*x1858)));
evalcond[1]=((((-1.0)*x1858*x1859))+x1860+(((-1.0)*r12*x1851))+(((-1.0)*x1866))+(((-1.0)*r10*x1863)));
evalcond[2]=((((-1.0)*pz))+(((-0.39225)*x1861))+(((-0.39225)*x1864))+((r21*x1853))+(((-0.425001)*cj1))+(((-1.0)*r20*x1856)));
evalcond[3]=((((0.39225)*x1865))+(((-1.0)*py))+(((-0.39225)*x1860))+((r11*x1853))+(((-0.425001)*sj1))+(((-1.0)*r10*x1856)));
evalcond[4]=((((-1.0)*cj3*x1851*x1854))+((r22*x1857))+(((-1.0)*r20*x1862))+x1860+((r21*x1852))+(((-1.0)*r20*x1851*x1855))+(((-1.0)*x1866)));
evalcond[5]=((((-1.0)*r10*x1851*x1855))+(((-1.0)*cj3*x1851*x1859))+((r11*x1852))+((r12*x1857))+(((-1.0)*x1861))+(((-1.0)*x1864))+(((-1.0)*r10*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1867=(cj4*r12);
IkReal x1868=((1.0)*sj1);
IkReal x1869=(cj5*r21);
IkReal x1870=(r20*sj5);
IkReal x1871=(cj1*sj4);
IkReal x1872=(r10*sj5);
IkReal x1873=(cj5*r11*sj4);
IkReal x1874=(cj0*cj4*r22);
IkReal x1875=(cj0*sj1*sj4);
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal((((cj1*x1867))+((cj5*r11*x1871))+((x1871*x1872))+((sj1*x1874))+((x1869*x1875))+((x1870*x1875)))),IkReal(((((-1.0)*x1868*x1873))+((cj0*x1869*x1871))+(((-1.0)*x1867*x1868))+((cj0*x1870*x1871))+((cj1*x1874))+(((-1.0)*sj4*x1868*x1872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
CheckValue<IkReal> x1877=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1877.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1876.value)+(((1.5707963267949)*(x1877.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1878=IKcos(j2);
IkReal x1879=IKsin(j2);
IkReal x1880=(cj3*sj4);
IkReal x1881=((1.0)*cj4);
IkReal x1882=(sj3*sj5);
IkReal x1883=(cj3*cj5);
IkReal x1884=((1.0)*sj0);
IkReal x1885=((0.03868)*sj5);
IkReal x1886=(cj0*sj1);
IkReal x1887=(cj3*sj5);
IkReal x1888=((0.03868)*cj5);
IkReal x1889=(cj1*x1878);
IkReal x1890=((1.0)*cj5*sj3);
IkReal x1891=(cj1*x1879);
IkReal x1892=(sj1*x1879);
IkReal x1893=((1.0)*sj4*sj5);
IkReal x1894=(sj1*x1878);
IkReal x1895=((1.0)*cj5*sj4);
IkReal x1896=((0.39225)*x1894);
evalcond[0]=((((-1.0)*r22*x1881))+(((-1.0)*r21*x1895))+x1892+x1889+(((-1.0)*r20*x1893)));
evalcond[1]=(((r21*x1885))+(((-0.39225)*x1889))+(((-0.39225)*x1892))+(((-1.0)*pz))+(((-1.0)*r20*x1888))+(((-0.425001)*cj1)));
evalcond[2]=((((-1.0)*r02*x1881))+(((-1.0)*r01*x1895))+((sj0*x1894))+(((-1.0)*r00*x1893))+(((-1.0)*x1884*x1891)));
evalcond[3]=((((-1.0)*r12*x1881))+(((-1.0)*x1878*x1886))+(((-1.0)*r10*x1893))+(((-1.0)*r11*x1895))+((cj0*x1891)));
evalcond[4]=((((-0.425001)*sj0*sj1))+((r01*x1885))+(((-1.0)*px))+(((-1.0)*sj0*x1896))+(((-0.032446)*cj0))+(((-1.0)*r00*x1888))+(((0.39225)*sj0*x1891)));
evalcond[5]=((((-0.032446)*sj0))+(((-1.0)*py))+(((0.425001)*x1886))+(((-1.0)*r10*x1888))+(((0.39225)*x1878*x1886))+(((-0.39225)*cj0*x1891))+((r11*x1885)));
evalcond[6]=(((r21*x1882))+(((-1.0)*r20*x1881*x1887))+(((-1.0)*x1891))+(((-1.0)*r21*x1881*x1883))+x1894+(((-1.0)*r20*x1890))+((r22*x1880)));
evalcond[7]=(((x1879*x1886))+((r12*x1880))+(((-1.0)*r10*x1890))+(((-1.0)*r11*x1881*x1883))+((cj0*x1889))+(((-1.0)*r10*x1881*x1887))+((r11*x1882)));
evalcond[8]=((((-1.0)*r01*x1881*x1883))+((r01*x1882))+(((-1.0)*r00*x1881*x1887))+(((-1.0)*x1884*x1889))+(((-1.0)*r00*x1890))+(((-1.0)*x1884*x1892))+((r02*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1897=(cj4*sj1);
IkReal x1898=(r22*sj0);
IkReal x1899=(sj1*sj4);
IkReal x1900=(cj5*r01);
IkReal x1901=(r00*sj5);
IkReal x1902=(cj1*cj4);
IkReal x1903=(cj1*sj4);
IkReal x1904=(cj5*r21*sj0);
IkReal x1905=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1906 = IKatan2WithCheck(IkReal((((r20*sj0*sj5*x1899))+((x1897*x1898))+(((-1.0)*x1901*x1903))+((x1899*x1904))+(((-1.0)*x1900*x1903))+(((-1.0)*r02*x1902)))),IkReal((((r02*x1897))+((r20*sj0*sj5*x1903))+((x1903*x1904))+((x1898*x1902))+((x1899*x1901))+((x1899*x1900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1906.valid){
continue;
}
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1907.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1906.value)+(((1.5707963267949)*(x1907.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1908=IKcos(j2);
IkReal x1909=IKsin(j2);
IkReal x1910=(cj3*sj4);
IkReal x1911=((1.0)*cj4);
IkReal x1912=(sj3*sj5);
IkReal x1913=(cj3*cj5);
IkReal x1914=((1.0)*sj0);
IkReal x1915=((0.03868)*sj5);
IkReal x1916=(cj0*sj1);
IkReal x1917=(cj3*sj5);
IkReal x1918=((0.03868)*cj5);
IkReal x1919=(cj1*x1908);
IkReal x1920=((1.0)*cj5*sj3);
IkReal x1921=(cj1*x1909);
IkReal x1922=(sj1*x1909);
IkReal x1923=((1.0)*sj4*sj5);
IkReal x1924=(sj1*x1908);
IkReal x1925=((1.0)*cj5*sj4);
IkReal x1926=((0.39225)*x1924);
evalcond[0]=((((-1.0)*r22*x1911))+(((-1.0)*r21*x1925))+(((-1.0)*r20*x1923))+x1922+x1919);
evalcond[1]=((((-0.39225)*x1919))+(((-1.0)*pz))+((r21*x1915))+(((-1.0)*r20*x1918))+(((-0.425001)*cj1))+(((-0.39225)*x1922)));
evalcond[2]=((((-1.0)*r02*x1911))+(((-1.0)*x1914*x1921))+(((-1.0)*r01*x1925))+(((-1.0)*r00*x1923))+((sj0*x1924)));
evalcond[3]=((((-1.0)*r11*x1925))+(((-1.0)*x1908*x1916))+(((-1.0)*r12*x1911))+((cj0*x1921))+(((-1.0)*r10*x1923)));
evalcond[4]=((((0.39225)*sj0*x1921))+(((-1.0)*r00*x1918))+(((-0.425001)*sj0*sj1))+(((-1.0)*sj0*x1926))+((r01*x1915))+(((-1.0)*px))+(((-0.032446)*cj0)));
evalcond[5]=((((-0.39225)*cj0*x1921))+(((-0.032446)*sj0))+((r11*x1915))+(((-1.0)*py))+(((-1.0)*r10*x1918))+(((0.425001)*x1916))+(((0.39225)*x1908*x1916)));
evalcond[6]=((((-1.0)*r20*x1911*x1917))+(((-1.0)*x1921))+((r22*x1910))+(((-1.0)*r20*x1920))+x1924+((r21*x1912))+(((-1.0)*r21*x1911*x1913)));
evalcond[7]=(((r11*x1912))+(((-1.0)*r10*x1911*x1917))+((r12*x1910))+((x1909*x1916))+((cj0*x1919))+(((-1.0)*r10*x1920))+(((-1.0)*r11*x1911*x1913)));
evalcond[8]=((((-1.0)*x1914*x1919))+((r01*x1912))+(((-1.0)*x1914*x1922))+(((-1.0)*r00*x1911*x1917))+(((-1.0)*r01*x1911*x1913))+(((-1.0)*r00*x1920))+((r02*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1927=((0.03868)*sj0);
IkReal x1928=((0.9229390048494)*sj4);
IkReal x1929=((0.39225)*sj0);
CheckValue<IkReal> x1930=IKPowWithIntegerCheck(sj0,-2);
if(!x1930.valid){
continue;
}
if( IKabs(((-2.35293564015143)*(x1930.value)*((((cj5*r00*x1927))+(((-1.0)*r01*sj5*x1927))+((cj5*r01*sj4*x1929))+(((0.032446)*cj0*sj0))+((r00*sj4*sj5*x1929))+((cj4*r02*x1929))+((px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1928))+(((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x1928))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.35293564015143)*(x1930.value)*((((cj5*r00*x1927))+(((-1.0)*r01*sj5*x1927))+((cj5*r01*sj4*x1929))+(((0.032446)*cj0*sj0))+((r00*sj4*sj5*x1929))+((cj4*r02*x1929))+((px*sj0))))))+IKsqr(((((-1.0)*cj5*r21*x1928))+(((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x1928))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.35293564015143)*(x1930.value)*((((cj5*r00*x1927))+(((-1.0)*r01*sj5*x1927))+((cj5*r01*sj4*x1929))+(((0.032446)*cj0*sj0))+((r00*sj4*sj5*x1929))+((cj4*r02*x1929))+((px*sj0))))), ((((-1.0)*cj5*r21*x1928))+(((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x1928))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1931=IKsin(j1);
IkReal x1932=IKcos(j1);
IkReal x1933=sj0*sj0;
IkReal x1934=cj0*cj0;
IkReal x1935=(r00*sj4);
IkReal x1936=((0.425001)*cj0);
IkReal x1937=(cj3*cj4);
IkReal x1938=(cj5*r00);
IkReal x1939=((0.03868)*sj0);
IkReal x1940=((0.39225)*sj4);
IkReal x1941=(r10*sj5);
IkReal x1942=((1.0)*cj0);
IkReal x1943=((0.39225)*sj3);
IkReal x1944=(cj0*cj5);
IkReal x1945=(cj5*r10);
IkReal x1946=(r11*sj5);
IkReal x1947=(r01*sj5);
IkReal x1948=(cj3*r22);
IkReal x1949=(cj5*r11);
IkReal x1950=((0.03868)*r20);
IkReal x1951=((0.03868)*cj0);
IkReal x1952=((0.39225)*cj4);
IkReal x1953=((0.032446)*cj0);
IkReal x1954=(r20*sj5);
IkReal x1955=((0.39225)*sj5);
IkReal x1956=(cj5*sj0);
IkReal x1957=((0.39225)*r21);
IkReal x1958=(r21*sj5);
IkReal x1959=(sj0*x1953);
IkReal x1960=(cj0*x1955);
IkReal x1961=(sj0*x1952);
IkReal x1962=((0.03868)*x1958);
IkReal x1963=((0.425001)*x1931);
IkReal x1964=((0.425001)*x1932);
IkReal x1965=(sj0*x1931*x1936);
evalcond[0]=(((cj5*r21*x1940))+(((-1.0)*x1962))+((x1940*x1954))+((r22*x1952))+x1964+((cj5*x1950))+pz);
evalcond[1]=((((-1.0)*cj0*x1940*x1941))+(((-1.0)*x1959))+(((-0.03868)*r10*x1944))+((x1946*x1951))+(((-1.0)*py*x1942))+((x1934*x1963))+(((-1.0)*r11*x1940*x1944))+(((-1.0)*cj0*r12*x1952)));
evalcond[2]=(((x1933*x1963))+((r02*x1961))+((sj0*x1935*x1955))+((r01*x1940*x1956))+x1959+((px*sj0))+(((-1.0)*x1939*x1947))+((x1938*x1939)));
evalcond[3]=(((x1943*x1947))+(((-1.0)*r00*x1937*x1955))+((sj0*x1964))+((cj5*r20*x1939))+(((-0.39225)*cj5*r01*x1937))+(((-1.0)*x1938*x1943))+((cj3*r02*x1940))+(((-1.0)*x1939*x1958))+((pz*sj0)));
evalcond[4]=(((x1943*x1946))+(((-1.0)*x1943*x1945))+(((-1.0)*x1944*x1950))+((x1951*x1958))+(((-1.0)*pz*x1942))+(((-1.0)*x1932*x1936))+((cj3*r12*x1940))+(((-0.39225)*x1937*x1949))+(((-0.39225)*x1937*x1941)));
evalcond[5]=(((x1937*x1944*x1957))+(((-0.032446)*sj0))+(((-1.0)*cj0*x1943*x1958))+(((-1.0)*cj0*x1940*x1948))+(((0.39225)*cj0*x1937*x1954))+((r20*x1943*x1944))+(((-0.03868)*x1945))+((x1931*x1936))+(((-1.0)*py))+(((0.03868)*x1946)));
evalcond[6]=((((-1.0)*r20*x1943*x1956))+(((-1.0)*x1953))+(((-0.03868)*x1938))+((sj0*x1940*x1948))+(((-1.0)*sj0*x1963))+(((-1.0)*px))+((sj0*x1943*x1958))+(((-0.39225)*sj0*x1937*x1954))+(((-1.0)*x1937*x1956*x1957))+(((0.03868)*x1947)));
evalcond[7]=((((-1.0)*r01*x1940*x1944))+((x1939*x1945))+(((-1.0)*x1965))+(((0.032446)*x1933))+(((-1.0)*x1935*x1960))+(((-1.0)*cj0*r02*x1952))+(((-1.0)*x1939*x1946))+((py*sj0)));
evalcond[8]=(((r12*x1961))+(((-1.0)*px*x1942))+(((-1.0)*x1965))+((sj0*x1940*x1941))+((sj0*x1940*x1949))+(((-0.032446)*x1934))+(((-1.0)*x1938*x1951))+((x1947*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1966=(cj4*sj1);
IkReal x1967=(cj1*cj4);
IkReal x1968=(cj5*sj4);
IkReal x1969=((1.0)*cj1);
IkReal x1970=(sj4*sj5);
IkReal x1971=(sj1*x1970);
if( IKabs((((r20*x1971))+((r22*x1966))+((r21*sj1*x1968))+(((-1.0)*r01*x1968*x1969))+(((-1.0)*r02*x1967))+(((-1.0)*r00*x1969*x1970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1970))+((r02*x1966))+((r01*sj1*x1968))+((r00*x1971))+((r22*x1967))+((cj1*r21*x1968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x1971))+((r22*x1966))+((r21*sj1*x1968))+(((-1.0)*r01*x1968*x1969))+(((-1.0)*r02*x1967))+(((-1.0)*r00*x1969*x1970))))+IKsqr((((cj1*r20*x1970))+((r02*x1966))+((r01*sj1*x1968))+((r00*x1971))+((r22*x1967))+((cj1*r21*x1968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x1971))+((r22*x1966))+((r21*sj1*x1968))+(((-1.0)*r01*x1968*x1969))+(((-1.0)*r02*x1967))+(((-1.0)*r00*x1969*x1970))), (((cj1*r20*x1970))+((r02*x1966))+((r01*sj1*x1968))+((r00*x1971))+((r22*x1967))+((cj1*r21*x1968))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1972=IKcos(j2);
IkReal x1973=IKsin(j2);
IkReal x1974=(cj3*sj4);
IkReal x1975=((1.0)*cj5);
IkReal x1976=((1.0)*cj4);
IkReal x1977=(cj3*cj4);
IkReal x1978=(r21*sj5);
IkReal x1979=(cj3*sj5);
IkReal x1980=((0.03868)*cj5);
IkReal x1981=(r01*sj5);
IkReal x1982=(sj1*x1972);
IkReal x1983=(cj1*x1972);
IkReal x1984=((1.0)*sj4*sj5);
IkReal x1985=(sj1*x1973);
IkReal x1986=(cj1*x1973);
IkReal x1987=((1.0)*x1986);
evalcond[0]=((((-1.0)*r21*sj4*x1975))+(((-1.0)*r22*x1976))+x1985+x1983+(((-1.0)*r20*x1984)));
evalcond[1]=((((-1.0)*r01*sj4*x1975))+(((-1.0)*x1987))+(((-1.0)*r02*x1976))+x1982+(((-1.0)*r00*x1984)));
evalcond[2]=((((0.03868)*x1978))+(((-0.39225)*x1983))+(((-0.39225)*x1985))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-1.0)*r20*x1980)));
evalcond[3]=((((-0.39225)*x1982))+(((0.39225)*x1986))+(((-1.0)*px))+(((-0.425001)*sj1))+(((-1.0)*r00*x1980))+(((0.03868)*x1981)));
evalcond[4]=((((-1.0)*x1987))+((sj3*x1978))+((r22*x1974))+x1982+(((-1.0)*r20*sj3*x1975))+(((-1.0)*r21*x1975*x1977))+(((-1.0)*r20*x1976*x1979)));
evalcond[5]=(((sj3*x1981))+((r02*x1974))+(((-1.0)*r01*x1975*x1977))+(((-1.0)*x1983))+(((-1.0)*x1985))+(((-1.0)*r00*x1976*x1979))+(((-1.0)*r00*sj3*x1975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1988=(cj4*r22);
IkReal x1989=((1.0)*sj1);
IkReal x1990=(cj5*sj4);
IkReal x1991=(cj4*r02);
IkReal x1992=(sj4*sj5);
if( IKabs((((r21*sj1*x1990))+((sj1*x1988))+((r20*sj1*x1992))+((cj1*x1991))+((cj1*r01*x1990))+((cj1*r00*x1992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1989*x1992))+(((-1.0)*r01*x1989*x1990))+(((-1.0)*x1989*x1991))+((cj1*x1988))+((cj1*r21*x1990))+((cj1*r20*x1992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x1990))+((sj1*x1988))+((r20*sj1*x1992))+((cj1*x1991))+((cj1*r01*x1990))+((cj1*r00*x1992))))+IKsqr(((((-1.0)*r00*x1989*x1992))+(((-1.0)*r01*x1989*x1990))+(((-1.0)*x1989*x1991))+((cj1*x1988))+((cj1*r21*x1990))+((cj1*r20*x1992))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x1990))+((sj1*x1988))+((r20*sj1*x1992))+((cj1*x1991))+((cj1*r01*x1990))+((cj1*r00*x1992))), ((((-1.0)*r00*x1989*x1992))+(((-1.0)*r01*x1989*x1990))+(((-1.0)*x1989*x1991))+((cj1*x1988))+((cj1*r21*x1990))+((cj1*r20*x1992))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1993=IKsin(j2);
IkReal x1994=IKcos(j2);
IkReal x1995=(cj3*sj4);
IkReal x1996=((1.0)*cj5);
IkReal x1997=(cj3*cj4);
IkReal x1998=(r21*sj5);
IkReal x1999=((0.03868)*cj5);
IkReal x2000=((1.0)*cj4);
IkReal x2001=(r01*sj5);
IkReal x2002=(cj1*x1994);
IkReal x2003=(sj1*x1993);
IkReal x2004=(cj1*x1993);
IkReal x2005=(sj1*x1994);
IkReal x2006=((1.0)*r20*sj5);
IkReal x2007=((1.0)*r00*sj5);
IkReal x2008=(x2002+x2003);
evalcond[0]=((((-1.0)*r22*x2000))+(((-1.0)*r21*sj4*x1996))+x2008+(((-1.0)*sj4*x2006)));
evalcond[1]=(x2004+(((-1.0)*sj4*x2007))+(((-1.0)*r02*x2000))+(((-1.0)*r01*sj4*x1996))+(((-1.0)*x2005)));
evalcond[2]=((((-0.39225)*x2003))+(((-0.39225)*x2002))+(((-1.0)*pz))+(((0.03868)*x1998))+(((-0.425001)*cj1))+(((-1.0)*r20*x1999)));
evalcond[3]=((((-1.0)*r00*x1999))+(((-0.39225)*x2004))+(((0.39225)*x2005))+(((0.03868)*x2001))+(((-1.0)*px))+(((0.425001)*sj1)));
evalcond[4]=((((-1.0)*r01*x1996*x1997))+((sj3*x2001))+x2008+((r02*x1995))+(((-1.0)*x1997*x2007))+(((-1.0)*r00*sj3*x1996)));
evalcond[5]=(x2005+((sj3*x1998))+(((-1.0)*r20*sj3*x1996))+(((-1.0)*x2004))+(((-1.0)*r21*x1996*x1997))+(((-1.0)*x1997*x2006))+((r22*x1995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2009=(cj4*r12);
IkReal x2010=((1.0)*sj1);
IkReal x2011=(cj4*r22);
IkReal x2012=(sj4*sj5);
IkReal x2013=(cj5*sj4);
IkReal x2014=(cj1*x2013);
if( IKabs((((sj1*x2011))+((r21*sj1*x2013))+((cj1*r10*x2012))+((r20*sj1*x2012))+((r11*x2014))+((cj1*x2009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2011))+(((-1.0)*x2009*x2010))+((cj1*r20*x2012))+(((-1.0)*r10*x2010*x2012))+((r21*x2014))+(((-1.0)*r11*x2010*x2013)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2011))+((r21*sj1*x2013))+((cj1*r10*x2012))+((r20*sj1*x2012))+((r11*x2014))+((cj1*x2009))))+IKsqr((((cj1*x2011))+(((-1.0)*x2009*x2010))+((cj1*r20*x2012))+(((-1.0)*r10*x2010*x2012))+((r21*x2014))+(((-1.0)*r11*x2010*x2013))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2011))+((r21*sj1*x2013))+((cj1*r10*x2012))+((r20*sj1*x2012))+((r11*x2014))+((cj1*x2009))), (((cj1*x2011))+(((-1.0)*x2009*x2010))+((cj1*r20*x2012))+(((-1.0)*r10*x2010*x2012))+((r21*x2014))+(((-1.0)*r11*x2010*x2013))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2015=IKsin(j2);
IkReal x2016=IKcos(j2);
IkReal x2017=((1.0)*cj4);
IkReal x2018=(sj3*sj5);
IkReal x2019=((0.03868)*sj5);
IkReal x2020=(cj3*sj4);
IkReal x2021=(cj3*sj5);
IkReal x2022=((0.03868)*cj5);
IkReal x2023=(cj5*r21);
IkReal x2024=((1.0)*sj4);
IkReal x2025=(cj5*r11);
IkReal x2026=(cj1*x2016);
IkReal x2027=(sj1*x2015);
IkReal x2028=((1.0)*cj5*sj3);
IkReal x2029=(cj1*x2015);
IkReal x2030=(sj5*x2024);
IkReal x2031=(sj1*x2016);
IkReal x2032=(x2026+x2027);
evalcond[0]=((((-1.0)*x2023*x2024))+x2032+(((-1.0)*r20*x2030))+(((-1.0)*r22*x2017)));
evalcond[1]=(x2029+(((-1.0)*r10*x2030))+(((-1.0)*x2024*x2025))+(((-1.0)*x2031))+(((-1.0)*r12*x2017)));
evalcond[2]=((((-1.0)*pz))+(((-0.39225)*x2026))+(((-0.39225)*x2027))+((r21*x2019))+(((-1.0)*r20*x2022))+(((-0.425001)*cj1)));
evalcond[3]=((((-1.0)*r10*x2022))+(((0.39225)*x2031))+(((-1.0)*py))+(((-0.39225)*x2029))+(((0.425001)*sj1))+((r11*x2019)));
evalcond[4]=((((-1.0)*r10*x2028))+x2032+(((-1.0)*r10*x2017*x2021))+((r11*x2018))+((r12*x2020))+(((-1.0)*cj3*x2017*x2025)));
evalcond[5]=(((r22*x2020))+x2031+(((-1.0)*r20*x2017*x2021))+(((-1.0)*x2029))+((r21*x2018))+(((-1.0)*r20*x2028))+(((-1.0)*cj3*x2017*x2023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2033=(cj5*sj4);
IkReal x2034=(cj1*cj4);
IkReal x2035=(cj4*sj1);
IkReal x2036=((1.0)*cj1);
IkReal x2037=(sj4*sj5);
if( IKabs((((r22*x2035))+(((-1.0)*r11*x2033*x2036))+((r20*sj1*x2037))+((r21*sj1*x2033))+(((-1.0)*r10*x2036*x2037))+(((-1.0)*r12*x2034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2034))+((r12*x2035))+((r10*sj1*x2037))+((cj1*r20*x2037))+((cj1*r21*x2033))+((r11*sj1*x2033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2035))+(((-1.0)*r11*x2033*x2036))+((r20*sj1*x2037))+((r21*sj1*x2033))+(((-1.0)*r10*x2036*x2037))+(((-1.0)*r12*x2034))))+IKsqr((((r22*x2034))+((r12*x2035))+((r10*sj1*x2037))+((cj1*r20*x2037))+((cj1*r21*x2033))+((r11*sj1*x2033))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2035))+(((-1.0)*r11*x2033*x2036))+((r20*sj1*x2037))+((r21*sj1*x2033))+(((-1.0)*r10*x2036*x2037))+(((-1.0)*r12*x2034))), (((r22*x2034))+((r12*x2035))+((r10*sj1*x2037))+((cj1*r20*x2037))+((cj1*r21*x2033))+((r11*sj1*x2033))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2038=IKcos(j2);
IkReal x2039=IKsin(j2);
IkReal x2040=((1.0)*cj4);
IkReal x2041=(sj3*sj5);
IkReal x2042=((0.03868)*sj5);
IkReal x2043=(cj5*r21);
IkReal x2044=(cj3*sj5);
IkReal x2045=((0.03868)*cj5);
IkReal x2046=(cj3*sj4);
IkReal x2047=((1.0)*sj4);
IkReal x2048=(cj5*r11);
IkReal x2049=(sj1*x2038);
IkReal x2050=(cj1*x2038);
IkReal x2051=((1.0)*cj5*sj3);
IkReal x2052=(sj5*x2047);
IkReal x2053=(sj1*x2039);
IkReal x2054=(cj1*x2039);
IkReal x2055=((1.0)*x2054);
evalcond[0]=((((-1.0)*r22*x2040))+x2050+x2053+(((-1.0)*x2043*x2047))+(((-1.0)*r20*x2052)));
evalcond[1]=((((-1.0)*r10*x2052))+x2049+(((-1.0)*x2047*x2048))+(((-1.0)*x2055))+(((-1.0)*r12*x2040)));
evalcond[2]=(((r21*x2042))+(((-1.0)*pz))+(((-0.39225)*x2050))+(((-0.39225)*x2053))+(((-1.0)*r20*x2045))+(((-0.425001)*cj1)));
evalcond[3]=((((-1.0)*r10*x2045))+((r11*x2042))+(((-0.39225)*x2049))+(((-1.0)*py))+(((0.39225)*x2054))+(((-0.425001)*sj1)));
evalcond[4]=(((r22*x2046))+((r21*x2041))+(((-1.0)*cj3*x2040*x2043))+x2049+(((-1.0)*r20*x2051))+(((-1.0)*x2055))+(((-1.0)*r20*x2040*x2044)));
evalcond[5]=((((-1.0)*r10*x2051))+(((-1.0)*cj3*x2040*x2048))+((r11*x2041))+((r12*x2046))+(((-1.0)*x2053))+(((-1.0)*x2050))+(((-1.0)*r10*x2040*x2044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2056=(cj4*r12);
IkReal x2057=((1.0)*sj1);
IkReal x2058=(cj5*r21);
IkReal x2059=(r20*sj5);
IkReal x2060=(cj1*sj4);
IkReal x2061=(r10*sj5);
IkReal x2062=(cj5*r11*sj4);
IkReal x2063=(cj0*cj4*r22);
IkReal x2064=(cj0*sj1*sj4);
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2065.valid){
continue;
}
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal((((cj5*r11*x2060))+((x2059*x2064))+((x2060*x2061))+((x2058*x2064))+((sj1*x2063))+((cj1*x2056)))),IkReal(((((-1.0)*x2057*x2062))+(((-1.0)*sj4*x2057*x2061))+(((-1.0)*x2056*x2057))+((cj1*x2063))+((cj0*x2058*x2060))+((cj0*x2059*x2060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2065.value)))+(x2066.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2067=IKcos(j2);
IkReal x2068=IKsin(j2);
IkReal x2069=(cj3*sj4);
IkReal x2070=((1.0)*cj4);
IkReal x2071=(sj3*sj5);
IkReal x2072=(cj3*cj5);
IkReal x2073=((1.0)*sj0);
IkReal x2074=((0.03868)*sj5);
IkReal x2075=(cj0*sj1);
IkReal x2076=(cj3*sj5);
IkReal x2077=((0.03868)*cj5);
IkReal x2078=(cj1*x2067);
IkReal x2079=((1.0)*cj5*sj3);
IkReal x2080=(cj1*x2068);
IkReal x2081=(sj1*x2068);
IkReal x2082=((1.0)*sj4*sj5);
IkReal x2083=(sj1*x2067);
IkReal x2084=((1.0)*cj5*sj4);
IkReal x2085=((0.39225)*x2083);
evalcond[0]=((((-1.0)*r21*x2084))+(((-1.0)*r20*x2082))+x2078+x2081+(((-1.0)*r22*x2070)));
evalcond[1]=((((-0.39225)*x2081))+(((-1.0)*pz))+(((-1.0)*r20*x2077))+(((-0.39225)*x2078))+(((-0.425001)*cj1))+((r21*x2074)));
evalcond[2]=((((-1.0)*r02*x2070))+((sj0*x2083))+(((-1.0)*x2073*x2080))+(((-1.0)*r01*x2084))+(((-1.0)*r00*x2082)));
evalcond[3]=((((-1.0)*r12*x2070))+(((-1.0)*x2067*x2075))+(((-1.0)*r11*x2084))+(((-1.0)*r10*x2082))+((cj0*x2080)));
evalcond[4]=((((-0.425001)*sj0*sj1))+(((-1.0)*px))+(((0.39225)*sj0*x2080))+((r01*x2074))+(((-0.032446)*cj0))+(((-1.0)*sj0*x2085))+(((-1.0)*r00*x2077)));
evalcond[5]=((((-1.0)*r10*x2077))+(((0.425001)*x2075))+(((0.39225)*x2067*x2075))+(((-0.032446)*sj0))+(((-0.39225)*cj0*x2080))+((r11*x2074))+(((-1.0)*py)));
evalcond[6]=(((r22*x2069))+(((-1.0)*x2080))+x2083+(((-1.0)*r20*x2079))+(((-1.0)*r21*x2070*x2072))+(((-1.0)*r20*x2070*x2076))+((r21*x2071)));
evalcond[7]=((((-1.0)*r10*x2079))+((r12*x2069))+((x2068*x2075))+((r11*x2071))+(((-1.0)*r11*x2070*x2072))+(((-1.0)*r10*x2070*x2076))+((cj0*x2078)));
evalcond[8]=((((-1.0)*r01*x2070*x2072))+(((-1.0)*x2073*x2081))+((r02*x2069))+((r01*x2071))+(((-1.0)*r00*x2079))+(((-1.0)*x2073*x2078))+(((-1.0)*r00*x2070*x2076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2086=(cj4*sj1);
IkReal x2087=(r22*sj0);
IkReal x2088=(sj1*sj4);
IkReal x2089=(cj5*r01);
IkReal x2090=(r00*sj5);
IkReal x2091=(cj1*cj4);
IkReal x2092=(cj1*sj4);
IkReal x2093=(cj5*r21*sj0);
IkReal x2094=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2095=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2095.valid){
continue;
}
CheckValue<IkReal> x2096 = IKatan2WithCheck(IkReal((((r20*sj0*sj5*x2088))+((x2086*x2087))+((x2088*x2093))+(((-1.0)*x2089*x2092))+(((-1.0)*r02*x2091))+(((-1.0)*x2090*x2092)))),IkReal((((r02*x2086))+((x2087*x2091))+((x2088*x2090))+((x2092*x2093))+((x2088*x2089))+((r20*sj0*sj5*x2092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2096.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2095.value)))+(x2096.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2097=IKcos(j2);
IkReal x2098=IKsin(j2);
IkReal x2099=(cj3*sj4);
IkReal x2100=((1.0)*cj4);
IkReal x2101=(sj3*sj5);
IkReal x2102=(cj3*cj5);
IkReal x2103=((1.0)*sj0);
IkReal x2104=((0.03868)*sj5);
IkReal x2105=(cj0*sj1);
IkReal x2106=(cj3*sj5);
IkReal x2107=((0.03868)*cj5);
IkReal x2108=(cj1*x2097);
IkReal x2109=((1.0)*cj5*sj3);
IkReal x2110=(cj1*x2098);
IkReal x2111=(sj1*x2098);
IkReal x2112=((1.0)*sj4*sj5);
IkReal x2113=(sj1*x2097);
IkReal x2114=((1.0)*cj5*sj4);
IkReal x2115=((0.39225)*x2113);
evalcond[0]=((((-1.0)*r22*x2100))+(((-1.0)*r21*x2114))+(((-1.0)*r20*x2112))+x2111+x2108);
evalcond[1]=(((r21*x2104))+(((-0.39225)*x2111))+(((-1.0)*pz))+(((-1.0)*r20*x2107))+(((-0.425001)*cj1))+(((-0.39225)*x2108)));
evalcond[2]=((((-1.0)*r01*x2114))+(((-1.0)*r02*x2100))+(((-1.0)*r00*x2112))+((sj0*x2113))+(((-1.0)*x2103*x2110)));
evalcond[3]=((((-1.0)*r10*x2112))+(((-1.0)*r12*x2100))+((cj0*x2110))+(((-1.0)*x2097*x2105))+(((-1.0)*r11*x2114)));
evalcond[4]=((((-0.425001)*sj0*sj1))+(((-1.0)*r00*x2107))+((r01*x2104))+(((-1.0)*px))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2110))+(((-1.0)*sj0*x2115)));
evalcond[5]=((((-1.0)*r10*x2107))+(((0.39225)*x2097*x2105))+(((0.425001)*x2105))+(((-0.032446)*sj0))+((r11*x2104))+(((-0.39225)*cj0*x2110))+(((-1.0)*py)));
evalcond[6]=(((r21*x2101))+x2113+((r22*x2099))+(((-1.0)*r20*x2109))+(((-1.0)*r21*x2100*x2102))+(((-1.0)*r20*x2100*x2106))+(((-1.0)*x2110)));
evalcond[7]=(((x2098*x2105))+(((-1.0)*r10*x2109))+((cj0*x2108))+((r11*x2101))+(((-1.0)*r10*x2100*x2106))+(((-1.0)*r11*x2100*x2102))+((r12*x2099)));
evalcond[8]=((((-1.0)*x2103*x2108))+(((-1.0)*x2103*x2111))+(((-1.0)*r00*x2109))+(((-1.0)*r00*x2100*x2106))+((r01*x2101))+((r02*x2099))+(((-1.0)*r01*x2100*x2102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2116=(cj0*r21);
IkReal x2117=((1.0)*cj5);
IkReal x2118=(cj0*r20);
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(((((-1.0)*x2117*x2118))+((sj5*x2116)))),IkReal(((((-1.0)*cj4*sj5*x2118))+(((-1.0)*cj4*x2116*x2117))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
CheckValue<IkReal> x2120=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x2120.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2119.value)+(((1.5707963267949)*(x2120.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2121=IKsin(j3);
IkReal x2122=IKcos(j3);
IkReal x2123=(sj5*x2122);
IkReal x2124=(cj4*cj5*x2121);
IkReal x2125=(cj4*sj5*x2121);
IkReal x2126=((1.0)*cj5*x2122);
IkReal x2127=((1.0)*sj4*x2121);
evalcond[0]=((((-1.0)*r22*x2127))+((r20*x2125))+((r21*x2124))+((r21*x2123))+(((-1.0)*r20*x2126)));
evalcond[1]=(cj0+(((-1.0)*r00*x2126))+(((-1.0)*r02*x2127))+((r01*x2124))+((r01*x2123))+((r00*x2125)));
evalcond[2]=(sj0+(((-1.0)*r10*x2126))+((r10*x2125))+((r11*x2124))+((r11*x2123))+(((-1.0)*r12*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2128=((0.9229390048494)*cj4);
IkReal x2129=((0.9229390048494)*sj4);
IkReal x2130=((0.0910115505610575)*cj5);
IkReal x2131=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r02*x2128))+(((-1.0)*r00*x2130))+((r01*x2131))+(((-1.0)*r00*sj5*x2129))+(((-2.35293564015143)*px))+(((-1.0)*cj5*r01*x2129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2131))+(((-1.0)*r22*x2128))+(((-1.0)*r20*sj5*x2129))+(((-1.0)*r20*x2130))+(((-2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2128))+(((-1.0)*r00*x2130))+((r01*x2131))+(((-1.0)*r00*sj5*x2129))+(((-2.35293564015143)*px))+(((-1.0)*cj5*r01*x2129))))+IKsqr((((r21*x2131))+(((-1.0)*r22*x2128))+(((-1.0)*r20*sj5*x2129))+(((-1.0)*r20*x2130))+(((-2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2128))+(((-1.0)*r00*x2130))+((r01*x2131))+(((-1.0)*r00*sj5*x2129))+(((-2.35293564015143)*px))+(((-1.0)*cj5*r01*x2129))), (((r21*x2131))+(((-1.0)*r22*x2128))+(((-1.0)*r20*sj5*x2129))+(((-1.0)*r20*x2130))+(((-2.35293564015143)*pz))+(((-1.0)*cj5*r21*x2129))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2132=((0.39225)*sj3);
IkReal x2133=(cj5*r00);
IkReal x2134=((0.39225)*cj4);
IkReal x2135=(r01*sj5);
IkReal x2136=(r21*sj5);
IkReal x2137=(cj5*r20);
IkReal x2138=((0.39225)*sj4);
IkReal x2139=(r20*sj5);
IkReal x2140=(r00*sj5);
IkReal x2141=(cj5*r01);
IkReal x2142=(cj5*r21);
IkReal x2143=((0.425001)*(IKcos(j1)));
IkReal x2144=((0.03868)*x2137);
IkReal x2145=((0.03868)*x2136);
IkReal x2146=((0.03868)*x2135);
IkReal x2147=((0.425001)*(IKsin(j1)));
IkReal x2148=((0.03868)*x2133);
IkReal x2149=(x2147+x2148);
IkReal x2150=(x2144+x2143+pz);
evalcond[0]=(((x2138*x2140))+((x2138*x2141))+((r02*x2134))+x2149+(((-1.0)*x2146))+px);
evalcond[1]=(((x2138*x2142))+x2150+(((-1.0)*x2145))+((r22*x2134))+((x2138*x2139)));
evalcond[2]=(x2150+(((-1.0)*x2145))+(((-1.0)*cj3*x2134*x2140))+(((-1.0)*cj3*x2134*x2141))+(((-1.0)*x2132*x2133))+((x2132*x2135))+((cj3*r02*x2138)));
evalcond[3]=(x2146+(((-1.0)*x2149))+(((-1.0)*px))+(((-1.0)*cj3*x2134*x2142))+(((-1.0)*x2132*x2137))+((x2132*x2136))+((cj3*r22*x2138))+(((-1.0)*cj3*x2134*x2139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2151=(cj4*sj1);
IkReal x2152=(cj1*cj4);
IkReal x2153=(cj5*sj4);
IkReal x2154=((1.0)*cj1);
IkReal x2155=(sj4*sj5);
IkReal x2156=(sj1*x2155);
if( IKabs(((((-1.0)*r01*x2153*x2154))+(((-1.0)*r00*x2154*x2155))+((r20*x2156))+((r21*sj1*x2153))+(((-1.0)*r02*x2152))+((r22*x2151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x2153))+((cj1*r20*x2155))+((r01*sj1*x2153))+((r02*x2151))+((r00*x2156))+((r22*x2152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2153*x2154))+(((-1.0)*r00*x2154*x2155))+((r20*x2156))+((r21*sj1*x2153))+(((-1.0)*r02*x2152))+((r22*x2151))))+IKsqr((((cj1*r21*x2153))+((cj1*r20*x2155))+((r01*sj1*x2153))+((r02*x2151))+((r00*x2156))+((r22*x2152))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x2153*x2154))+(((-1.0)*r00*x2154*x2155))+((r20*x2156))+((r21*sj1*x2153))+(((-1.0)*r02*x2152))+((r22*x2151))), (((cj1*r21*x2153))+((cj1*r20*x2155))+((r01*sj1*x2153))+((r02*x2151))+((r00*x2156))+((r22*x2152))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2157=IKcos(j2);
IkReal x2158=IKsin(j2);
IkReal x2159=(cj3*sj4);
IkReal x2160=((1.0)*cj5);
IkReal x2161=((1.0)*cj4);
IkReal x2162=(cj3*cj4);
IkReal x2163=(r21*sj5);
IkReal x2164=(cj3*sj5);
IkReal x2165=((0.03868)*cj5);
IkReal x2166=(r01*sj5);
IkReal x2167=(sj1*x2157);
IkReal x2168=(cj1*x2157);
IkReal x2169=((1.0)*sj4*sj5);
IkReal x2170=(sj1*x2158);
IkReal x2171=(cj1*x2158);
IkReal x2172=((1.0)*x2171);
evalcond[0]=((((-1.0)*r20*x2169))+x2170+x2168+(((-1.0)*r21*sj4*x2160))+(((-1.0)*r22*x2161)));
evalcond[1]=(x2167+(((-1.0)*x2172))+(((-1.0)*r02*x2161))+(((-1.0)*r01*sj4*x2160))+(((-1.0)*r00*x2169)));
evalcond[2]=((((-1.0)*r20*x2165))+(((-0.39225)*x2168))+(((-0.39225)*x2170))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((0.03868)*x2163)));
evalcond[3]=((((0.39225)*x2171))+(((-0.39225)*x2167))+(((-1.0)*px))+(((-0.425001)*sj1))+(((0.03868)*x2166))+(((-1.0)*r00*x2165)));
evalcond[4]=((((-1.0)*r20*sj3*x2160))+((sj3*x2163))+x2167+(((-1.0)*r21*x2160*x2162))+(((-1.0)*r20*x2161*x2164))+((r22*x2159))+(((-1.0)*x2172)));
evalcond[5]=(((sj3*x2166))+((r02*x2159))+(((-1.0)*r00*x2161*x2164))+(((-1.0)*r00*sj3*x2160))+(((-1.0)*r01*x2160*x2162))+(((-1.0)*x2170))+(((-1.0)*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2173=((0.9229390048494)*cj4);
IkReal x2174=((0.9229390048494)*sj4);
IkReal x2175=((0.0910115505610575)*cj5);
IkReal x2176=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((r00*sj5*x2174))+((r00*x2175))+((r02*x2173))+(((-1.0)*r01*x2176))+((cj5*r01*x2174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2175))+((r21*x2176))+(((-1.0)*r20*sj5*x2174))+(((-1.0)*cj5*r21*x2174))+(((-1.0)*r22*x2173))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((r00*sj5*x2174))+((r00*x2175))+((r02*x2173))+(((-1.0)*r01*x2176))+((cj5*r01*x2174))))+IKsqr(((((-1.0)*r20*x2175))+((r21*x2176))+(((-1.0)*r20*sj5*x2174))+(((-1.0)*cj5*r21*x2174))+(((-1.0)*r22*x2173))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((r00*sj5*x2174))+((r00*x2175))+((r02*x2173))+(((-1.0)*r01*x2176))+((cj5*r01*x2174))), ((((-1.0)*r20*x2175))+((r21*x2176))+(((-1.0)*r20*sj5*x2174))+(((-1.0)*cj5*r21*x2174))+(((-1.0)*r22*x2173))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2177=((1.0)*px);
IkReal x2178=((0.39225)*sj3);
IkReal x2179=(cj5*r00);
IkReal x2180=((0.39225)*cj4);
IkReal x2181=(r01*sj5);
IkReal x2182=(r21*sj5);
IkReal x2183=(cj5*r20);
IkReal x2184=((0.39225)*sj4);
IkReal x2185=(r20*sj5);
IkReal x2186=(r00*sj5);
IkReal x2187=(cj5*r01);
IkReal x2188=(cj5*r21);
IkReal x2189=((0.425001)*(IKsin(j1)));
IkReal x2190=((0.03868)*x2181);
IkReal x2191=((0.03868)*x2179);
IkReal x2192=((0.03868)*x2182);
IkReal x2193=((0.425001)*(IKcos(j1)));
IkReal x2194=((0.03868)*x2183);
IkReal x2195=(x2177+x2191);
IkReal x2196=(x2193+x2194);
IkReal x2197=(x2190+x2189);
evalcond[0]=(((r22*x2180))+x2196+pz+(((-1.0)*x2192))+((x2184*x2188))+((x2184*x2185)));
evalcond[1]=(x2197+(((-1.0)*r02*x2180))+(((-1.0)*x2195))+(((-1.0)*x2184*x2187))+(((-1.0)*x2184*x2186)));
evalcond[2]=(((cj3*x2180*x2188))+((cj3*x2180*x2185))+(((-1.0)*cj3*r22*x2184))+x2197+((x2178*x2183))+(((-1.0)*x2195))+(((-1.0)*x2178*x2182)));
evalcond[3]=((((-1.0)*x2178*x2179))+((cj3*r02*x2184))+x2192+((x2178*x2181))+(((-1.0)*pz))+(((-1.0)*cj3*x2180*x2187))+(((-1.0)*cj3*x2180*x2186))+(((-1.0)*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2198=(cj4*r22);
IkReal x2199=((1.0)*sj1);
IkReal x2200=(cj5*sj4);
IkReal x2201=(cj4*r02);
IkReal x2202=(sj4*sj5);
if( IKabs((((r21*sj1*x2200))+((cj1*x2201))+((r20*sj1*x2202))+((sj1*x2198))+((cj1*r01*x2200))+((cj1*r00*x2202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2199*x2202))+((cj1*x2198))+((cj1*r21*x2200))+(((-1.0)*x2199*x2201))+((cj1*r20*x2202))+(((-1.0)*r01*x2199*x2200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x2200))+((cj1*x2201))+((r20*sj1*x2202))+((sj1*x2198))+((cj1*r01*x2200))+((cj1*r00*x2202))))+IKsqr(((((-1.0)*r00*x2199*x2202))+((cj1*x2198))+((cj1*r21*x2200))+(((-1.0)*x2199*x2201))+((cj1*r20*x2202))+(((-1.0)*r01*x2199*x2200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x2200))+((cj1*x2201))+((r20*sj1*x2202))+((sj1*x2198))+((cj1*r01*x2200))+((cj1*r00*x2202))), ((((-1.0)*r00*x2199*x2202))+((cj1*x2198))+((cj1*r21*x2200))+(((-1.0)*x2199*x2201))+((cj1*r20*x2202))+(((-1.0)*r01*x2199*x2200))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2203=IKsin(j2);
IkReal x2204=IKcos(j2);
IkReal x2205=(cj3*sj4);
IkReal x2206=((1.0)*cj5);
IkReal x2207=(cj3*cj4);
IkReal x2208=(r21*sj5);
IkReal x2209=((0.03868)*cj5);
IkReal x2210=((1.0)*cj4);
IkReal x2211=(r01*sj5);
IkReal x2212=(cj1*x2204);
IkReal x2213=(sj1*x2203);
IkReal x2214=(cj1*x2203);
IkReal x2215=(sj1*x2204);
IkReal x2216=((1.0)*r20*sj5);
IkReal x2217=((1.0)*r00*sj5);
IkReal x2218=(x2213+x2212);
evalcond[0]=((((-1.0)*r21*sj4*x2206))+x2218+(((-1.0)*r22*x2210))+(((-1.0)*sj4*x2216)));
evalcond[1]=((((-1.0)*x2215))+x2214+(((-1.0)*r02*x2210))+(((-1.0)*sj4*x2217))+(((-1.0)*r01*sj4*x2206)));
evalcond[2]=((((-0.39225)*x2212))+(((-0.39225)*x2213))+(((-1.0)*r20*x2209))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((0.03868)*x2208)));
evalcond[3]=((((-0.39225)*x2214))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.39225)*x2215))+(((0.03868)*x2211))+(((-1.0)*r00*x2209)));
evalcond[4]=(((r02*x2205))+(((-1.0)*r00*sj3*x2206))+x2218+((sj3*x2211))+(((-1.0)*x2207*x2217))+(((-1.0)*r01*x2206*x2207)));
evalcond[5]=(((sj3*x2208))+(((-1.0)*x2214))+x2215+(((-1.0)*x2207*x2216))+(((-1.0)*r21*x2206*x2207))+((r22*x2205))+(((-1.0)*r20*sj3*x2206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2219=((0.9229390048494)*sj4);
IkReal x2220=((0.0910115505610575)*cj5);
IkReal x2221=((0.9229390048494)*cj4);
IkReal x2222=((0.0910115505610575)*sj5);
if( IKabs((((r12*x2221))+(((2.35293564015143)*py))+((r10*sj5*x2219))+((r10*x2220))+((cj5*r11*x2219))+(((-1.0)*r11*x2222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*x2220))+(((-1.0)*cj5*r21*x2219))+((r21*x2222))+(((-1.0)*r20*sj5*x2219))+(((-1.0)*r22*x2221))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2221))+(((2.35293564015143)*py))+((r10*sj5*x2219))+((r10*x2220))+((cj5*r11*x2219))+(((-1.0)*r11*x2222))))+IKsqr(((((-1.0)*r20*x2220))+(((-1.0)*cj5*r21*x2219))+((r21*x2222))+(((-1.0)*r20*sj5*x2219))+(((-1.0)*r22*x2221))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r12*x2221))+(((2.35293564015143)*py))+((r10*sj5*x2219))+((r10*x2220))+((cj5*r11*x2219))+(((-1.0)*r11*x2222))), ((((-1.0)*r20*x2220))+(((-1.0)*cj5*r21*x2219))+((r21*x2222))+(((-1.0)*r20*sj5*x2219))+(((-1.0)*r22*x2221))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2223=((1.0)*py);
IkReal x2224=((0.39225)*r10);
IkReal x2225=(sj4*sj5);
IkReal x2226=(cj5*sj3);
IkReal x2227=((0.39225)*r11);
IkReal x2228=(sj3*sj5);
IkReal x2229=(cj3*cj4);
IkReal x2230=((0.03868)*sj5);
IkReal x2231=((0.39225)*r21);
IkReal x2232=((0.03868)*cj5);
IkReal x2233=((0.39225)*cj4);
IkReal x2234=((0.39225)*r20);
IkReal x2235=(cj5*sj4);
IkReal x2236=(r11*x2230);
IkReal x2237=((0.425001)*(IKsin(j1)));
IkReal x2238=(r10*x2232);
IkReal x2239=(r21*x2230);
IkReal x2240=((0.425001)*(IKcos(j1)));
IkReal x2241=(r20*x2232);
IkReal x2242=((0.39225)*cj3*sj4);
IkReal x2243=(x2223+x2238);
IkReal x2244=(x2240+x2241);
IkReal x2245=(x2237+x2236);
evalcond[0]=(x2244+((r22*x2233))+((x2225*x2234))+(((-1.0)*x2239))+pz+((x2231*x2235)));
evalcond[1]=(x2245+(((-1.0)*x2224*x2225))+(((-1.0)*x2227*x2235))+(((-1.0)*x2243))+(((-1.0)*r12*x2233)));
evalcond[2]=(x2245+((x2226*x2234))+(((-1.0)*r22*x2242))+(((-1.0)*x2228*x2231))+(((-1.0)*x2243))+((sj5*x2229*x2234))+((cj5*x2229*x2231)));
evalcond[3]=(x2239+(((-1.0)*x2224*x2226))+((x2227*x2228))+(((-1.0)*pz))+(((-1.0)*x2244))+(((-1.0)*sj5*x2224*x2229))+(((-1.0)*cj5*x2227*x2229))+((r12*x2242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2246=(cj4*r12);
IkReal x2247=((1.0)*sj1);
IkReal x2248=(cj4*r22);
IkReal x2249=(sj4*sj5);
IkReal x2250=(cj5*sj4);
IkReal x2251=(cj1*x2250);
if( IKabs((((r20*sj1*x2249))+((cj1*x2246))+((cj1*r10*x2249))+((sj1*x2248))+((r21*sj1*x2250))+((r11*x2251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2249))+(((-1.0)*r11*x2247*x2250))+((cj1*x2248))+(((-1.0)*x2246*x2247))+((r21*x2251))+(((-1.0)*r10*x2247*x2249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x2249))+((cj1*x2246))+((cj1*r10*x2249))+((sj1*x2248))+((r21*sj1*x2250))+((r11*x2251))))+IKsqr((((cj1*r20*x2249))+(((-1.0)*r11*x2247*x2250))+((cj1*x2248))+(((-1.0)*x2246*x2247))+((r21*x2251))+(((-1.0)*r10*x2247*x2249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x2249))+((cj1*x2246))+((cj1*r10*x2249))+((sj1*x2248))+((r21*sj1*x2250))+((r11*x2251))), (((cj1*r20*x2249))+(((-1.0)*r11*x2247*x2250))+((cj1*x2248))+(((-1.0)*x2246*x2247))+((r21*x2251))+(((-1.0)*r10*x2247*x2249))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2252=IKsin(j2);
IkReal x2253=IKcos(j2);
IkReal x2254=((1.0)*cj4);
IkReal x2255=(sj3*sj5);
IkReal x2256=((0.03868)*sj5);
IkReal x2257=(cj3*sj4);
IkReal x2258=(cj3*sj5);
IkReal x2259=((0.03868)*cj5);
IkReal x2260=(cj5*r21);
IkReal x2261=((1.0)*sj4);
IkReal x2262=(cj5*r11);
IkReal x2263=(cj1*x2253);
IkReal x2264=(sj1*x2252);
IkReal x2265=((1.0)*cj5*sj3);
IkReal x2266=(cj1*x2252);
IkReal x2267=(sj5*x2261);
IkReal x2268=(sj1*x2253);
IkReal x2269=(x2263+x2264);
evalcond[0]=(x2269+(((-1.0)*r22*x2254))+(((-1.0)*r20*x2267))+(((-1.0)*x2260*x2261)));
evalcond[1]=(x2266+(((-1.0)*r12*x2254))+(((-1.0)*x2261*x2262))+(((-1.0)*r10*x2267))+(((-1.0)*x2268)));
evalcond[2]=((((-0.39225)*x2263))+(((-0.39225)*x2264))+(((-1.0)*pz))+(((-0.425001)*cj1))+((r21*x2256))+(((-1.0)*r20*x2259)));
evalcond[3]=((((-0.39225)*x2266))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x2259))+(((0.39225)*x2268))+((r11*x2256)));
evalcond[4]=(x2269+((r12*x2257))+(((-1.0)*r10*x2254*x2258))+(((-1.0)*r10*x2265))+(((-1.0)*cj3*x2254*x2262))+((r11*x2255)));
evalcond[5]=(x2268+(((-1.0)*r20*x2254*x2258))+(((-1.0)*r20*x2265))+((r22*x2257))+((r21*x2255))+(((-1.0)*cj3*x2254*x2260))+(((-1.0)*x2266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2270=((0.9229390048494)*sj4);
IkReal x2271=((0.0910115505610575)*cj5);
IkReal x2272=((0.9229390048494)*cj4);
IkReal x2273=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*sj5*x2270))+(((-1.0)*cj5*r11*x2270))+((r11*x2273))+(((-1.0)*r10*x2271))+(((-1.0)*r12*x2272))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x2270))+((r21*x2273))+(((-1.0)*r20*sj5*x2270))+(((-1.0)*r20*x2271))+(((-1.0)*r22*x2272))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x2270))+(((-1.0)*cj5*r11*x2270))+((r11*x2273))+(((-1.0)*r10*x2271))+(((-1.0)*r12*x2272))+(((-2.35293564015143)*py))))+IKsqr(((((-1.0)*cj5*r21*x2270))+((r21*x2273))+(((-1.0)*r20*sj5*x2270))+(((-1.0)*r20*x2271))+(((-1.0)*r22*x2272))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*sj5*x2270))+(((-1.0)*cj5*r11*x2270))+((r11*x2273))+(((-1.0)*r10*x2271))+(((-1.0)*r12*x2272))+(((-2.35293564015143)*py))), ((((-1.0)*cj5*r21*x2270))+((r21*x2273))+(((-1.0)*r20*sj5*x2270))+(((-1.0)*r20*x2271))+(((-1.0)*r22*x2272))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2274=((0.39225)*r10);
IkReal x2275=(sj4*sj5);
IkReal x2276=(cj5*sj3);
IkReal x2277=((0.39225)*r11);
IkReal x2278=(sj3*sj5);
IkReal x2279=(cj3*cj4);
IkReal x2280=((0.03868)*sj5);
IkReal x2281=((0.39225)*r21);
IkReal x2282=((0.03868)*cj5);
IkReal x2283=((0.39225)*cj4);
IkReal x2284=((0.39225)*r20);
IkReal x2285=(cj5*sj4);
IkReal x2286=((0.425001)*(IKcos(j1)));
IkReal x2287=(r20*x2282);
IkReal x2288=(r21*x2280);
IkReal x2289=(r11*x2280);
IkReal x2290=((0.425001)*(IKsin(j1)));
IkReal x2291=(r10*x2282);
IkReal x2292=((0.39225)*cj3*sj4);
IkReal x2293=(x2291+x2290);
IkReal x2294=(x2286+x2287+pz);
evalcond[0]=(x2293+((r12*x2283))+(((-1.0)*x2289))+((x2277*x2285))+py+((x2274*x2275)));
evalcond[1]=(x2294+((x2281*x2285))+(((-1.0)*x2288))+((x2275*x2284))+((r22*x2283)));
evalcond[2]=(x2294+(((-1.0)*x2274*x2276))+(((-1.0)*x2288))+(((-1.0)*cj5*x2277*x2279))+(((-1.0)*sj5*x2274*x2279))+((x2277*x2278))+((r12*x2292)));
evalcond[3]=((((-1.0)*x2276*x2284))+x2289+((r22*x2292))+(((-1.0)*sj5*x2279*x2284))+((x2278*x2281))+(((-1.0)*py))+(((-1.0)*cj5*x2279*x2281))+(((-1.0)*x2293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2295=(cj5*sj4);
IkReal x2296=(cj1*cj4);
IkReal x2297=(cj4*sj1);
IkReal x2298=((1.0)*cj1);
IkReal x2299=(sj4*sj5);
if( IKabs((((r22*x2297))+(((-1.0)*r12*x2296))+(((-1.0)*r10*x2298*x2299))+((r21*sj1*x2295))+((r20*sj1*x2299))+(((-1.0)*r11*x2295*x2298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2299))+((r22*x2296))+((r10*sj1*x2299))+((r11*sj1*x2295))+((r12*x2297))+((cj1*r21*x2295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2297))+(((-1.0)*r12*x2296))+(((-1.0)*r10*x2298*x2299))+((r21*sj1*x2295))+((r20*sj1*x2299))+(((-1.0)*r11*x2295*x2298))))+IKsqr((((cj1*r20*x2299))+((r22*x2296))+((r10*sj1*x2299))+((r11*sj1*x2295))+((r12*x2297))+((cj1*r21*x2295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2297))+(((-1.0)*r12*x2296))+(((-1.0)*r10*x2298*x2299))+((r21*sj1*x2295))+((r20*sj1*x2299))+(((-1.0)*r11*x2295*x2298))), (((cj1*r20*x2299))+((r22*x2296))+((r10*sj1*x2299))+((r11*sj1*x2295))+((r12*x2297))+((cj1*r21*x2295))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2300=IKcos(j2);
IkReal x2301=IKsin(j2);
IkReal x2302=((1.0)*cj4);
IkReal x2303=(sj3*sj5);
IkReal x2304=((0.03868)*sj5);
IkReal x2305=(cj5*r21);
IkReal x2306=(cj3*sj5);
IkReal x2307=((0.03868)*cj5);
IkReal x2308=(cj3*sj4);
IkReal x2309=((1.0)*sj4);
IkReal x2310=(cj5*r11);
IkReal x2311=(sj1*x2300);
IkReal x2312=(cj1*x2300);
IkReal x2313=((1.0)*cj5*sj3);
IkReal x2314=(sj5*x2309);
IkReal x2315=(sj1*x2301);
IkReal x2316=(cj1*x2301);
IkReal x2317=((1.0)*x2316);
evalcond[0]=((((-1.0)*r20*x2314))+(((-1.0)*r22*x2302))+x2315+x2312+(((-1.0)*x2305*x2309)));
evalcond[1]=((((-1.0)*x2309*x2310))+x2311+(((-1.0)*r10*x2314))+(((-1.0)*x2317))+(((-1.0)*r12*x2302)));
evalcond[2]=((((-1.0)*r20*x2307))+(((-1.0)*pz))+(((-0.39225)*x2312))+(((-0.39225)*x2315))+((r21*x2304))+(((-0.425001)*cj1)));
evalcond[3]=((((-1.0)*r10*x2307))+((r11*x2304))+(((0.39225)*x2316))+(((-1.0)*py))+(((-0.39225)*x2311))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*r20*x2313))+x2311+(((-1.0)*cj3*x2302*x2305))+(((-1.0)*r20*x2302*x2306))+((r22*x2308))+((r21*x2303))+(((-1.0)*x2317)));
evalcond[5]=((((-1.0)*x2315))+(((-1.0)*x2312))+((r12*x2308))+((r11*x2303))+(((-1.0)*r10*x2313))+(((-1.0)*cj3*x2302*x2310))+(((-1.0)*r10*x2302*x2306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2318=((0.39225)*cj0);
IkReal x2319=((0.9229390048494)*sj4);
IkReal x2320=((0.03868)*cj0);
CheckValue<IkReal> x2321=IKPowWithIntegerCheck(cj0,-2);
if(!x2321.valid){
continue;
}
if( IKabs(((-2.35293564015143)*(x2321.value)*(((((-1.0)*cj4*r12*x2318))+(((-1.0)*r10*sj4*sj5*x2318))+((r11*sj5*x2320))+(((-1.0)*cj5*r11*sj4*x2318))+(((-0.032446)*cj0*sj0))+(((-1.0)*cj5*r10*x2320))+(((-1.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x2319))+(((0.0910115505610575)*r21*sj5))+(((-1.0)*cj5*r21*x2319))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.35293564015143)*(x2321.value)*(((((-1.0)*cj4*r12*x2318))+(((-1.0)*r10*sj4*sj5*x2318))+((r11*sj5*x2320))+(((-1.0)*cj5*r11*sj4*x2318))+(((-0.032446)*cj0*sj0))+(((-1.0)*cj5*r10*x2320))+(((-1.0)*cj0*py))))))+IKsqr(((((-1.0)*r20*sj5*x2319))+(((0.0910115505610575)*r21*sj5))+(((-1.0)*cj5*r21*x2319))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.35293564015143)*(x2321.value)*(((((-1.0)*cj4*r12*x2318))+(((-1.0)*r10*sj4*sj5*x2318))+((r11*sj5*x2320))+(((-1.0)*cj5*r11*sj4*x2318))+(((-0.032446)*cj0*sj0))+(((-1.0)*cj5*r10*x2320))+(((-1.0)*cj0*py))))), ((((-1.0)*r20*sj5*x2319))+(((0.0910115505610575)*r21*sj5))+(((-1.0)*cj5*r21*x2319))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2322=IKsin(j1);
IkReal x2323=IKcos(j1);
IkReal x2324=sj0*sj0;
IkReal x2325=cj0*cj0;
IkReal x2326=(r00*sj4);
IkReal x2327=((0.425001)*cj0);
IkReal x2328=(cj3*cj4);
IkReal x2329=(cj5*r00);
IkReal x2330=((0.03868)*sj0);
IkReal x2331=((0.39225)*sj4);
IkReal x2332=(r10*sj5);
IkReal x2333=((1.0)*cj0);
IkReal x2334=((0.39225)*sj3);
IkReal x2335=(cj0*cj5);
IkReal x2336=(cj5*r10);
IkReal x2337=(r11*sj5);
IkReal x2338=(r01*sj5);
IkReal x2339=(cj3*r22);
IkReal x2340=(cj5*r11);
IkReal x2341=((0.03868)*r20);
IkReal x2342=((0.03868)*cj0);
IkReal x2343=((0.39225)*cj4);
IkReal x2344=((0.032446)*cj0);
IkReal x2345=(r20*sj5);
IkReal x2346=((0.39225)*sj5);
IkReal x2347=(cj5*sj0);
IkReal x2348=((0.39225)*r21);
IkReal x2349=(r21*sj5);
IkReal x2350=(sj0*x2344);
IkReal x2351=(cj0*x2346);
IkReal x2352=(sj0*x2343);
IkReal x2353=((0.03868)*x2349);
IkReal x2354=((0.425001)*x2322);
IkReal x2355=((0.425001)*x2323);
IkReal x2356=(sj0*x2322*x2327);
evalcond[0]=(((x2331*x2345))+((cj5*x2341))+x2355+((r22*x2343))+pz+((cj5*r21*x2331))+(((-1.0)*x2353)));
evalcond[1]=((((-1.0)*py*x2333))+((x2325*x2354))+(((-1.0)*r11*x2331*x2335))+(((-1.0)*cj0*r12*x2343))+(((-1.0)*cj0*x2331*x2332))+((x2337*x2342))+(((-0.03868)*r10*x2335))+(((-1.0)*x2350)));
evalcond[2]=(((sj0*x2326*x2346))+x2350+((x2329*x2330))+((x2324*x2354))+((r01*x2331*x2347))+((px*sj0))+(((-1.0)*x2330*x2338))+((r02*x2352)));
evalcond[3]=(((sj0*x2355))+(((-1.0)*r00*x2328*x2346))+((cj3*r02*x2331))+((x2334*x2338))+(((-1.0)*x2330*x2349))+(((-0.39225)*cj5*r01*x2328))+(((-1.0)*x2329*x2334))+((pz*sj0))+((cj5*r20*x2330)));
evalcond[4]=((((-0.39225)*x2328*x2332))+(((-0.39225)*x2328*x2340))+(((-1.0)*pz*x2333))+(((-1.0)*x2335*x2341))+((x2334*x2337))+(((-1.0)*x2323*x2327))+((cj3*r12*x2331))+(((-1.0)*x2334*x2336))+((x2342*x2349)));
evalcond[5]=((((-0.03868)*x2336))+(((0.03868)*x2337))+(((-0.032446)*sj0))+((x2322*x2327))+(((-1.0)*cj0*x2334*x2349))+((r20*x2334*x2335))+(((-1.0)*py))+(((-1.0)*cj0*x2331*x2339))+(((0.39225)*cj0*x2328*x2345))+((x2328*x2335*x2348)));
evalcond[6]=((((0.03868)*x2338))+((sj0*x2331*x2339))+(((-1.0)*r20*x2334*x2347))+((sj0*x2334*x2349))+(((-0.03868)*x2329))+(((-1.0)*px))+(((-1.0)*x2328*x2347*x2348))+(((-0.39225)*sj0*x2328*x2345))+(((-1.0)*sj0*x2354))+(((-1.0)*x2344)));
evalcond[7]=((((-1.0)*cj0*r02*x2343))+(((-1.0)*r01*x2331*x2335))+(((-1.0)*x2326*x2351))+((py*sj0))+(((-1.0)*x2330*x2337))+(((0.032446)*x2324))+((x2330*x2336))+(((-1.0)*x2356)));
evalcond[8]=(((sj0*x2331*x2332))+((r12*x2352))+((x2338*x2342))+((sj0*x2331*x2340))+(((-1.0)*px*x2333))+(((-0.032446)*x2325))+(((-1.0)*x2356))+(((-1.0)*x2329*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2357=(cj4*sj1);
IkReal x2358=(cj1*cj4);
IkReal x2359=(cj5*sj4);
IkReal x2360=((1.0)*cj1);
IkReal x2361=(sj4*sj5);
IkReal x2362=(sj1*x2361);
if( IKabs((((r20*x2362))+(((-1.0)*r02*x2358))+(((-1.0)*r00*x2360*x2361))+((r22*x2357))+((r21*sj1*x2359))+(((-1.0)*r01*x2359*x2360)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2361))+((r22*x2358))+((cj1*r21*x2359))+((r01*sj1*x2359))+((r02*x2357))+((r00*x2362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x2362))+(((-1.0)*r02*x2358))+(((-1.0)*r00*x2360*x2361))+((r22*x2357))+((r21*sj1*x2359))+(((-1.0)*r01*x2359*x2360))))+IKsqr((((cj1*r20*x2361))+((r22*x2358))+((cj1*r21*x2359))+((r01*sj1*x2359))+((r02*x2357))+((r00*x2362))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*x2362))+(((-1.0)*r02*x2358))+(((-1.0)*r00*x2360*x2361))+((r22*x2357))+((r21*sj1*x2359))+(((-1.0)*r01*x2359*x2360))), (((cj1*r20*x2361))+((r22*x2358))+((cj1*r21*x2359))+((r01*sj1*x2359))+((r02*x2357))+((r00*x2362))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2363=IKcos(j2);
IkReal x2364=IKsin(j2);
IkReal x2365=(cj3*sj4);
IkReal x2366=((1.0)*cj5);
IkReal x2367=((1.0)*cj4);
IkReal x2368=(cj3*cj4);
IkReal x2369=(r21*sj5);
IkReal x2370=(cj3*sj5);
IkReal x2371=((0.03868)*cj5);
IkReal x2372=(r01*sj5);
IkReal x2373=(sj1*x2363);
IkReal x2374=(cj1*x2363);
IkReal x2375=((1.0)*sj4*sj5);
IkReal x2376=(sj1*x2364);
IkReal x2377=(cj1*x2364);
IkReal x2378=((1.0)*x2377);
evalcond[0]=(x2374+x2376+(((-1.0)*r20*x2375))+(((-1.0)*r21*sj4*x2366))+(((-1.0)*r22*x2367)));
evalcond[1]=((((-1.0)*r01*sj4*x2366))+x2373+(((-1.0)*x2378))+(((-1.0)*r00*x2375))+(((-1.0)*r02*x2367)));
evalcond[2]=((((-0.39225)*x2374))+(((-0.39225)*x2376))+(((-1.0)*r20*x2371))+(((-1.0)*pz))+(((0.03868)*x2369))+(((-0.425001)*cj1)));
evalcond[3]=((((-0.39225)*x2373))+(((0.39225)*x2377))+(((-1.0)*r00*x2371))+(((-1.0)*px))+(((0.03868)*x2372))+(((-0.425001)*sj1)));
evalcond[4]=(x2373+(((-1.0)*r21*x2366*x2368))+(((-1.0)*x2378))+((sj3*x2369))+(((-1.0)*r20*x2367*x2370))+((r22*x2365))+(((-1.0)*r20*sj3*x2366)));
evalcond[5]=((((-1.0)*r01*x2366*x2368))+((r02*x2365))+((sj3*x2372))+(((-1.0)*x2374))+(((-1.0)*x2376))+(((-1.0)*r00*x2367*x2370))+(((-1.0)*r00*sj3*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2379=(cj4*r22);
IkReal x2380=((1.0)*sj1);
IkReal x2381=(cj5*sj4);
IkReal x2382=(cj4*r02);
IkReal x2383=(sj4*sj5);
if( IKabs((((r20*sj1*x2383))+((sj1*x2379))+((r21*sj1*x2381))+((cj1*x2382))+((cj1*r00*x2383))+((cj1*r01*x2381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2380*x2382))+((cj1*r21*x2381))+(((-1.0)*r01*x2380*x2381))+((cj1*x2379))+((cj1*r20*x2383))+(((-1.0)*r00*x2380*x2383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x2383))+((sj1*x2379))+((r21*sj1*x2381))+((cj1*x2382))+((cj1*r00*x2383))+((cj1*r01*x2381))))+IKsqr(((((-1.0)*x2380*x2382))+((cj1*r21*x2381))+(((-1.0)*r01*x2380*x2381))+((cj1*x2379))+((cj1*r20*x2383))+(((-1.0)*r00*x2380*x2383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x2383))+((sj1*x2379))+((r21*sj1*x2381))+((cj1*x2382))+((cj1*r00*x2383))+((cj1*r01*x2381))), ((((-1.0)*x2380*x2382))+((cj1*r21*x2381))+(((-1.0)*r01*x2380*x2381))+((cj1*x2379))+((cj1*r20*x2383))+(((-1.0)*r00*x2380*x2383))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2384=IKsin(j2);
IkReal x2385=IKcos(j2);
IkReal x2386=(cj3*sj4);
IkReal x2387=((1.0)*cj5);
IkReal x2388=(cj3*cj4);
IkReal x2389=(r21*sj5);
IkReal x2390=((0.03868)*cj5);
IkReal x2391=((1.0)*cj4);
IkReal x2392=(r01*sj5);
IkReal x2393=(cj1*x2385);
IkReal x2394=(sj1*x2384);
IkReal x2395=(cj1*x2384);
IkReal x2396=(sj1*x2385);
IkReal x2397=((1.0)*r20*sj5);
IkReal x2398=((1.0)*r00*sj5);
IkReal x2399=(x2394+x2393);
evalcond[0]=(x2399+(((-1.0)*sj4*x2397))+(((-1.0)*r22*x2391))+(((-1.0)*r21*sj4*x2387)));
evalcond[1]=((((-1.0)*r02*x2391))+x2395+(((-1.0)*r01*sj4*x2387))+(((-1.0)*x2396))+(((-1.0)*sj4*x2398)));
evalcond[2]=((((-0.39225)*x2394))+(((-0.39225)*x2393))+(((0.03868)*x2389))+(((-1.0)*r20*x2390))+(((-1.0)*pz))+(((-0.425001)*cj1)));
evalcond[3]=((((-1.0)*r00*x2390))+(((-0.39225)*x2395))+(((0.03868)*x2392))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.39225)*x2396)));
evalcond[4]=(x2399+((r02*x2386))+((sj3*x2392))+(((-1.0)*r00*sj3*x2387))+(((-1.0)*x2388*x2398))+(((-1.0)*r01*x2387*x2388)));
evalcond[5]=(x2396+(((-1.0)*r20*sj3*x2387))+(((-1.0)*x2395))+((sj3*x2389))+((r22*x2386))+(((-1.0)*x2388*x2397))+(((-1.0)*r21*x2387*x2388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2400=(cj4*r12);
IkReal x2401=((1.0)*sj1);
IkReal x2402=(cj4*r22);
IkReal x2403=(sj4*sj5);
IkReal x2404=(cj5*sj4);
IkReal x2405=(cj1*x2404);
if( IKabs((((r20*sj1*x2403))+((r11*x2405))+((cj1*r10*x2403))+((cj1*x2400))+((sj1*x2402))+((r21*sj1*x2404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2400*x2401))+((cj1*r20*x2403))+(((-1.0)*r11*x2401*x2404))+(((-1.0)*r10*x2401*x2403))+((r21*x2405))+((cj1*x2402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x2403))+((r11*x2405))+((cj1*r10*x2403))+((cj1*x2400))+((sj1*x2402))+((r21*sj1*x2404))))+IKsqr(((((-1.0)*x2400*x2401))+((cj1*r20*x2403))+(((-1.0)*r11*x2401*x2404))+(((-1.0)*r10*x2401*x2403))+((r21*x2405))+((cj1*x2402))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x2403))+((r11*x2405))+((cj1*r10*x2403))+((cj1*x2400))+((sj1*x2402))+((r21*sj1*x2404))), ((((-1.0)*x2400*x2401))+((cj1*r20*x2403))+(((-1.0)*r11*x2401*x2404))+(((-1.0)*r10*x2401*x2403))+((r21*x2405))+((cj1*x2402))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2406=IKsin(j2);
IkReal x2407=IKcos(j2);
IkReal x2408=((1.0)*cj4);
IkReal x2409=(sj3*sj5);
IkReal x2410=((0.03868)*sj5);
IkReal x2411=(cj3*sj4);
IkReal x2412=(cj3*sj5);
IkReal x2413=((0.03868)*cj5);
IkReal x2414=(cj5*r21);
IkReal x2415=((1.0)*sj4);
IkReal x2416=(cj5*r11);
IkReal x2417=(cj1*x2407);
IkReal x2418=(sj1*x2406);
IkReal x2419=((1.0)*cj5*sj3);
IkReal x2420=(cj1*x2406);
IkReal x2421=(sj5*x2415);
IkReal x2422=(sj1*x2407);
IkReal x2423=(x2417+x2418);
evalcond[0]=(x2423+(((-1.0)*x2414*x2415))+(((-1.0)*r20*x2421))+(((-1.0)*r22*x2408)));
evalcond[1]=(x2420+(((-1.0)*r10*x2421))+(((-1.0)*x2415*x2416))+(((-1.0)*x2422))+(((-1.0)*r12*x2408)));
evalcond[2]=((((-1.0)*r20*x2413))+((r21*x2410))+(((-1.0)*pz))+(((-0.39225)*x2417))+(((-0.39225)*x2418))+(((-0.425001)*cj1)));
evalcond[3]=((((0.39225)*x2422))+((r11*x2410))+(((-1.0)*r10*x2413))+(((-1.0)*py))+(((0.425001)*sj1))+(((-0.39225)*x2420)));
evalcond[4]=(x2423+((r11*x2409))+(((-1.0)*r10*x2419))+(((-1.0)*cj3*x2408*x2416))+(((-1.0)*r10*x2408*x2412))+((r12*x2411)));
evalcond[5]=((((-1.0)*r20*x2419))+((r22*x2411))+x2422+(((-1.0)*cj3*x2408*x2414))+(((-1.0)*x2420))+((r21*x2409))+(((-1.0)*r20*x2408*x2412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2424=(cj5*sj4);
IkReal x2425=(cj1*cj4);
IkReal x2426=(cj4*sj1);
IkReal x2427=((1.0)*cj1);
IkReal x2428=(sj4*sj5);
if( IKabs((((r22*x2426))+(((-1.0)*r12*x2425))+(((-1.0)*r10*x2427*x2428))+((r21*sj1*x2424))+((r20*sj1*x2428))+(((-1.0)*r11*x2424*x2427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2425))+((cj1*r21*x2424))+((r11*sj1*x2424))+((r12*x2426))+((r10*sj1*x2428))+((cj1*r20*x2428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2426))+(((-1.0)*r12*x2425))+(((-1.0)*r10*x2427*x2428))+((r21*sj1*x2424))+((r20*sj1*x2428))+(((-1.0)*r11*x2424*x2427))))+IKsqr((((r22*x2425))+((cj1*r21*x2424))+((r11*sj1*x2424))+((r12*x2426))+((r10*sj1*x2428))+((cj1*r20*x2428))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2426))+(((-1.0)*r12*x2425))+(((-1.0)*r10*x2427*x2428))+((r21*sj1*x2424))+((r20*sj1*x2428))+(((-1.0)*r11*x2424*x2427))), (((r22*x2425))+((cj1*r21*x2424))+((r11*sj1*x2424))+((r12*x2426))+((r10*sj1*x2428))+((cj1*r20*x2428))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2429=IKcos(j2);
IkReal x2430=IKsin(j2);
IkReal x2431=((1.0)*cj4);
IkReal x2432=(sj3*sj5);
IkReal x2433=((0.03868)*sj5);
IkReal x2434=(cj5*r21);
IkReal x2435=(cj3*sj5);
IkReal x2436=((0.03868)*cj5);
IkReal x2437=(cj3*sj4);
IkReal x2438=((1.0)*sj4);
IkReal x2439=(cj5*r11);
IkReal x2440=(sj1*x2429);
IkReal x2441=(cj1*x2429);
IkReal x2442=((1.0)*cj5*sj3);
IkReal x2443=(sj5*x2438);
IkReal x2444=(sj1*x2430);
IkReal x2445=(cj1*x2430);
IkReal x2446=((1.0)*x2445);
evalcond[0]=((((-1.0)*r22*x2431))+x2441+x2444+(((-1.0)*r20*x2443))+(((-1.0)*x2434*x2438)));
evalcond[1]=(x2440+(((-1.0)*x2438*x2439))+(((-1.0)*r10*x2443))+(((-1.0)*x2446))+(((-1.0)*r12*x2431)));
evalcond[2]=((((-1.0)*pz))+((r21*x2433))+(((-1.0)*r20*x2436))+(((-0.425001)*cj1))+(((-0.39225)*x2441))+(((-0.39225)*x2444)));
evalcond[3]=((((0.39225)*x2445))+((r11*x2433))+(((-1.0)*py))+(((-0.425001)*sj1))+(((-1.0)*r10*x2436))+(((-0.39225)*x2440)));
evalcond[4]=((((-1.0)*r20*x2431*x2435))+x2440+(((-1.0)*r20*x2442))+((r22*x2437))+((r21*x2432))+(((-1.0)*x2446))+(((-1.0)*cj3*x2431*x2434)));
evalcond[5]=(((r11*x2432))+(((-1.0)*r10*x2442))+((r12*x2437))+(((-1.0)*x2444))+(((-1.0)*x2441))+(((-1.0)*r10*x2431*x2435))+(((-1.0)*cj3*x2431*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2447=(cj4*r12);
IkReal x2448=((1.0)*sj1);
IkReal x2449=(cj5*r21);
IkReal x2450=(r20*sj5);
IkReal x2451=(cj1*sj4);
IkReal x2452=(r10*sj5);
IkReal x2453=(cj5*r11*sj4);
IkReal x2454=(cj0*cj4*r22);
IkReal x2455=(cj0*sj1*sj4);
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal((((cj1*x2447))+((sj1*x2454))+((x2450*x2455))+((x2449*x2455))+((x2451*x2452))+((cj5*r11*x2451)))),IkReal((((cj0*x2449*x2451))+((cj1*x2454))+(((-1.0)*sj4*x2448*x2452))+(((-1.0)*x2448*x2453))+(((-1.0)*x2447*x2448))+((cj0*x2450*x2451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2457.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2456.value)+(((1.5707963267949)*(x2457.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2458=IKcos(j2);
IkReal x2459=IKsin(j2);
IkReal x2460=(cj3*sj4);
IkReal x2461=((1.0)*cj4);
IkReal x2462=(sj3*sj5);
IkReal x2463=(cj3*cj5);
IkReal x2464=((1.0)*sj0);
IkReal x2465=((0.03868)*sj5);
IkReal x2466=(cj0*sj1);
IkReal x2467=(cj3*sj5);
IkReal x2468=((0.03868)*cj5);
IkReal x2469=(cj1*x2458);
IkReal x2470=((1.0)*cj5*sj3);
IkReal x2471=(cj1*x2459);
IkReal x2472=(sj1*x2459);
IkReal x2473=((1.0)*sj4*sj5);
IkReal x2474=(sj1*x2458);
IkReal x2475=((1.0)*cj5*sj4);
IkReal x2476=((0.39225)*x2474);
evalcond[0]=((((-1.0)*r22*x2461))+(((-1.0)*r21*x2475))+x2469+x2472+(((-1.0)*r20*x2473)));
evalcond[1]=((((-0.39225)*x2469))+((r21*x2465))+(((-0.39225)*x2472))+(((-1.0)*pz))+(((-1.0)*r20*x2468))+(((-0.425001)*cj1)));
evalcond[2]=((((-1.0)*r01*x2475))+(((-1.0)*r00*x2473))+((sj0*x2474))+(((-1.0)*r02*x2461))+(((-1.0)*x2464*x2471)));
evalcond[3]=((((-1.0)*r11*x2475))+(((-1.0)*x2458*x2466))+(((-1.0)*r12*x2461))+(((-1.0)*r10*x2473))+((cj0*x2471)));
evalcond[4]=(((r01*x2465))+(((-0.425001)*sj0*sj1))+(((-1.0)*r00*x2468))+(((-1.0)*px))+(((-1.0)*sj0*x2476))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2471)));
evalcond[5]=((((-0.032446)*sj0))+((r11*x2465))+(((-1.0)*py))+(((-0.39225)*cj0*x2471))+(((-1.0)*r10*x2468))+(((0.39225)*x2458*x2466))+(((0.425001)*x2466)));
evalcond[6]=(x2474+(((-1.0)*r20*x2470))+(((-1.0)*r21*x2461*x2463))+(((-1.0)*x2471))+(((-1.0)*r20*x2461*x2467))+((r21*x2462))+((r22*x2460)));
evalcond[7]=(((x2459*x2466))+((r12*x2460))+((r11*x2462))+(((-1.0)*r10*x2470))+(((-1.0)*r11*x2461*x2463))+(((-1.0)*r10*x2461*x2467))+((cj0*x2469)));
evalcond[8]=((((-1.0)*x2464*x2469))+((r01*x2462))+(((-1.0)*r00*x2470))+(((-1.0)*r00*x2461*x2467))+((r02*x2460))+(((-1.0)*x2464*x2472))+(((-1.0)*r01*x2461*x2463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2477=(cj4*sj1);
IkReal x2478=(r22*sj0);
IkReal x2479=(sj1*sj4);
IkReal x2480=(cj5*r01);
IkReal x2481=(r00*sj5);
IkReal x2482=(cj1*cj4);
IkReal x2483=(cj1*sj4);
IkReal x2484=(cj5*r21*sj0);
IkReal x2485=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2486 = IKatan2WithCheck(IkReal(((((-1.0)*x2480*x2483))+(((-1.0)*r02*x2482))+((x2477*x2478))+(((-1.0)*x2481*x2483))+((r20*sj0*sj5*x2479))+((x2479*x2484)))),IkReal((((r20*sj0*sj5*x2483))+((x2483*x2484))+((r02*x2477))+((x2478*x2482))+((x2479*x2480))+((x2479*x2481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2486.valid){
continue;
}
CheckValue<IkReal> x2487=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2487.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2486.value)+(((1.5707963267949)*(x2487.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2488=IKcos(j2);
IkReal x2489=IKsin(j2);
IkReal x2490=(cj3*sj4);
IkReal x2491=((1.0)*cj4);
IkReal x2492=(sj3*sj5);
IkReal x2493=(cj3*cj5);
IkReal x2494=((1.0)*sj0);
IkReal x2495=((0.03868)*sj5);
IkReal x2496=(cj0*sj1);
IkReal x2497=(cj3*sj5);
IkReal x2498=((0.03868)*cj5);
IkReal x2499=(cj1*x2488);
IkReal x2500=((1.0)*cj5*sj3);
IkReal x2501=(cj1*x2489);
IkReal x2502=(sj1*x2489);
IkReal x2503=((1.0)*sj4*sj5);
IkReal x2504=(sj1*x2488);
IkReal x2505=((1.0)*cj5*sj4);
IkReal x2506=((0.39225)*x2504);
evalcond[0]=(x2502+x2499+(((-1.0)*r22*x2491))+(((-1.0)*r20*x2503))+(((-1.0)*r21*x2505)));
evalcond[1]=((((-0.39225)*x2502))+(((-1.0)*r20*x2498))+(((-1.0)*pz))+(((-0.39225)*x2499))+((r21*x2495))+(((-0.425001)*cj1)));
evalcond[2]=((((-1.0)*r00*x2503))+(((-1.0)*x2494*x2501))+(((-1.0)*r01*x2505))+(((-1.0)*r02*x2491))+((sj0*x2504)));
evalcond[3]=(((cj0*x2501))+(((-1.0)*r11*x2505))+(((-1.0)*x2488*x2496))+(((-1.0)*r10*x2503))+(((-1.0)*r12*x2491)));
evalcond[4]=((((-0.425001)*sj0*sj1))+(((-1.0)*r00*x2498))+(((-1.0)*px))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2501))+(((-1.0)*sj0*x2506))+((r01*x2495)));
evalcond[5]=((((-0.39225)*cj0*x2501))+(((-0.032446)*sj0))+(((-1.0)*r10*x2498))+(((0.39225)*x2488*x2496))+(((-1.0)*py))+((r11*x2495))+(((0.425001)*x2496)));
evalcond[6]=(x2504+(((-1.0)*r21*x2491*x2493))+((r22*x2490))+(((-1.0)*r20*x2491*x2497))+(((-1.0)*x2501))+((r21*x2492))+(((-1.0)*r20*x2500)));
evalcond[7]=((((-1.0)*r11*x2491*x2493))+(((-1.0)*r10*x2491*x2497))+((r11*x2492))+((r12*x2490))+((cj0*x2499))+(((-1.0)*r10*x2500))+((x2489*x2496)));
evalcond[8]=(((r02*x2490))+(((-1.0)*x2494*x2499))+(((-1.0)*r00*x2491*x2497))+(((-1.0)*r01*x2491*x2493))+(((-1.0)*r00*x2500))+(((-1.0)*x2494*x2502))+((r01*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2507=((0.03868)*sj0);
IkReal x2508=((0.9229390048494)*sj4);
IkReal x2509=((0.39225)*sj0);
CheckValue<IkReal> x2510=IKPowWithIntegerCheck(sj0,-2);
if(!x2510.valid){
continue;
}
if( IKabs(((-2.35293564015143)*(x2510.value)*(((((-1.0)*r01*sj5*x2507))+((cj5*r00*x2507))+((cj4*r02*x2509))+(((0.032446)*cj0*sj0))+((px*sj0))+((cj5*r01*sj4*x2509))+((r00*sj4*sj5*x2509)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x2508))+(((-1.0)*cj5*r21*x2508))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.35293564015143)*(x2510.value)*(((((-1.0)*r01*sj5*x2507))+((cj5*r00*x2507))+((cj4*r02*x2509))+(((0.032446)*cj0*sj0))+((px*sj0))+((cj5*r01*sj4*x2509))+((r00*sj4*sj5*x2509))))))+IKsqr(((((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x2508))+(((-1.0)*cj5*r21*x2508))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.35293564015143)*(x2510.value)*(((((-1.0)*r01*sj5*x2507))+((cj5*r00*x2507))+((cj4*r02*x2509))+(((0.032446)*cj0*sj0))+((px*sj0))+((cj5*r01*sj4*x2509))+((r00*sj4*sj5*x2509))))), ((((0.0910115505610575)*r21*sj5))+(((-1.0)*r20*sj5*x2508))+(((-1.0)*cj5*r21*x2508))+(((-0.9229390048494)*cj4*r22))+(((-0.0910115505610575)*cj5*r20))+(((-2.35293564015143)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2511=IKsin(j1);
IkReal x2512=IKcos(j1);
IkReal x2513=sj0*sj0;
IkReal x2514=cj0*cj0;
IkReal x2515=(r00*sj4);
IkReal x2516=((0.425001)*cj0);
IkReal x2517=(cj3*cj4);
IkReal x2518=(cj5*r00);
IkReal x2519=((0.03868)*sj0);
IkReal x2520=((0.39225)*sj4);
IkReal x2521=(r10*sj5);
IkReal x2522=((1.0)*cj0);
IkReal x2523=((0.39225)*sj3);
IkReal x2524=(cj0*cj5);
IkReal x2525=(cj5*r10);
IkReal x2526=(r11*sj5);
IkReal x2527=(r01*sj5);
IkReal x2528=(cj3*r22);
IkReal x2529=(cj5*r11);
IkReal x2530=((0.03868)*r20);
IkReal x2531=((0.03868)*cj0);
IkReal x2532=((0.39225)*cj4);
IkReal x2533=((0.032446)*cj0);
IkReal x2534=(r20*sj5);
IkReal x2535=((0.39225)*sj5);
IkReal x2536=(cj5*sj0);
IkReal x2537=((0.39225)*r21);
IkReal x2538=(r21*sj5);
IkReal x2539=(sj0*x2533);
IkReal x2540=(cj0*x2535);
IkReal x2541=(sj0*x2532);
IkReal x2542=((0.03868)*x2538);
IkReal x2543=((0.425001)*x2511);
IkReal x2544=((0.425001)*x2512);
IkReal x2545=(sj0*x2511*x2516);
evalcond[0]=(((cj5*x2530))+x2544+((x2520*x2534))+pz+((r22*x2532))+(((-1.0)*x2542))+((cj5*r21*x2520)));
evalcond[1]=(((x2526*x2531))+(((-0.03868)*r10*x2524))+(((-1.0)*cj0*r12*x2532))+(((-1.0)*py*x2522))+(((-1.0)*r11*x2520*x2524))+(((-1.0)*x2539))+(((-1.0)*cj0*x2520*x2521))+((x2514*x2543)));
evalcond[2]=(((x2518*x2519))+x2539+((x2513*x2543))+(((-1.0)*x2519*x2527))+((px*sj0))+((sj0*x2515*x2535))+((r02*x2541))+((r01*x2520*x2536)));
evalcond[3]=((((-1.0)*x2519*x2538))+(((-0.39225)*cj5*r01*x2517))+((cj5*r20*x2519))+((pz*sj0))+((x2523*x2527))+((sj0*x2544))+(((-1.0)*x2518*x2523))+(((-1.0)*r00*x2517*x2535))+((cj3*r02*x2520)));
evalcond[4]=((((-1.0)*x2523*x2525))+((x2531*x2538))+(((-1.0)*pz*x2522))+(((-0.39225)*x2517*x2529))+(((-0.39225)*x2517*x2521))+(((-1.0)*x2524*x2530))+(((-1.0)*x2512*x2516))+((x2523*x2526))+((cj3*r12*x2520)));
evalcond[5]=((((0.03868)*x2526))+(((-0.032446)*sj0))+((x2511*x2516))+(((-1.0)*cj0*x2523*x2538))+((r20*x2523*x2524))+((x2517*x2524*x2537))+(((-1.0)*cj0*x2520*x2528))+(((-1.0)*py))+(((-0.03868)*x2525))+(((0.39225)*cj0*x2517*x2534)));
evalcond[6]=((((-0.39225)*sj0*x2517*x2534))+(((0.03868)*x2527))+(((-1.0)*sj0*x2543))+(((-1.0)*x2517*x2536*x2537))+(((-0.03868)*x2518))+((sj0*x2523*x2538))+(((-1.0)*x2533))+((sj0*x2520*x2528))+(((-1.0)*px))+(((-1.0)*r20*x2523*x2536)));
evalcond[7]=((((-1.0)*cj0*r02*x2532))+((x2519*x2525))+(((-1.0)*x2515*x2540))+(((-1.0)*r01*x2520*x2524))+(((-1.0)*x2519*x2526))+(((-1.0)*x2545))+((py*sj0))+(((0.032446)*x2513)));
evalcond[8]=((((-1.0)*px*x2522))+(((-0.032446)*x2514))+((sj0*x2520*x2529))+((sj0*x2520*x2521))+((r12*x2541))+(((-1.0)*x2518*x2531))+((x2527*x2531))+(((-1.0)*x2545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2546=(cj4*sj1);
IkReal x2547=(cj1*cj4);
IkReal x2548=(cj5*sj4);
IkReal x2549=((1.0)*cj1);
IkReal x2550=(sj4*sj5);
IkReal x2551=(sj1*x2550);
if( IKabs(((((-1.0)*r00*x2549*x2550))+(((-1.0)*r02*x2547))+(((-1.0)*r01*x2548*x2549))+((r20*x2551))+((r21*sj1*x2548))+((r22*x2546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj1*x2548))+((cj1*r20*x2550))+((cj1*r21*x2548))+((r00*x2551))+((r02*x2546))+((r22*x2547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2549*x2550))+(((-1.0)*r02*x2547))+(((-1.0)*r01*x2548*x2549))+((r20*x2551))+((r21*sj1*x2548))+((r22*x2546))))+IKsqr((((r01*sj1*x2548))+((cj1*r20*x2550))+((cj1*r21*x2548))+((r00*x2551))+((r02*x2546))+((r22*x2547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2549*x2550))+(((-1.0)*r02*x2547))+(((-1.0)*r01*x2548*x2549))+((r20*x2551))+((r21*sj1*x2548))+((r22*x2546))), (((r01*sj1*x2548))+((cj1*r20*x2550))+((cj1*r21*x2548))+((r00*x2551))+((r02*x2546))+((r22*x2547))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2552=IKcos(j2);
IkReal x2553=IKsin(j2);
IkReal x2554=(cj3*sj4);
IkReal x2555=((1.0)*cj5);
IkReal x2556=((1.0)*cj4);
IkReal x2557=(cj3*cj4);
IkReal x2558=(r21*sj5);
IkReal x2559=(cj3*sj5);
IkReal x2560=((0.03868)*cj5);
IkReal x2561=(r01*sj5);
IkReal x2562=(sj1*x2552);
IkReal x2563=(cj1*x2552);
IkReal x2564=((1.0)*sj4*sj5);
IkReal x2565=(sj1*x2553);
IkReal x2566=(cj1*x2553);
IkReal x2567=((1.0)*x2566);
evalcond[0]=(x2563+x2565+(((-1.0)*r20*x2564))+(((-1.0)*r21*sj4*x2555))+(((-1.0)*r22*x2556)));
evalcond[1]=((((-1.0)*r00*x2564))+x2562+(((-1.0)*x2567))+(((-1.0)*r02*x2556))+(((-1.0)*r01*sj4*x2555)));
evalcond[2]=((((-1.0)*r20*x2560))+(((-1.0)*pz))+(((-0.425001)*cj1))+(((-0.39225)*x2565))+(((-0.39225)*x2563))+(((0.03868)*x2558)));
evalcond[3]=((((-1.0)*r00*x2560))+(((0.03868)*x2561))+(((-1.0)*px))+(((-0.425001)*sj1))+(((-0.39225)*x2562))+(((0.39225)*x2566)));
evalcond[4]=((((-1.0)*r20*x2556*x2559))+x2562+((r22*x2554))+(((-1.0)*x2567))+((sj3*x2558))+(((-1.0)*r20*sj3*x2555))+(((-1.0)*r21*x2555*x2557)));
evalcond[5]=((((-1.0)*x2565))+(((-1.0)*x2563))+(((-1.0)*r00*x2556*x2559))+((sj3*x2561))+(((-1.0)*r00*sj3*x2555))+(((-1.0)*r01*x2555*x2557))+((r02*x2554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2568=(cj4*r22);
IkReal x2569=((1.0)*sj1);
IkReal x2570=(cj5*sj4);
IkReal x2571=(cj4*r02);
IkReal x2572=(sj4*sj5);
if( IKabs((((cj1*r00*x2572))+((cj1*r01*x2570))+((cj1*x2571))+((r21*sj1*x2570))+((sj1*x2568))+((r20*sj1*x2572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2569*x2571))+((cj1*x2568))+((cj1*r20*x2572))+((cj1*r21*x2570))+(((-1.0)*r01*x2569*x2570))+(((-1.0)*r00*x2569*x2572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r00*x2572))+((cj1*r01*x2570))+((cj1*x2571))+((r21*sj1*x2570))+((sj1*x2568))+((r20*sj1*x2572))))+IKsqr(((((-1.0)*x2569*x2571))+((cj1*x2568))+((cj1*r20*x2572))+((cj1*r21*x2570))+(((-1.0)*r01*x2569*x2570))+(((-1.0)*r00*x2569*x2572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r00*x2572))+((cj1*r01*x2570))+((cj1*x2571))+((r21*sj1*x2570))+((sj1*x2568))+((r20*sj1*x2572))), ((((-1.0)*x2569*x2571))+((cj1*x2568))+((cj1*r20*x2572))+((cj1*r21*x2570))+(((-1.0)*r01*x2569*x2570))+(((-1.0)*r00*x2569*x2572))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2573=IKsin(j2);
IkReal x2574=IKcos(j2);
IkReal x2575=(cj3*sj4);
IkReal x2576=((1.0)*cj5);
IkReal x2577=(cj3*cj4);
IkReal x2578=(r21*sj5);
IkReal x2579=((0.03868)*cj5);
IkReal x2580=((1.0)*cj4);
IkReal x2581=(r01*sj5);
IkReal x2582=(cj1*x2574);
IkReal x2583=(sj1*x2573);
IkReal x2584=(cj1*x2573);
IkReal x2585=(sj1*x2574);
IkReal x2586=((1.0)*r20*sj5);
IkReal x2587=((1.0)*r00*sj5);
IkReal x2588=(x2583+x2582);
evalcond[0]=(x2588+(((-1.0)*sj4*x2586))+(((-1.0)*r21*sj4*x2576))+(((-1.0)*r22*x2580)));
evalcond[1]=((((-1.0)*r01*sj4*x2576))+x2584+(((-1.0)*r02*x2580))+(((-1.0)*x2585))+(((-1.0)*sj4*x2587)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*r20*x2579))+(((0.03868)*x2578))+(((-0.39225)*x2582))+(((-0.39225)*x2583))+(((-0.425001)*cj1)));
evalcond[3]=((((0.03868)*x2581))+(((-1.0)*px))+(((0.425001)*sj1))+(((-1.0)*r00*x2579))+(((-0.39225)*x2584))+(((0.39225)*x2585)));
evalcond[4]=(x2588+((sj3*x2581))+(((-1.0)*r01*x2576*x2577))+(((-1.0)*r00*sj3*x2576))+(((-1.0)*x2577*x2587))+((r02*x2575)));
evalcond[5]=(x2585+(((-1.0)*x2584))+(((-1.0)*r20*sj3*x2576))+((sj3*x2578))+(((-1.0)*x2577*x2586))+(((-1.0)*r21*x2576*x2577))+((r22*x2575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2589=(cj4*r12);
IkReal x2590=((1.0)*sj1);
IkReal x2591=(cj4*r22);
IkReal x2592=(sj4*sj5);
IkReal x2593=(cj5*sj4);
IkReal x2594=(cj1*x2593);
if( IKabs((((r20*sj1*x2592))+((cj1*x2589))+((r21*sj1*x2593))+((cj1*r10*x2592))+((r11*x2594))+((sj1*x2591)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2591))+(((-1.0)*x2589*x2590))+(((-1.0)*r11*x2590*x2593))+((cj1*r20*x2592))+(((-1.0)*r10*x2590*x2592))+((r21*x2594)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj1*x2592))+((cj1*x2589))+((r21*sj1*x2593))+((cj1*r10*x2592))+((r11*x2594))+((sj1*x2591))))+IKsqr((((cj1*x2591))+(((-1.0)*x2589*x2590))+(((-1.0)*r11*x2590*x2593))+((cj1*r20*x2592))+(((-1.0)*r10*x2590*x2592))+((r21*x2594))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r20*sj1*x2592))+((cj1*x2589))+((r21*sj1*x2593))+((cj1*r10*x2592))+((r11*x2594))+((sj1*x2591))), (((cj1*x2591))+(((-1.0)*x2589*x2590))+(((-1.0)*r11*x2590*x2593))+((cj1*r20*x2592))+(((-1.0)*r10*x2590*x2592))+((r21*x2594))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2595=IKsin(j2);
IkReal x2596=IKcos(j2);
IkReal x2597=((1.0)*cj4);
IkReal x2598=(sj3*sj5);
IkReal x2599=((0.03868)*sj5);
IkReal x2600=(cj3*sj4);
IkReal x2601=(cj3*sj5);
IkReal x2602=((0.03868)*cj5);
IkReal x2603=(cj5*r21);
IkReal x2604=((1.0)*sj4);
IkReal x2605=(cj5*r11);
IkReal x2606=(cj1*x2596);
IkReal x2607=(sj1*x2595);
IkReal x2608=((1.0)*cj5*sj3);
IkReal x2609=(cj1*x2595);
IkReal x2610=(sj5*x2604);
IkReal x2611=(sj1*x2596);
IkReal x2612=(x2606+x2607);
evalcond[0]=((((-1.0)*r22*x2597))+(((-1.0)*x2603*x2604))+(((-1.0)*r20*x2610))+x2612);
evalcond[1]=((((-1.0)*x2611))+(((-1.0)*r10*x2610))+(((-1.0)*r12*x2597))+(((-1.0)*x2604*x2605))+x2609);
evalcond[2]=((((-1.0)*pz))+(((-0.39225)*x2607))+(((-0.39225)*x2606))+(((-1.0)*r20*x2602))+(((-0.425001)*cj1))+((r21*x2599)));
evalcond[3]=((((-1.0)*r10*x2602))+(((-1.0)*py))+(((0.425001)*sj1))+((r11*x2599))+(((-0.39225)*x2609))+(((0.39225)*x2611)));
evalcond[4]=((((-1.0)*cj3*x2597*x2605))+(((-1.0)*r10*x2608))+((r11*x2598))+((r12*x2600))+(((-1.0)*r10*x2597*x2601))+x2612);
evalcond[5]=((((-1.0)*x2609))+(((-1.0)*cj3*x2597*x2603))+(((-1.0)*r20*x2608))+((r22*x2600))+x2611+((r21*x2598))+(((-1.0)*r20*x2597*x2601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2613=(cj5*sj4);
IkReal x2614=(cj1*cj4);
IkReal x2615=(cj4*sj1);
IkReal x2616=((1.0)*cj1);
IkReal x2617=(sj4*sj5);
if( IKabs((((r21*sj1*x2613))+((r20*sj1*x2617))+(((-1.0)*r10*x2616*x2617))+(((-1.0)*r12*x2614))+((r22*x2615))+(((-1.0)*r11*x2613*x2616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x2613))+((cj1*r20*x2617))+((cj1*r21*x2613))+((r10*sj1*x2617))+((r22*x2614))+((r12*x2615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj1*x2613))+((r20*sj1*x2617))+(((-1.0)*r10*x2616*x2617))+(((-1.0)*r12*x2614))+((r22*x2615))+(((-1.0)*r11*x2613*x2616))))+IKsqr((((r11*sj1*x2613))+((cj1*r20*x2617))+((cj1*r21*x2613))+((r10*sj1*x2617))+((r22*x2614))+((r12*x2615))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r21*sj1*x2613))+((r20*sj1*x2617))+(((-1.0)*r10*x2616*x2617))+(((-1.0)*r12*x2614))+((r22*x2615))+(((-1.0)*r11*x2613*x2616))), (((r11*sj1*x2613))+((cj1*r20*x2617))+((cj1*r21*x2613))+((r10*sj1*x2617))+((r22*x2614))+((r12*x2615))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2618=IKcos(j2);
IkReal x2619=IKsin(j2);
IkReal x2620=((1.0)*cj4);
IkReal x2621=(sj3*sj5);
IkReal x2622=((0.03868)*sj5);
IkReal x2623=(cj5*r21);
IkReal x2624=(cj3*sj5);
IkReal x2625=((0.03868)*cj5);
IkReal x2626=(cj3*sj4);
IkReal x2627=((1.0)*sj4);
IkReal x2628=(cj5*r11);
IkReal x2629=(sj1*x2618);
IkReal x2630=(cj1*x2618);
IkReal x2631=((1.0)*cj5*sj3);
IkReal x2632=(sj5*x2627);
IkReal x2633=(sj1*x2619);
IkReal x2634=(cj1*x2619);
IkReal x2635=((1.0)*x2634);
evalcond[0]=((((-1.0)*x2623*x2627))+(((-1.0)*r20*x2632))+(((-1.0)*r22*x2620))+x2630+x2633);
evalcond[1]=((((-1.0)*r10*x2632))+(((-1.0)*x2635))+(((-1.0)*r12*x2620))+(((-1.0)*x2627*x2628))+x2629);
evalcond[2]=((((-0.39225)*x2633))+(((-0.39225)*x2630))+(((-1.0)*pz))+(((-0.425001)*cj1))+((r21*x2622))+(((-1.0)*r20*x2625)));
evalcond[3]=((((0.39225)*x2634))+(((-1.0)*py))+(((-1.0)*r10*x2625))+(((-0.39225)*x2629))+((r11*x2622))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*cj3*x2620*x2623))+(((-1.0)*r20*x2620*x2624))+(((-1.0)*x2635))+(((-1.0)*r20*x2631))+((r22*x2626))+((r21*x2621))+x2629);
evalcond[5]=((((-1.0)*cj3*x2620*x2628))+(((-1.0)*r10*x2631))+(((-1.0)*r10*x2620*x2624))+((r11*x2621))+(((-1.0)*x2630))+(((-1.0)*x2633))+((r12*x2626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2636=(cj4*r12);
IkReal x2637=((1.0)*sj1);
IkReal x2638=(cj5*r21);
IkReal x2639=(r20*sj5);
IkReal x2640=(cj1*sj4);
IkReal x2641=(r10*sj5);
IkReal x2642=(cj5*r11*sj4);
IkReal x2643=(cj0*cj4*r22);
IkReal x2644=(cj0*sj1*sj4);
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2645.valid){
continue;
}
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal((((cj1*x2636))+((cj5*r11*x2640))+((x2639*x2644))+((x2638*x2644))+((x2640*x2641))+((sj1*x2643)))),IkReal((((cj0*x2638*x2640))+((cj1*x2643))+((cj0*x2639*x2640))+(((-1.0)*x2637*x2642))+(((-1.0)*sj4*x2637*x2641))+(((-1.0)*x2636*x2637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2645.value)))+(x2646.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2647=IKcos(j2);
IkReal x2648=IKsin(j2);
IkReal x2649=(cj3*sj4);
IkReal x2650=((1.0)*cj4);
IkReal x2651=(sj3*sj5);
IkReal x2652=(cj3*cj5);
IkReal x2653=((1.0)*sj0);
IkReal x2654=((0.03868)*sj5);
IkReal x2655=(cj0*sj1);
IkReal x2656=(cj3*sj5);
IkReal x2657=((0.03868)*cj5);
IkReal x2658=(cj1*x2647);
IkReal x2659=((1.0)*cj5*sj3);
IkReal x2660=(cj1*x2648);
IkReal x2661=(sj1*x2648);
IkReal x2662=((1.0)*sj4*sj5);
IkReal x2663=(sj1*x2647);
IkReal x2664=((1.0)*cj5*sj4);
IkReal x2665=((0.39225)*x2663);
evalcond[0]=((((-1.0)*r22*x2650))+(((-1.0)*r20*x2662))+(((-1.0)*r21*x2664))+x2658+x2661);
evalcond[1]=(((r21*x2654))+(((-0.39225)*x2661))+(((-1.0)*pz))+(((-1.0)*r20*x2657))+(((-0.39225)*x2658))+(((-0.425001)*cj1)));
evalcond[2]=((((-1.0)*x2653*x2660))+((sj0*x2663))+(((-1.0)*r00*x2662))+(((-1.0)*r02*x2650))+(((-1.0)*r01*x2664)));
evalcond[3]=((((-1.0)*r11*x2664))+(((-1.0)*r12*x2650))+(((-1.0)*x2647*x2655))+((cj0*x2660))+(((-1.0)*r10*x2662)));
evalcond[4]=((((0.39225)*sj0*x2660))+(((-0.425001)*sj0*sj1))+(((-1.0)*sj0*x2665))+(((-1.0)*r00*x2657))+(((-1.0)*px))+(((-0.032446)*cj0))+((r01*x2654)));
evalcond[5]=((((0.425001)*x2655))+((r11*x2654))+(((-0.39225)*cj0*x2660))+(((-0.032446)*sj0))+(((-1.0)*py))+(((-1.0)*r10*x2657))+(((0.39225)*x2647*x2655)));
evalcond[6]=((((-1.0)*x2660))+((r21*x2651))+(((-1.0)*r20*x2650*x2656))+(((-1.0)*r20*x2659))+(((-1.0)*r21*x2650*x2652))+((r22*x2649))+x2663);
evalcond[7]=(((r12*x2649))+(((-1.0)*r11*x2650*x2652))+((r11*x2651))+(((-1.0)*r10*x2650*x2656))+((x2648*x2655))+((cj0*x2658))+(((-1.0)*r10*x2659)));
evalcond[8]=((((-1.0)*x2653*x2661))+(((-1.0)*r00*x2659))+(((-1.0)*r00*x2650*x2656))+((r02*x2649))+((r01*x2651))+(((-1.0)*r01*x2650*x2652))+(((-1.0)*x2653*x2658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2666=(cj4*sj1);
IkReal x2667=(r22*sj0);
IkReal x2668=(sj1*sj4);
IkReal x2669=(cj5*r01);
IkReal x2670=(r00*sj5);
IkReal x2671=(cj1*cj4);
IkReal x2672=(cj1*sj4);
IkReal x2673=(cj5*r21*sj0);
IkReal x2674=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(((((-1.0)*x2669*x2672))+((x2668*x2673))+((x2666*x2667))+((r20*sj0*sj5*x2668))+(((-1.0)*x2670*x2672))+(((-1.0)*r02*x2671)))),IkReal((((x2672*x2673))+((x2668*x2670))+((x2668*x2669))+((x2667*x2671))+((r02*x2666))+((r20*sj0*sj5*x2672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2676.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2675.value)+(((1.5707963267949)*(x2676.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2677=IKcos(j2);
IkReal x2678=IKsin(j2);
IkReal x2679=(cj3*sj4);
IkReal x2680=((1.0)*cj4);
IkReal x2681=(sj3*sj5);
IkReal x2682=(cj3*cj5);
IkReal x2683=((1.0)*sj0);
IkReal x2684=((0.03868)*sj5);
IkReal x2685=(cj0*sj1);
IkReal x2686=(cj3*sj5);
IkReal x2687=((0.03868)*cj5);
IkReal x2688=(cj1*x2677);
IkReal x2689=((1.0)*cj5*sj3);
IkReal x2690=(cj1*x2678);
IkReal x2691=(sj1*x2678);
IkReal x2692=((1.0)*sj4*sj5);
IkReal x2693=(sj1*x2677);
IkReal x2694=((1.0)*cj5*sj4);
IkReal x2695=((0.39225)*x2693);
evalcond[0]=((((-1.0)*r22*x2680))+(((-1.0)*r20*x2692))+x2688+x2691+(((-1.0)*r21*x2694)));
evalcond[1]=((((-0.39225)*x2688))+((r21*x2684))+(((-1.0)*pz))+(((-1.0)*r20*x2687))+(((-0.425001)*cj1))+(((-0.39225)*x2691)));
evalcond[2]=((((-1.0)*r02*x2680))+(((-1.0)*x2683*x2690))+(((-1.0)*r00*x2692))+((sj0*x2693))+(((-1.0)*r01*x2694)));
evalcond[3]=((((-1.0)*r12*x2680))+(((-1.0)*r10*x2692))+(((-1.0)*x2677*x2685))+((cj0*x2690))+(((-1.0)*r11*x2694)));
evalcond[4]=((((-0.425001)*sj0*sj1))+((r01*x2684))+(((-1.0)*r00*x2687))+(((-1.0)*px))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2690))+(((-1.0)*sj0*x2695)));
evalcond[5]=((((0.39225)*x2677*x2685))+((r11*x2684))+(((-0.032446)*sj0))+(((0.425001)*x2685))+(((-1.0)*py))+(((-1.0)*r10*x2687))+(((-0.39225)*cj0*x2690)));
evalcond[6]=(((r22*x2679))+((r21*x2681))+(((-1.0)*r20*x2680*x2686))+(((-1.0)*x2690))+(((-1.0)*r20*x2689))+(((-1.0)*r21*x2680*x2682))+x2693);
evalcond[7]=(((r11*x2681))+((cj0*x2688))+((r12*x2679))+(((-1.0)*r11*x2680*x2682))+(((-1.0)*r10*x2680*x2686))+((x2678*x2685))+(((-1.0)*r10*x2689)));
evalcond[8]=((((-1.0)*r01*x2680*x2682))+(((-1.0)*x2683*x2688))+(((-1.0)*x2683*x2691))+((r02*x2679))+((r01*x2681))+(((-1.0)*r00*x2689))+(((-1.0)*r00*x2680*x2686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "c0e929c0c95ce427fb37b391cb124587"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
