/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-12-05 15:31:37.128908
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKcos(j[0]);
x7=IKsin(j[3]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.03868)*x4);
x13=((0.03868)*x5);
x14=((0.39225)*x3);
x15=((1.0)*x7);
x16=((1.0)*x0);
x17=((1.0)*x3);
x18=((1.0)*x6);
x19=((0.22175)*x3);
x20=(x6*x7);
x21=(x1*x2);
x22=(x2*x6);
x23=(x0*x7);
x24=(x1*x3);
x25=(x0*x4);
x26=(x2*x4);
x27=(x0*x2);
x28=(x4*x6);
x29=(x10*x5);
x30=((1.0)*x21);
x31=(x16*x21);
x32=(x17*x28);
x33=((((-1.0)*x30))+((x3*x4)));
x34=(((x22*x4))+((x24*x6)));
x35=(x16*(((((-1.0)*x26))+(((-1.0)*x24)))));
x36=(x34*x5);
x37=(x35*x5);
x38=((((-1.0)*x0*x15))+x36);
x39=(((x11*x33*x5))+((x10*(((((-1.0)*x26))+(((-1.0)*x1*x17)))))));
x40=(((x10*(((((-1.0)*x18*x21))+x32))))+((x11*x38)));
x41=(((x10*(((((-1.0)*x16*x3*x4))+x31))))+((x11*(((((-1.0)*x20))+x37)))));
eerot[0]=(((x41*x8))+((x9*((((x5*x6))+((x35*x7)))))));
eerot[1]=(((x41*x9))+((x8*(((((-1.0)*x18*x5))+(((-1.0)*x15*x35)))))));
eerot[2]=(((x11*(((((-1.0)*x31))+((x25*x3))))))+((x10*((x37+(((-1.0)*x15*x6)))))));
IkReal x42=(x0*x21);
eetrans[0]=((0.06828)+((x11*(((((-0.22175)*x42))+((x19*x25))))))+(((-0.425001)*x27))+((x14*x25))+((x10*(((((-0.22175)*x20))+(((0.22175)*x37))))))+((x7*(((((0.03868)*x0*x24))+((x12*x27))))))+(((-0.39225)*x42))+(((-1.0)*x13*x6))+(((-0.032446)*x6)));
eerot[3]=(((x9*((((x0*x5))+((x34*x7))))))+((x40*x8)));
eerot[4]=(((x8*(((((-1.0)*x16*x5))+(((-1.0)*x15*x34))))))+((x40*x9)));
eerot[5]=(((x11*(((((-1.0)*x32))+((x21*x6))))))+((x10*x38)));
IkReal x43=(x21*x6);
IkReal x44=((1.0)*x28);
eetrans[1]=((0.001091)+((x10*(((((-0.22175)*x23))+(((0.22175)*x36))))))+((x11*(((((-1.0)*x19*x44))+(((0.22175)*x43))))))+(((-1.0)*x0*x13))+(((0.39225)*x43))+(((0.425001)*x22))+((x7*(((((-1.0)*x12*x22))+(((-0.03868)*x24*x6))))))+(((-1.0)*x14*x44))+(((-0.032446)*x0)));
eerot[6]=(((x39*x8))+((x33*x7*x9)));
eerot[7]=(((x39*x9))+((x7*x8*(((((-1.0)*x17*x4))+x30)))));
eerot[8]=(((x29*x33))+((x11*((x24+x26)))));
eetrans[2]=((0.187444)+((x11*((((x1*x19))+(((0.22175)*x26))))))+((x1*x14))+((x29*(((((-0.22175)*x21))+((x19*x4))))))+((x7*(((((-1.0)*x12*x3))+(((0.03868)*x21))))))+(((0.425001)*x3))+(((0.39225)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((-0.06828)+px+(((-0.22175)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((-0.001091)+(((-0.22175)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.187444)+(((-0.22175)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x45=((1.0)*px);
IkReal x46=((1.0)*pz);
IkReal x47=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x47))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x46)));
rxp0_2=((((-1.0)*r10*x45))+((py*r00)));
rxp1_0=((((-1.0)*r21*x47))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x46)));
rxp1_2=((((-1.0)*r11*x45))+((py*r01)));
rxp2_0=((((-1.0)*r22*x47))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x46))+((px*r22)));
rxp2_2=((((-1.0)*r12*x45))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x48=((0.06575615472)*npy);
IkReal x49=((0.03287807736)*npx);
IkReal x50=((0.3334132845)*npz);
IkReal x51=((0.425001)*pp);
IkReal x52=((0.032446)*r12);
IkReal x53=((0.03868)*r21);
IkReal x54=((1.0)*rxp2_2);
IkReal x55=((0.666826569)*npy);
IkReal x56=((0.064892)*r11);
IkReal x57=((2.0)*rxp1_2);
IkReal x58=((0.07736)*r22);
IkReal x59=((0.064892)*r01);
IkReal x60=((0.129784)*r00);
IkReal x61=((4.0)*rxp0_2);
IkReal x62=((0.129784)*r10);
IkReal x63=((0.032446)*r02);
IkReal x64=((0.07736)*r20);
IkReal x65=((-0.032446)*r02);
IkReal x66=((-0.07736)*r20);
IkReal x67=((-0.666826569)*npy);
IkReal x68=((-1.333653138)*npx);
IkReal x69=((-0.064892)*r01);
IkReal x70=((0.011187041229613)+x50);
IkReal x71=(x53+x52);
IkReal x72=(x51+x50);
IkReal x73=(x58+x56);
IkReal x74=((((-1.0)*x49))+x70+(((-1.0)*x51)));
IkReal x75=(x70+x49+(((-1.0)*x51)));
IkReal x76=((0.011187041229613)+(((-1.0)*x72))+(((-1.0)*x49)));
IkReal x77=((0.011187041229613)+(((-1.0)*x72))+x49);
op[0]=x74;
op[1]=x74;
op[2]=x48;
op[3]=x48;
op[4]=x75;
op[5]=x75;
op[6]=(x52+(((-1.0)*x54))+(((-1.0)*x53)));
op[7]=x65;
op[8]=x66;
op[9]=0;
op[10]=(x71+(((-1.0)*x54)));
op[11]=x65;
op[12]=x65;
op[13]=((((-1.0)*x71))+(((-1.0)*x54)));
op[14]=0;
op[15]=x66;
op[16]=x65;
op[17]=(x53+(((-1.0)*x54))+(((-1.0)*x52)));
op[18]=0;
op[19]=x74;
op[20]=0;
op[21]=x48;
op[22]=0;
op[23]=x75;
op[24]=x67;
op[25]=x67;
op[26]=x68;
op[27]=x68;
op[28]=x55;
op[29]=x55;
op[30]=((((-1.0)*x73))+x57);
op[31]=x59;
op[32]=(x61+(((-1.0)*x62)));
op[33]=x60;
op[34]=(x56+(((-1.0)*x58))+(((-1.0)*x57)));
op[35]=x69;
op[36]=x59;
op[37]=(x57+x56+(((-1.0)*x58)));
op[38]=x60;
op[39]=(x61+x62);
op[40]=x69;
op[41]=((((-1.0)*x73))+(((-1.0)*x57)));
op[42]=0;
op[43]=x67;
op[44]=0;
op[45]=x68;
op[46]=0;
op[47]=x55;
op[48]=x76;
op[49]=x76;
op[50]=x48;
op[51]=x48;
op[52]=x77;
op[53]=x77;
op[54]=(rxp2_2+x53+(((-1.0)*x52)));
op[55]=x63;
op[56]=x64;
op[57]=0;
op[58]=((((-1.0)*x71))+rxp2_2);
op[59]=x63;
op[60]=x63;
op[61]=(rxp2_2+x71);
op[62]=0;
op[63]=x64;
op[64]=x63;
op[65]=(rxp2_2+x52+(((-1.0)*x53)));
op[66]=0;
op[67]=x76;
op[68]=0;
op[69]=x48;
op[70]=0;
op[71]=x77;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x78=htj4*htj4;
CheckValue<IkReal> x79=IKPowWithIntegerCheck(((1.0)+x78),-1);
if(!x79.valid){
continue;
}
cj4array[numsolutions]=((x79.value)*(((1.0)+(((-1.0)*x78)))));
CheckValue<IkReal> x80=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x80.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x80.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x81=htj5*htj5;
CheckValue<IkReal> x82=IKPowWithIntegerCheck(((1.0)+x81),-1);
if(!x82.valid){
continue;
}
cj5array[numsolutions]=((x82.value)*(((1.0)+(((-1.0)*x81)))));
CheckValue<IkReal> x83=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x83.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x83.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x84=htj0*htj0;
CheckValue<IkReal> x85=IKPowWithIntegerCheck(((1.0)+x84),-1);
if(!x85.valid){
continue;
}
cj0array[numsolutions]=((x85.value)*(((1.0)+(((-1.0)*x84)))));
CheckValue<IkReal> x86=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x86.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x86.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x87=(r21*sj0);
IkReal x88=((1.0)*cj4);
IkReal x89=((1.0)*r20*sj0);
IkReal x90=((((-1.0)*r02*x88))+((r00*sj4*sj5))+((cj5*r01*sj4)));
j3eval[0]=x90;
j3eval[1]=((IKabs(((((-1.0)*cj5*x89))+((sj5*x87)))))+(IKabs(((((-1.0)*r20*sj0*sj5*x88))+(((-1.0)*r22*sj0*sj4))+(((-1.0)*cj5*x87*x88))))));
j3eval[2]=IKsign(x90);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x91=(cj0*r21);
IkReal x92=((1.0)*cj5);
IkReal x93=((1.0)*sj4);
IkReal x94=(cj0*r20);
IkReal x95=((((-1.0)*r10*sj5*x93))+(((-1.0)*r11*sj4*x92))+((cj4*r12)));
j3eval[0]=x95;
j3eval[1]=IKsign(x95);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x94))+(((-1.0)*cj0*r22*x93))+(((-1.0)*cj4*x91*x92)))))+(IKabs(((((-1.0)*x92*x94))+((sj5*x91))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x96=(((cj5*r21*sj4))+(((-1.0)*cj4*r22))+((r20*sj4*sj5)));
j3eval[0]=x96;
j3eval[1]=IKsign(x96);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x97=((1.0)*r20);
IkReal x98=((1.0)*cj4);
IkReal x99=(((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x98)));
j3eval[0]=x99;
j3eval[1]=IKsign(x99);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x97)))))+(IKabs(((((-1.0)*cj4*sj5*x97))+(((-1.0)*cj5*r21*x98))+(((-1.0)*r22*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x100=((1.0)*sj4);
IkReal x101=((1.0)*r00);
IkReal x102=((((-1.0)*cj5*r21*x100))+((cj4*r22))+(((-1.0)*r20*sj5*x100)));
j3eval[0]=x102;
j3eval[1]=IKsign(x102);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x101))+(((-1.0)*cj4*cj5*r01))+(((-1.0)*r02*x100)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*x101))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x103=cj4*cj4;
IkReal x104=r11*r11;
IkReal x105=cj5*cj5;
IkReal x106=r10*r10;
IkReal x107=r12*r12;
IkReal x108=(cj5*r11);
IkReal x109=((1.0)*cj4);
IkReal x110=((1.0)*x103);
IkReal x111=((2.0)*r10*sj5);
IkReal x112=(cj4*r12*sj4);
IkReal x113=(x105*x106);
IkReal x114=(x104*x105);
IkReal x115=(((x111*x112))+((x103*x108*x111))+(((-1.0)*x107*x110))+((x103*x114))+(((-1.0)*x110*x113))+(((2.0)*x108*x112))+x113+x104+x107+((x103*x106))+(((-1.0)*x108*x111))+(((-1.0)*x114)));
j3eval[0]=x115;
j3eval[1]=IKsign(x115);
j3eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*sj5)))))+(IKabs(((((-1.0)*x108*x109))+(((-1.0)*r10*sj5*x109))+(((-1.0)*r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x116=cj4*cj4;
IkReal x117=r11*r11;
IkReal x118=cj5*cj5;
IkReal x119=r10*r10;
IkReal x120=r12*r12;
IkReal x121=(cj5*r11);
IkReal x122=((1.0)*sj5);
IkReal x123=((1.0)*x116);
IkReal x124=((2.0)*r10*sj5);
IkReal x125=(cj4*r12*sj4);
IkReal x126=(x118*x119);
IkReal x127=(x117*x118);
CheckValue<IkReal> x128=IKPowWithIntegerCheck(IKsign(((((-1.0)*x120*x123))+(((-1.0)*x123*x126))+(((2.0)*x121*x125))+x126+x120+x117+((x116*x121*x124))+((x124*x125))+(((-1.0)*x121*x124))+((x116*x127))+((x116*x119))+(((-1.0)*x127)))),-1);
if(!x128.valid){
continue;
}
CheckValue<IkReal> x129 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x121))+(((-1.0)*cj4*r10*x122))+(((-1.0)*r12*sj4)))),IkReal((((cj5*r10))+(((-1.0)*r11*x122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x129.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x128.value)))+(x129.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x130=IKsin(j3);
IkReal x131=IKcos(j3);
IkReal x132=(cj4*cj5);
IkReal x133=(cj5*r10);
IkReal x134=((1.0)*x131);
IkReal x135=(r11*x130);
IkReal x136=(sj4*x130);
IkReal x137=(sj5*x131);
IkReal x138=(cj4*sj5*x130);
evalcond[0]=(((r21*x130*x132))+((r22*x136))+((r21*x137))+((r20*x138))+(((-1.0)*cj5*r20*x134)));
evalcond[1]=(((r02*x136))+((r00*x138))+((r01*x137))+((r01*x130*x132))+(((-1.0)*cj5*r00*x134)));
evalcond[2]=((1.0)+(((-1.0)*x133*x134))+((r12*x136))+((r11*x137))+((x132*x135))+((r10*x138)));
evalcond[3]=(((sj5*x135))+(((-1.0)*x130*x133))+(((-1.0)*r11*x132*x134))+(((-1.0)*r12*sj4*x134))+(((-1.0)*cj4*r10*sj5*x134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x139=((0.9229390048494)*cj4);
IkReal x140=((0.9229390048494)*sj4);
IkReal x141=((0.0910115505610575)*cj5);
IkReal x142=((0.0910115505610575)*sj5);
if( IKabs((((r01*x142))+((r02*x139))+(((-1.0)*r00*x141))+(((-1.0)*cj5*r01*x140))+(((-1.0)*r00*sj5*x140))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*x141))+((cj5*r21*x140))+((r20*sj5*x140))+(((-1.0)*r21*x142))+(((-1.0)*r22*x139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x142))+((r02*x139))+(((-1.0)*r00*x141))+(((-1.0)*cj5*r01*x140))+(((-1.0)*r00*sj5*x140))+(((-2.35293564015143)*px))))+IKsqr(((((2.35293564015143)*pz))+((r20*x141))+((cj5*r21*x140))+((r20*sj5*x140))+(((-1.0)*r21*x142))+(((-1.0)*r22*x139))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x142))+((r02*x139))+(((-1.0)*r00*x141))+(((-1.0)*cj5*r01*x140))+(((-1.0)*r00*sj5*x140))+(((-2.35293564015143)*px))), ((((2.35293564015143)*pz))+((r20*x141))+((cj5*r21*x140))+((r20*sj5*x140))+(((-1.0)*r21*x142))+(((-1.0)*r22*x139))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x143=((0.39225)*sj3);
IkReal x144=(cj5*r00);
IkReal x145=((0.39225)*cj4);
IkReal x146=(r01*sj5);
IkReal x147=(r21*sj5);
IkReal x148=(cj5*r20);
IkReal x149=((0.39225)*sj4);
IkReal x150=(r20*sj5);
IkReal x151=(r00*sj5);
IkReal x152=(cj5*r01);
IkReal x153=(cj5*r21);
IkReal x154=((0.425001)*(IKsin(j1)));
IkReal x155=((0.03868)*x144);
IkReal x156=((0.03868)*x146);
IkReal x157=((0.03868)*x148);
IkReal x158=((0.03868)*x147);
IkReal x159=((0.425001)*(IKcos(j1)));
IkReal x160=(x157+pz);
IkReal x161=(x155+x154);
IkReal x162=(x159+x158);
evalcond[0]=(((x149*x150))+((x149*x153))+(((-1.0)*x162))+x160+(((-1.0)*r22*x145)));
evalcond[1]=((((-1.0)*x161))+x156+(((-1.0)*px))+((r02*x145))+(((-1.0)*x149*x152))+(((-1.0)*x149*x151)));
evalcond[2]=((((-1.0)*x156))+(((-1.0)*x143*x148))+x161+px+(((-1.0)*cj3*x145*x153))+(((-1.0)*cj3*x145*x150))+(((-1.0)*cj3*r22*x149))+((x143*x147)));
evalcond[3]=((((-1.0)*x143*x146))+(((-1.0)*x162))+((cj3*x145*x152))+((cj3*x145*x151))+x160+((cj3*r02*x149))+((x143*x144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x163=(sj1*sj4);
IkReal x164=(cj5*r01);
IkReal x165=(cj1*sj4);
IkReal x166=(cj4*r22);
IkReal x167=(cj4*r02);
IkReal x168=(r00*sj5);
IkReal x169=((1.0)*r20*sj5);
IkReal x170=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x164*x165))+(((-1.0)*x163*x170))+((sj1*x166))+(((-1.0)*x163*x169))+((cj1*x167))+(((-1.0)*x165*x168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x166))+(((-1.0)*x165*x169))+((x163*x164))+((x163*x168))+(((-1.0)*sj1*x167))+(((-1.0)*x165*x170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x164*x165))+(((-1.0)*x163*x170))+((sj1*x166))+(((-1.0)*x163*x169))+((cj1*x167))+(((-1.0)*x165*x168))))+IKsqr((((cj1*x166))+(((-1.0)*x165*x169))+((x163*x164))+((x163*x168))+(((-1.0)*sj1*x167))+(((-1.0)*x165*x170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x164*x165))+(((-1.0)*x163*x170))+((sj1*x166))+(((-1.0)*x163*x169))+((cj1*x167))+(((-1.0)*x165*x168))), (((cj1*x166))+(((-1.0)*x165*x169))+((x163*x164))+((x163*x168))+(((-1.0)*sj1*x167))+(((-1.0)*x165*x170))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x171=IKsin(j2);
IkReal x172=IKcos(j2);
IkReal x173=((1.0)*cj5);
IkReal x174=((1.0)*cj3);
IkReal x175=((1.0)*cj4);
IkReal x176=(cj3*cj4);
IkReal x177=(cj5*sj4);
IkReal x178=(r21*sj5);
IkReal x179=((1.0)*sj1);
IkReal x180=(r20*sj5);
IkReal x181=((0.03868)*cj5);
IkReal x182=((0.39225)*sj1);
IkReal x183=(r00*sj5);
IkReal x184=(r01*sj5);
IkReal x185=(cj1*x171);
IkReal x186=(cj1*x172);
IkReal x187=(x172*x179);
evalcond[0]=(((sj1*x171))+(((-1.0)*r22*x175))+x186+((r21*x177))+((sj4*x180)));
evalcond[1]=(((r01*x177))+(((-1.0)*r02*x175))+(((-1.0)*x187))+x185+((sj4*x183)));
evalcond[2]=((((0.39225)*x186))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x178))+((x171*x182))+(((-1.0)*r20*x181)));
evalcond[3]=((((-1.0)*r00*x181))+(((0.39225)*x185))+(((-1.0)*px))+(((0.03868)*x184))+(((-0.425001)*sj1))+(((-1.0)*x172*x182)));
evalcond[4]=((((-1.0)*r20*sj3*x173))+(((-1.0)*x187))+x185+(((-1.0)*cj4*x174*x180))+(((-1.0)*r21*x173*x176))+(((-1.0)*r22*sj4*x174))+((sj3*x178)));
evalcond[5]=(((sj3*x184))+(((-1.0)*r01*x173*x176))+(((-1.0)*x186))+(((-1.0)*r02*sj4*x174))+(((-1.0)*x171*x179))+(((-1.0)*cj4*x174*x183))+(((-1.0)*r00*sj3*x173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x188=((1.0)*sj4);
IkReal x189=((1.0)*r00);
CheckValue<IkReal> x190=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*cj5*r21*x188))+(((-1.0)*r20*sj5*x188)))),-1);
if(!x190.valid){
continue;
}
CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x189)))),IkReal(((((-1.0)*r02*x188))+(((-1.0)*cj4*cj5*r01))+(((-1.0)*cj4*sj5*x189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x191.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x190.value)))+(x191.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x192=IKsin(j3);
IkReal x193=IKcos(j3);
IkReal x194=(cj4*cj5);
IkReal x195=(cj5*r10);
IkReal x196=((1.0)*x193);
IkReal x197=(r11*x192);
IkReal x198=(sj4*x192);
IkReal x199=(sj5*x193);
IkReal x200=(cj4*sj5*x192);
evalcond[0]=((((-1.0)*cj5*r20*x196))+((r21*x199))+((r20*x200))+((r21*x192*x194))+((r22*x198)));
evalcond[1]=(((r01*x192*x194))+((r01*x199))+((r00*x200))+((r02*x198))+(((-1.0)*cj5*r00*x196)));
evalcond[2]=((1.0)+(((-1.0)*x195*x196))+((r10*x200))+((x194*x197))+((r12*x198))+((r11*x199)));
evalcond[3]=((((-1.0)*r12*sj4*x196))+(((-1.0)*cj4*r10*sj5*x196))+(((-1.0)*r11*x194*x196))+(((-1.0)*x192*x195))+((sj5*x197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x201=((0.9229390048494)*cj4);
IkReal x202=((0.9229390048494)*sj4);
IkReal x203=((0.0910115505610575)*cj5);
IkReal x204=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r01*x202))+((r01*x204))+(((-1.0)*r00*sj5*x202))+(((-1.0)*r00*x203))+(((-2.35293564015143)*px))+((r02*x201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x201))+(((2.35293564015143)*pz))+((r20*sj5*x202))+(((-1.0)*r21*x204))+((r20*x203))+((cj5*r21*x202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r01*x202))+((r01*x204))+(((-1.0)*r00*sj5*x202))+(((-1.0)*r00*x203))+(((-2.35293564015143)*px))+((r02*x201))))+IKsqr(((((-1.0)*r22*x201))+(((2.35293564015143)*pz))+((r20*sj5*x202))+(((-1.0)*r21*x204))+((r20*x203))+((cj5*r21*x202))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r01*x202))+((r01*x204))+(((-1.0)*r00*sj5*x202))+(((-1.0)*r00*x203))+(((-2.35293564015143)*px))+((r02*x201))), ((((-1.0)*r22*x201))+(((2.35293564015143)*pz))+((r20*sj5*x202))+(((-1.0)*r21*x204))+((r20*x203))+((cj5*r21*x202))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x205=((0.39225)*sj3);
IkReal x206=(cj5*r00);
IkReal x207=((0.39225)*cj4);
IkReal x208=(r01*sj5);
IkReal x209=(r21*sj5);
IkReal x210=(cj5*r20);
IkReal x211=((0.39225)*sj4);
IkReal x212=(r20*sj5);
IkReal x213=(r00*sj5);
IkReal x214=(cj5*r01);
IkReal x215=(cj5*r21);
IkReal x216=((0.425001)*(IKsin(j1)));
IkReal x217=((0.03868)*x206);
IkReal x218=((0.03868)*x208);
IkReal x219=((0.03868)*x210);
IkReal x220=((0.03868)*x209);
IkReal x221=((0.425001)*(IKcos(j1)));
IkReal x222=(x219+pz);
IkReal x223=(x216+x217);
IkReal x224=(x221+x220);
evalcond[0]=((((-1.0)*r22*x207))+((x211*x215))+((x211*x212))+x222+(((-1.0)*x224)));
evalcond[1]=((((-1.0)*px))+x218+(((-1.0)*x211*x213))+(((-1.0)*x211*x214))+(((-1.0)*x223))+((r02*x207)));
evalcond[2]=(((x205*x209))+(((-1.0)*cj3*r22*x211))+(((-1.0)*x205*x210))+x223+px+(((-1.0)*cj3*x207*x212))+(((-1.0)*cj3*x207*x215))+(((-1.0)*x218)));
evalcond[3]=(((x205*x206))+((cj3*x207*x214))+((cj3*x207*x213))+((cj3*r02*x211))+x222+(((-1.0)*x205*x208))+(((-1.0)*x224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x225=(sj1*sj4);
IkReal x226=(cj5*r01);
IkReal x227=(cj1*sj4);
IkReal x228=(cj4*r22);
IkReal x229=(cj4*r02);
IkReal x230=(r00*sj5);
IkReal x231=((1.0)*r20*sj5);
IkReal x232=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x225*x231))+(((-1.0)*x225*x232))+((cj1*x229))+(((-1.0)*x226*x227))+((sj1*x228))+(((-1.0)*x227*x230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x225*x226))+(((-1.0)*x227*x232))+(((-1.0)*x227*x231))+((cj1*x228))+(((-1.0)*sj1*x229))+((x225*x230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x225*x231))+(((-1.0)*x225*x232))+((cj1*x229))+(((-1.0)*x226*x227))+((sj1*x228))+(((-1.0)*x227*x230))))+IKsqr((((x225*x226))+(((-1.0)*x227*x232))+(((-1.0)*x227*x231))+((cj1*x228))+(((-1.0)*sj1*x229))+((x225*x230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x225*x231))+(((-1.0)*x225*x232))+((cj1*x229))+(((-1.0)*x226*x227))+((sj1*x228))+(((-1.0)*x227*x230))), (((x225*x226))+(((-1.0)*x227*x232))+(((-1.0)*x227*x231))+((cj1*x228))+(((-1.0)*sj1*x229))+((x225*x230))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x233=IKsin(j2);
IkReal x234=IKcos(j2);
IkReal x235=((1.0)*cj5);
IkReal x236=((1.0)*cj3);
IkReal x237=((1.0)*cj4);
IkReal x238=(cj3*cj4);
IkReal x239=(cj5*sj4);
IkReal x240=(r21*sj5);
IkReal x241=((1.0)*sj1);
IkReal x242=(r20*sj5);
IkReal x243=((0.03868)*cj5);
IkReal x244=((0.39225)*sj1);
IkReal x245=(r00*sj5);
IkReal x246=(r01*sj5);
IkReal x247=(cj1*x233);
IkReal x248=(cj1*x234);
IkReal x249=(x234*x241);
evalcond[0]=((((-1.0)*r22*x237))+((sj1*x233))+x248+((r21*x239))+((sj4*x242)));
evalcond[1]=((((-1.0)*r02*x237))+x247+((r01*x239))+(((-1.0)*x249))+((sj4*x245)));
evalcond[2]=(((x233*x244))+(((0.03868)*x240))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x248))+(((-1.0)*r20*x243)));
evalcond[3]=((((0.03868)*x246))+(((-1.0)*x234*x244))+(((-1.0)*px))+(((-1.0)*r00*x243))+(((-0.425001)*sj1))+(((0.39225)*x247)));
evalcond[4]=(((sj3*x240))+x247+(((-1.0)*r20*sj3*x235))+(((-1.0)*cj4*x236*x242))+(((-1.0)*r21*x235*x238))+(((-1.0)*x249))+(((-1.0)*r22*sj4*x236)));
evalcond[5]=((((-1.0)*x248))+((sj3*x246))+(((-1.0)*x233*x241))+(((-1.0)*r01*x235*x238))+(((-1.0)*cj4*x236*x245))+(((-1.0)*r00*sj3*x235))+(((-1.0)*r02*sj4*x236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x250=((1.0)*r20);
IkReal x251=((1.0)*cj4);
CheckValue<IkReal> x252 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x250))+((r21*sj5)))),IkReal(((((-1.0)*r22*sj4))+(((-1.0)*cj4*sj5*x250))+(((-1.0)*cj5*r21*x251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x252.valid){
continue;
}
CheckValue<IkReal> x253=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+(((-1.0)*r02*x251))+((cj5*r01*sj4)))),-1);
if(!x253.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x252.value)+(((1.5707963267949)*(x253.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x254=IKsin(j3);
IkReal x255=IKcos(j3);
IkReal x256=(cj4*cj5);
IkReal x257=(cj5*r10);
IkReal x258=((1.0)*x255);
IkReal x259=(r11*x254);
IkReal x260=(sj4*x254);
IkReal x261=(sj5*x255);
IkReal x262=(cj4*sj5*x254);
evalcond[0]=((((-1.0)*cj5*r20*x258))+((r21*x254*x256))+((r22*x260))+((r21*x261))+((r20*x262)));
evalcond[1]=(((r01*x254*x256))+((r02*x260))+((r00*x262))+(((-1.0)*cj5*r00*x258))+((r01*x261)));
evalcond[2]=((1.0)+(((-1.0)*x257*x258))+((x256*x259))+((r12*x260))+((r10*x262))+((r11*x261)));
evalcond[3]=((((-1.0)*r12*sj4*x258))+(((-1.0)*r11*x256*x258))+(((-1.0)*x254*x257))+((sj5*x259))+(((-1.0)*cj4*r10*sj5*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x263=((0.9229390048494)*cj4);
IkReal x264=((0.9229390048494)*sj4);
IkReal x265=((0.0910115505610575)*cj5);
IkReal x266=((0.0910115505610575)*sj5);
if( IKabs((((r02*x263))+(((-1.0)*r00*sj5*x264))+(((-1.0)*cj5*r01*x264))+(((-1.0)*r00*x265))+((r01*x266))+(((-2.35293564015143)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x264))+((cj5*r21*x264))+(((-1.0)*r22*x263))+(((-1.0)*r21*x266))+((r20*x265)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x263))+(((-1.0)*r00*sj5*x264))+(((-1.0)*cj5*r01*x264))+(((-1.0)*r00*x265))+((r01*x266))+(((-2.35293564015143)*px))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x264))+((cj5*r21*x264))+(((-1.0)*r22*x263))+(((-1.0)*r21*x266))+((r20*x265))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r02*x263))+(((-1.0)*r00*sj5*x264))+(((-1.0)*cj5*r01*x264))+(((-1.0)*r00*x265))+((r01*x266))+(((-2.35293564015143)*px))), ((((2.35293564015143)*pz))+((r20*sj5*x264))+((cj5*r21*x264))+(((-1.0)*r22*x263))+(((-1.0)*r21*x266))+((r20*x265))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x267=((0.39225)*sj3);
IkReal x268=(cj5*r00);
IkReal x269=((0.39225)*cj4);
IkReal x270=(r01*sj5);
IkReal x271=(r21*sj5);
IkReal x272=(cj5*r20);
IkReal x273=((0.39225)*sj4);
IkReal x274=(r20*sj5);
IkReal x275=(r00*sj5);
IkReal x276=(cj5*r01);
IkReal x277=(cj5*r21);
IkReal x278=((0.425001)*(IKsin(j1)));
IkReal x279=((0.03868)*x268);
IkReal x280=((0.03868)*x270);
IkReal x281=((0.03868)*x272);
IkReal x282=((0.03868)*x271);
IkReal x283=((0.425001)*(IKcos(j1)));
IkReal x284=(x281+pz);
IkReal x285=(x278+x279);
IkReal x286=(x283+x282);
evalcond[0]=(((x273*x277))+((x273*x274))+x284+(((-1.0)*x286))+(((-1.0)*r22*x269)));
evalcond[1]=((((-1.0)*x273*x276))+(((-1.0)*x273*x275))+((r02*x269))+(((-1.0)*px))+x280+(((-1.0)*x285)));
evalcond[2]=((((-1.0)*cj3*r22*x273))+x285+px+(((-1.0)*x280))+(((-1.0)*x267*x272))+(((-1.0)*cj3*x269*x277))+(((-1.0)*cj3*x269*x274))+((x267*x271)));
evalcond[3]=(((x267*x268))+((cj3*r02*x273))+x284+(((-1.0)*x286))+(((-1.0)*x267*x270))+((cj3*x269*x275))+((cj3*x269*x276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x287=(sj1*sj4);
IkReal x288=(cj5*r01);
IkReal x289=(cj1*sj4);
IkReal x290=(cj4*r22);
IkReal x291=(cj4*r02);
IkReal x292=(r00*sj5);
IkReal x293=((1.0)*r20*sj5);
IkReal x294=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x289*x292))+((cj1*x291))+((sj1*x290))+(((-1.0)*x287*x293))+(((-1.0)*x287*x294))+(((-1.0)*x288*x289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x289*x294))+(((-1.0)*x289*x293))+(((-1.0)*sj1*x291))+((cj1*x290))+((x287*x292))+((x287*x288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x289*x292))+((cj1*x291))+((sj1*x290))+(((-1.0)*x287*x293))+(((-1.0)*x287*x294))+(((-1.0)*x288*x289))))+IKsqr(((((-1.0)*x289*x294))+(((-1.0)*x289*x293))+(((-1.0)*sj1*x291))+((cj1*x290))+((x287*x292))+((x287*x288))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x289*x292))+((cj1*x291))+((sj1*x290))+(((-1.0)*x287*x293))+(((-1.0)*x287*x294))+(((-1.0)*x288*x289))), ((((-1.0)*x289*x294))+(((-1.0)*x289*x293))+(((-1.0)*sj1*x291))+((cj1*x290))+((x287*x292))+((x287*x288))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x295=IKsin(j2);
IkReal x296=IKcos(j2);
IkReal x297=((1.0)*cj5);
IkReal x298=((1.0)*cj3);
IkReal x299=((1.0)*cj4);
IkReal x300=(cj3*cj4);
IkReal x301=(cj5*sj4);
IkReal x302=(r21*sj5);
IkReal x303=((1.0)*sj1);
IkReal x304=(r20*sj5);
IkReal x305=((0.03868)*cj5);
IkReal x306=((0.39225)*sj1);
IkReal x307=(r00*sj5);
IkReal x308=(r01*sj5);
IkReal x309=(cj1*x295);
IkReal x310=(cj1*x296);
IkReal x311=(x296*x303);
evalcond[0]=(((r21*x301))+((sj1*x295))+x310+((sj4*x304))+(((-1.0)*r22*x299)));
evalcond[1]=((((-1.0)*r02*x299))+x309+(((-1.0)*x311))+((sj4*x307))+((r01*x301)));
evalcond[2]=((((-1.0)*r20*x305))+(((0.425001)*cj1))+(((-1.0)*pz))+((x295*x306))+(((0.03868)*x302))+(((0.39225)*x310)));
evalcond[3]=((((-1.0)*x296*x306))+(((-1.0)*r00*x305))+(((-1.0)*px))+(((-0.425001)*sj1))+(((0.03868)*x308))+(((0.39225)*x309)));
evalcond[4]=((((-1.0)*r22*sj4*x298))+((sj3*x302))+x309+(((-1.0)*cj4*x298*x304))+(((-1.0)*x311))+(((-1.0)*r20*sj3*x297))+(((-1.0)*r21*x297*x300)));
evalcond[5]=(((sj3*x308))+(((-1.0)*x295*x303))+(((-1.0)*cj4*x298*x307))+(((-1.0)*r01*x297*x300))+(((-1.0)*r00*sj3*x297))+(((-1.0)*x310))+(((-1.0)*r02*sj4*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x312=((1.0)*cj4);
IkReal x313=(((cj5*r21*sj4))+(((-1.0)*r22*x312))+((r20*sj4*sj5)));
j3eval[0]=x313;
j3eval[1]=IKsign(x313);
j3eval[2]=((IKabs(((((-1.0)*cj5*r01*x312))+(((-1.0)*r02*sj4))+(((-1.0)*r00*sj5*x312)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x314=((1.0)*sj5);
IkReal x315=((1.0)*cj5);
IkReal x316=((((-1.0)*r01*sj4*x315))+(((-1.0)*r00*sj4*x314))+((cj4*r02)));
j3eval[0]=x316;
j3eval[1]=IKsign(x316);
j3eval[2]=((IKabs(((((-1.0)*r22*sj4))+(((-1.0)*cj4*r20*x314))+(((-1.0)*cj4*r21*x315)))))+(IKabs(((((-1.0)*r20*x315))+((r21*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x317=cj4*cj4;
IkReal x318=cj5*cj5;
IkReal x319=r10*r10;
IkReal x320=r11*r11;
IkReal x321=r12*r12;
IkReal x322=(cj5*r11);
IkReal x323=((1.0)*sj5);
IkReal x324=((1.0)*x317);
IkReal x325=((2.0)*r10*sj5);
IkReal x326=(cj4*r12*sj4);
IkReal x327=(x318*x320);
IkReal x328=(x318*x319);
IkReal x329=(((x322*x325))+(((-1.0)*x325*x326))+(((-1.0)*x328))+(((-1.0)*x321))+(((-1.0)*x320))+x327+(((-1.0)*x319*x324))+((x317*x328))+((x317*x321))+(((-1.0)*x317*x322*x325))+(((-1.0)*x324*x327))+(((-2.0)*x322*x326)));
j3eval[0]=x329;
j3eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x323)))))+(IKabs(((((-1.0)*r12*sj4))+(((-1.0)*cj4*r10*x323))+(((-1.0)*cj4*x322))))));
j3eval[2]=IKsign(x329);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x330=cj4*cj4;
IkReal x331=cj5*cj5;
IkReal x332=r10*r10;
IkReal x333=r11*r11;
IkReal x334=r12*r12;
IkReal x335=(cj5*r11);
IkReal x336=((1.0)*sj5);
IkReal x337=((1.0)*x330);
IkReal x338=((2.0)*r10*sj5);
IkReal x339=(cj4*r12*sj4);
IkReal x340=(x331*x333);
IkReal x341=(x331*x332);
CheckValue<IkReal> x342 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x335))+(((-1.0)*cj4*r10*x336))+(((-1.0)*r12*sj4)))),IkReal((((cj5*r10))+(((-1.0)*r11*x336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x342.valid){
continue;
}
CheckValue<IkReal> x343=IKPowWithIntegerCheck(IKsign((((x335*x338))+(((-1.0)*x330*x335*x338))+((x330*x334))+(((-1.0)*x337*x340))+(((-1.0)*x338*x339))+(((-2.0)*x335*x339))+x340+(((-1.0)*x334))+(((-1.0)*x333))+(((-1.0)*x332*x337))+((x330*x341))+(((-1.0)*x341)))),-1);
if(!x343.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x342.value)+(((1.5707963267949)*(x343.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x344=IKsin(j3);
IkReal x345=IKcos(j3);
IkReal x346=(cj4*cj5);
IkReal x347=(cj5*r10);
IkReal x348=((1.0)*x345);
IkReal x349=(r11*x344);
IkReal x350=(sj4*x344);
IkReal x351=(sj5*x345);
IkReal x352=(cj4*sj5*x344);
evalcond[0]=(((r21*x351))+((r21*x344*x346))+(((-1.0)*cj5*r20*x348))+((r22*x350))+((r20*x352)));
evalcond[1]=(((r01*x351))+(((-1.0)*cj5*r00*x348))+((r00*x352))+((r01*x344*x346))+((r02*x350)));
evalcond[2]=((-1.0)+((r12*x350))+((r11*x351))+((r10*x352))+(((-1.0)*x347*x348))+((x346*x349)));
evalcond[3]=(((sj5*x349))+(((-1.0)*r12*sj4*x348))+(((-1.0)*r11*x346*x348))+(((-1.0)*cj4*r10*sj5*x348))+(((-1.0)*x344*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x353=((0.9229390048494)*cj4);
IkReal x354=((0.9229390048494)*sj4);
IkReal x355=((0.0910115505610575)*cj5);
IkReal x356=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((r00*sj5*x354))+((r00*x355))+(((-1.0)*r01*x356))+(((-1.0)*r02*x353))+((cj5*r01*x354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r22*x353))+((r20*sj5*x354))+((cj5*r21*x354))+(((-1.0)*r21*x356))+((r20*x355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((r00*sj5*x354))+((r00*x355))+(((-1.0)*r01*x356))+(((-1.0)*r02*x353))+((cj5*r01*x354))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r22*x353))+((r20*sj5*x354))+((cj5*r21*x354))+(((-1.0)*r21*x356))+((r20*x355))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((r00*sj5*x354))+((r00*x355))+(((-1.0)*r01*x356))+(((-1.0)*r02*x353))+((cj5*r01*x354))), ((((2.35293564015143)*pz))+(((-1.0)*r22*x353))+((r20*sj5*x354))+((cj5*r21*x354))+(((-1.0)*r21*x356))+((r20*x355))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x357=((0.39225)*sj3);
IkReal x358=(cj5*r00);
IkReal x359=((0.39225)*cj4);
IkReal x360=(r01*sj5);
IkReal x361=(r21*sj5);
IkReal x362=(cj5*r20);
IkReal x363=((0.39225)*sj4);
IkReal x364=(r20*sj5);
IkReal x365=(r00*sj5);
IkReal x366=(cj5*r01);
IkReal x367=(cj5*r21);
IkReal x368=((0.03868)*x358);
IkReal x369=((0.425001)*(IKsin(j1)));
IkReal x370=((0.03868)*x360);
IkReal x371=((0.03868)*x361);
IkReal x372=((0.425001)*(IKcos(j1)));
IkReal x373=((0.03868)*x362);
IkReal x374=(x368+px);
IkReal x375=(x372+x371);
IkReal x376=(x370+x369);
evalcond[0]=((((-1.0)*x376))+x374+(((-1.0)*r02*x359))+((x363*x366))+((x363*x365)));
evalcond[1]=((((-1.0)*r22*x359))+(((-1.0)*x375))+x373+pz+((x363*x367))+((x363*x364)));
evalcond[2]=((((-1.0)*x376))+x374+((cj3*x359*x367))+((cj3*x359*x364))+(((-1.0)*x357*x361))+((x357*x362))+((cj3*r22*x363)));
evalcond[3]=((((-1.0)*x373))+x375+(((-1.0)*pz))+((cj3*r02*x363))+((cj3*x359*x366))+((cj3*x359*x365))+(((-1.0)*x357*x360))+((x357*x358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x377=(cj4*sj1);
IkReal x378=(cj1*cj4);
IkReal x379=(cj1*cj5*sj4);
IkReal x380=(r00*sj4*sj5);
IkReal x381=((1.0)*r20*sj4*sj5);
IkReal x382=((1.0)*cj5*sj1*sj4);
if( IKabs(((((-1.0)*r02*x378))+((cj1*x380))+((r01*x379))+(((-1.0)*r21*x382))+((r22*x377))+(((-1.0)*sj1*x381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x377))+(((-1.0)*cj1*x381))+(((-1.0)*r21*x379))+((r22*x378))+(((-1.0)*r01*x382))+(((-1.0)*sj1*x380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x378))+((cj1*x380))+((r01*x379))+(((-1.0)*r21*x382))+((r22*x377))+(((-1.0)*sj1*x381))))+IKsqr((((r02*x377))+(((-1.0)*cj1*x381))+(((-1.0)*r21*x379))+((r22*x378))+(((-1.0)*r01*x382))+(((-1.0)*sj1*x380))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x378))+((cj1*x380))+((r01*x379))+(((-1.0)*r21*x382))+((r22*x377))+(((-1.0)*sj1*x381))), (((r02*x377))+(((-1.0)*cj1*x381))+(((-1.0)*r21*x379))+((r22*x378))+(((-1.0)*r01*x382))+(((-1.0)*sj1*x380))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x383=IKcos(j2);
IkReal x384=IKsin(j2);
IkReal x385=((1.0)*cj5);
IkReal x386=((1.0)*cj3);
IkReal x387=((1.0)*cj4);
IkReal x388=(cj3*cj4);
IkReal x389=(r21*sj5);
IkReal x390=(cj5*sj4);
IkReal x391=(r20*sj5);
IkReal x392=((0.03868)*cj5);
IkReal x393=(r00*sj5);
IkReal x394=(r01*sj5);
IkReal x395=(cj1*x383);
IkReal x396=(sj1*x384);
IkReal x397=(cj1*x384);
IkReal x398=(sj1*x383);
IkReal x399=(x395+x396);
evalcond[0]=((((-1.0)*r22*x387))+x399+((r21*x390))+((sj4*x391)));
evalcond[1]=((((-1.0)*x397))+((r01*x390))+x398+(((-1.0)*r02*x387))+((sj4*x393)));
evalcond[2]=((((0.39225)*x396))+(((0.39225)*x395))+(((-1.0)*r20*x392))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x389)));
evalcond[3]=((((-0.39225)*x397))+(((0.39225)*x398))+(((0.03868)*x394))+(((-1.0)*r00*x392))+(((-1.0)*px))+(((0.425001)*sj1)));
evalcond[4]=((((-1.0)*r01*x385*x388))+(((-1.0)*cj4*x386*x393))+x399+(((-1.0)*r02*sj4*x386))+((sj3*x394))+(((-1.0)*r00*sj3*x385)));
evalcond[5]=((((-1.0)*r22*sj4*x386))+(((-1.0)*x398))+(((-1.0)*r20*sj3*x385))+(((-1.0)*cj4*x386*x391))+x397+(((-1.0)*r21*x385*x388))+((sj3*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x400=((1.0)*sj5);
IkReal x401=((1.0)*cj5);
CheckValue<IkReal> x402 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x401)))),IkReal(((((-1.0)*cj4*r20*x400))+(((-1.0)*cj4*r21*x401))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x402.valid){
continue;
}
CheckValue<IkReal> x403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x400))+(((-1.0)*r01*sj4*x401))+((cj4*r02)))),-1);
if(!x403.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x402.value)+(((1.5707963267949)*(x403.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x404=IKsin(j3);
IkReal x405=IKcos(j3);
IkReal x406=(cj4*cj5);
IkReal x407=(cj5*r10);
IkReal x408=((1.0)*x405);
IkReal x409=(r11*x404);
IkReal x410=(sj4*x404);
IkReal x411=(sj5*x405);
IkReal x412=(cj4*sj5*x404);
evalcond[0]=((((-1.0)*cj5*r20*x408))+((r22*x410))+((r21*x404*x406))+((r21*x411))+((r20*x412)));
evalcond[1]=((((-1.0)*cj5*r00*x408))+((r01*x404*x406))+((r01*x411))+((r00*x412))+((r02*x410)));
evalcond[2]=((-1.0)+((r11*x411))+((r12*x410))+((x406*x409))+(((-1.0)*x407*x408))+((r10*x412)));
evalcond[3]=((((-1.0)*r12*sj4*x408))+((sj5*x409))+(((-1.0)*cj4*r10*sj5*x408))+(((-1.0)*r11*x406*x408))+(((-1.0)*x404*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x413=((0.9229390048494)*cj4);
IkReal x414=((0.9229390048494)*sj4);
IkReal x415=((0.0910115505610575)*cj5);
IkReal x416=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+(((-1.0)*r02*x413))+((cj5*r01*x414))+((r00*x415))+(((-1.0)*r01*x416))+((r00*sj5*x414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r21*x416))+((r20*sj5*x414))+((r20*x415))+(((-1.0)*r22*x413))+((cj5*r21*x414)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+(((-1.0)*r02*x413))+((cj5*r01*x414))+((r00*x415))+(((-1.0)*r01*x416))+((r00*sj5*x414))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r21*x416))+((r20*sj5*x414))+((r20*x415))+(((-1.0)*r22*x413))+((cj5*r21*x414))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+(((-1.0)*r02*x413))+((cj5*r01*x414))+((r00*x415))+(((-1.0)*r01*x416))+((r00*sj5*x414))), ((((2.35293564015143)*pz))+(((-1.0)*r21*x416))+((r20*sj5*x414))+((r20*x415))+(((-1.0)*r22*x413))+((cj5*r21*x414))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x417=((0.39225)*sj3);
IkReal x418=(cj5*r00);
IkReal x419=((0.39225)*cj4);
IkReal x420=(r01*sj5);
IkReal x421=(r21*sj5);
IkReal x422=(cj5*r20);
IkReal x423=((0.39225)*sj4);
IkReal x424=(r20*sj5);
IkReal x425=(r00*sj5);
IkReal x426=(cj5*r01);
IkReal x427=(cj5*r21);
IkReal x428=((0.03868)*x418);
IkReal x429=((0.425001)*(IKsin(j1)));
IkReal x430=((0.03868)*x420);
IkReal x431=((0.03868)*x421);
IkReal x432=((0.425001)*(IKcos(j1)));
IkReal x433=((0.03868)*x422);
IkReal x434=(x428+px);
IkReal x435=(x431+x432);
IkReal x436=(x429+x430);
evalcond[0]=((((-1.0)*x436))+(((-1.0)*r02*x419))+x434+((x423*x426))+((x423*x425)));
evalcond[1]=((((-1.0)*x435))+x433+pz+((x423*x427))+((x423*x424))+(((-1.0)*r22*x419)));
evalcond[2]=((((-1.0)*x436))+((cj3*r22*x423))+x434+(((-1.0)*x417*x421))+((cj3*x419*x424))+((cj3*x419*x427))+((x417*x422)));
evalcond[3]=((((-1.0)*x433))+((cj3*r02*x423))+(((-1.0)*pz))+((x417*x418))+x435+(((-1.0)*x417*x420))+((cj3*x419*x425))+((cj3*x419*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x437=(cj4*sj1);
IkReal x438=(cj1*cj4);
IkReal x439=(cj1*cj5*sj4);
IkReal x440=(r00*sj4*sj5);
IkReal x441=((1.0)*r20*sj4*sj5);
IkReal x442=((1.0)*cj5*sj1*sj4);
if( IKabs(((((-1.0)*r02*x438))+((cj1*x440))+((r22*x437))+(((-1.0)*r21*x442))+((r01*x439))+(((-1.0)*sj1*x441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x437))+(((-1.0)*cj1*x441))+(((-1.0)*sj1*x440))+((r22*x438))+(((-1.0)*r01*x442))+(((-1.0)*r21*x439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x438))+((cj1*x440))+((r22*x437))+(((-1.0)*r21*x442))+((r01*x439))+(((-1.0)*sj1*x441))))+IKsqr((((r02*x437))+(((-1.0)*cj1*x441))+(((-1.0)*sj1*x440))+((r22*x438))+(((-1.0)*r01*x442))+(((-1.0)*r21*x439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x438))+((cj1*x440))+((r22*x437))+(((-1.0)*r21*x442))+((r01*x439))+(((-1.0)*sj1*x441))), (((r02*x437))+(((-1.0)*cj1*x441))+(((-1.0)*sj1*x440))+((r22*x438))+(((-1.0)*r01*x442))+(((-1.0)*r21*x439))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x443=IKcos(j2);
IkReal x444=IKsin(j2);
IkReal x445=((1.0)*cj5);
IkReal x446=((1.0)*cj3);
IkReal x447=((1.0)*cj4);
IkReal x448=(cj3*cj4);
IkReal x449=(r21*sj5);
IkReal x450=(cj5*sj4);
IkReal x451=(r20*sj5);
IkReal x452=((0.03868)*cj5);
IkReal x453=(r00*sj5);
IkReal x454=(r01*sj5);
IkReal x455=(cj1*x443);
IkReal x456=(sj1*x444);
IkReal x457=(cj1*x444);
IkReal x458=(sj1*x443);
IkReal x459=(x456+x455);
evalcond[0]=(((sj4*x451))+x459+(((-1.0)*r22*x447))+((r21*x450)));
evalcond[1]=((((-1.0)*x457))+((sj4*x453))+x458+(((-1.0)*r02*x447))+((r01*x450)));
evalcond[2]=((((0.39225)*x456))+(((0.39225)*x455))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x449))+(((-1.0)*r20*x452)));
evalcond[3]=((((0.39225)*x458))+(((-1.0)*r00*x452))+(((-0.39225)*x457))+(((0.03868)*x454))+(((-1.0)*px))+(((0.425001)*sj1)));
evalcond[4]=(((sj3*x454))+(((-1.0)*r01*x445*x448))+(((-1.0)*r00*sj3*x445))+(((-1.0)*cj4*x446*x453))+x459+(((-1.0)*r02*sj4*x446)));
evalcond[5]=((((-1.0)*x458))+(((-1.0)*cj4*x446*x451))+(((-1.0)*r22*sj4*x446))+x457+((sj3*x449))+(((-1.0)*r20*sj3*x445))+(((-1.0)*r21*x445*x448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x460=((1.0)*cj4);
CheckValue<IkReal> x461 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*r00*sj5*x460))+(((-1.0)*cj5*r01*x460))+(((-1.0)*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x461.valid){
continue;
}
CheckValue<IkReal> x462=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*r22*x460))+((r20*sj4*sj5)))),-1);
if(!x462.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x461.value)+(((1.5707963267949)*(x462.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x463=IKsin(j3);
IkReal x464=IKcos(j3);
IkReal x465=(cj4*cj5);
IkReal x466=(cj5*r10);
IkReal x467=((1.0)*x464);
IkReal x468=(r11*x463);
IkReal x469=(sj4*x463);
IkReal x470=(sj5*x464);
IkReal x471=(cj4*sj5*x463);
evalcond[0]=(((r22*x469))+((r21*x470))+((r20*x471))+(((-1.0)*cj5*r20*x467))+((r21*x463*x465)));
evalcond[1]=((((-1.0)*cj5*r00*x467))+((r02*x469))+((r01*x463*x465))+((r00*x471))+((r01*x470)));
evalcond[2]=((-1.0)+(((-1.0)*x466*x467))+((r10*x471))+((x465*x468))+((r11*x470))+((r12*x469)));
evalcond[3]=((((-1.0)*cj4*r10*sj5*x467))+(((-1.0)*r11*x465*x467))+(((-1.0)*x463*x466))+(((-1.0)*r12*sj4*x467))+((sj5*x468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x472=((0.9229390048494)*cj4);
IkReal x473=((0.9229390048494)*sj4);
IkReal x474=((0.0910115505610575)*cj5);
IkReal x475=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+(((-1.0)*r01*x475))+((r00*sj5*x473))+((cj5*r01*x473))+((r00*x474))+(((-1.0)*r02*x472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x473))+(((-1.0)*r21*x475))+(((2.35293564015143)*pz))+((r20*x474))+((cj5*r21*x473))+(((-1.0)*r22*x472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+(((-1.0)*r01*x475))+((r00*sj5*x473))+((cj5*r01*x473))+((r00*x474))+(((-1.0)*r02*x472))))+IKsqr((((r20*sj5*x473))+(((-1.0)*r21*x475))+(((2.35293564015143)*pz))+((r20*x474))+((cj5*r21*x473))+(((-1.0)*r22*x472))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+(((-1.0)*r01*x475))+((r00*sj5*x473))+((cj5*r01*x473))+((r00*x474))+(((-1.0)*r02*x472))), (((r20*sj5*x473))+(((-1.0)*r21*x475))+(((2.35293564015143)*pz))+((r20*x474))+((cj5*r21*x473))+(((-1.0)*r22*x472))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x476=((0.39225)*sj3);
IkReal x477=(cj5*r00);
IkReal x478=((0.39225)*cj4);
IkReal x479=(r01*sj5);
IkReal x480=(r21*sj5);
IkReal x481=(cj5*r20);
IkReal x482=((0.39225)*sj4);
IkReal x483=(r20*sj5);
IkReal x484=(r00*sj5);
IkReal x485=(cj5*r01);
IkReal x486=(cj5*r21);
IkReal x487=((0.03868)*x477);
IkReal x488=((0.425001)*(IKsin(j1)));
IkReal x489=((0.03868)*x479);
IkReal x490=((0.03868)*x480);
IkReal x491=((0.425001)*(IKcos(j1)));
IkReal x492=((0.03868)*x481);
IkReal x493=(x487+px);
IkReal x494=(x490+x491);
IkReal x495=(x489+x488);
evalcond[0]=((((-1.0)*x495))+x493+((x482*x485))+((x482*x484))+(((-1.0)*r02*x478)));
evalcond[1]=((((-1.0)*x494))+(((-1.0)*r22*x478))+x492+pz+((x482*x486))+((x482*x483)));
evalcond[2]=((((-1.0)*x476*x480))+(((-1.0)*x495))+((x476*x481))+((cj3*x478*x483))+((cj3*x478*x486))+((cj3*r22*x482))+x493);
evalcond[3]=((((-1.0)*x492))+(((-1.0)*x476*x479))+((cj3*x478*x485))+((cj3*x478*x484))+(((-1.0)*pz))+x494+((x476*x477))+((cj3*r02*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x496=(cj4*sj1);
IkReal x497=(cj1*cj4);
IkReal x498=(cj1*cj5*sj4);
IkReal x499=(r00*sj4*sj5);
IkReal x500=((1.0)*r20*sj4*sj5);
IkReal x501=((1.0)*cj5*sj1*sj4);
if( IKabs(((((-1.0)*sj1*x500))+((r22*x496))+(((-1.0)*r02*x497))+((cj1*x499))+((r01*x498))+(((-1.0)*r21*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x496))+(((-1.0)*r21*x498))+((r22*x497))+(((-1.0)*r01*x501))+(((-1.0)*sj1*x499))+(((-1.0)*cj1*x500)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x500))+((r22*x496))+(((-1.0)*r02*x497))+((cj1*x499))+((r01*x498))+(((-1.0)*r21*x501))))+IKsqr((((r02*x496))+(((-1.0)*r21*x498))+((r22*x497))+(((-1.0)*r01*x501))+(((-1.0)*sj1*x499))+(((-1.0)*cj1*x500))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x500))+((r22*x496))+(((-1.0)*r02*x497))+((cj1*x499))+((r01*x498))+(((-1.0)*r21*x501))), (((r02*x496))+(((-1.0)*r21*x498))+((r22*x497))+(((-1.0)*r01*x501))+(((-1.0)*sj1*x499))+(((-1.0)*cj1*x500))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x502=IKcos(j2);
IkReal x503=IKsin(j2);
IkReal x504=((1.0)*cj5);
IkReal x505=((1.0)*cj3);
IkReal x506=((1.0)*cj4);
IkReal x507=(cj3*cj4);
IkReal x508=(r21*sj5);
IkReal x509=(cj5*sj4);
IkReal x510=(r20*sj5);
IkReal x511=((0.03868)*cj5);
IkReal x512=(r00*sj5);
IkReal x513=(r01*sj5);
IkReal x514=(cj1*x502);
IkReal x515=(sj1*x503);
IkReal x516=(cj1*x503);
IkReal x517=(sj1*x502);
IkReal x518=(x515+x514);
evalcond[0]=(((r21*x509))+((sj4*x510))+(((-1.0)*r22*x506))+x518);
evalcond[1]=(((sj4*x512))+(((-1.0)*x516))+((r01*x509))+x517+(((-1.0)*r02*x506)));
evalcond[2]=((((0.03868)*x508))+(((0.39225)*x515))+(((0.39225)*x514))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x511)));
evalcond[3]=((((-1.0)*r00*x511))+(((0.39225)*x517))+(((-1.0)*px))+(((-0.39225)*x516))+(((0.425001)*sj1))+(((0.03868)*x513)));
evalcond[4]=((((-1.0)*r01*x504*x507))+x518+((sj3*x513))+(((-1.0)*r00*sj3*x504))+(((-1.0)*r02*sj4*x505))+(((-1.0)*cj4*x505*x512)));
evalcond[5]=((((-1.0)*r22*sj4*x505))+((sj3*x508))+(((-1.0)*r21*x504*x507))+(((-1.0)*x517))+x516+(((-1.0)*r20*sj3*x504))+(((-1.0)*cj4*x505*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x519=((1.0)*r10);
IkReal x520=((1.0)*cj4);
IkReal x521=(((cj5*r21*sj4))+((r20*sj4*sj5))+(((-1.0)*r22*x520)));
j3eval[0]=x521;
j3eval[1]=IKsign(x521);
j3eval[2]=((IKabs((((r11*sj5))+(((-1.0)*cj5*x519)))))+(IKabs(((((-1.0)*cj4*sj5*x519))+(((-1.0)*cj5*r11*x520))+(((-1.0)*r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x522=((1.0)*sj5);
IkReal x523=((1.0)*cj5);
IkReal x524=((((-1.0)*r11*sj4*x523))+(((-1.0)*r10*sj4*x522))+((cj4*r12)));
j3eval[0]=x524;
j3eval[1]=IKsign(x524);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*r20*x523)))))+(IKabs(((((-1.0)*r22*sj4))+(((-1.0)*cj4*r21*x523))+(((-1.0)*cj4*r20*x522))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x525=cj4*cj4;
IkReal x526=r00*r00;
IkReal x527=cj5*cj5;
IkReal x528=r01*r01;
IkReal x529=r02*r02;
IkReal x530=(r00*sj5);
IkReal x531=((1.0)*r01);
IkReal x532=((2.0)*cj5*r01);
IkReal x533=(cj4*r02*sj4);
IkReal x534=((1.0)*x527);
IkReal x535=(x525*x526);
IkReal x536=((((-1.0)*x534*x535))+((x525*x530*x532))+(((-1.0)*x530*x532))+((x526*x527))+((x525*x527*x528))+(((-1.0)*x528*x534))+(((-1.0)*x525*x529))+x535+x528+x529+((x532*x533))+(((2.0)*x530*x533)));
j3eval[0]=x536;
j3eval[1]=IKsign(x536);
j3eval[2]=((IKabs(((((-1.0)*r02*sj4))+(((-1.0)*cj4*cj5*x531))+(((-1.0)*cj4*x530)))))+(IKabs(((((-1.0)*sj5*x531))+((cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x537=cj4*cj4;
IkReal x538=r00*r00;
IkReal x539=cj5*cj5;
IkReal x540=r01*r01;
IkReal x541=r02*r02;
IkReal x542=(r00*sj5);
IkReal x543=(r02*sj4);
IkReal x544=((1.0)*r01);
IkReal x545=((2.0)*cj5*r01);
IkReal x546=(x537*x539);
CheckValue<IkReal> x547=IKPowWithIntegerCheck(IKsign(((((-1.0)*x542*x545))+(((-1.0)*x538*x546))+((cj4*x543*x545))+(((2.0)*cj4*x542*x543))+(((-1.0)*x539*x540))+((x540*x546))+((x537*x542*x545))+((x537*x538))+x540+x541+((x538*x539))+(((-1.0)*x537*x541)))),-1);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(((((-1.0)*x543))+(((-1.0)*cj4*cj5*x544))+(((-1.0)*cj4*x542)))),IkReal(((((-1.0)*sj5*x544))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x547.value)))+(x548.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x549=IKsin(j3);
IkReal x550=IKcos(j3);
IkReal x551=(r02*sj4);
IkReal x552=(cj4*cj5);
IkReal x553=(cj5*r00);
IkReal x554=((1.0)*x550);
IkReal x555=(r01*x549);
IkReal x556=(sj5*x550);
IkReal x557=(sj4*x549);
IkReal x558=(cj4*sj5*x549);
evalcond[0]=(((r21*x549*x552))+((r20*x558))+((r22*x557))+(((-1.0)*cj5*r20*x554))+((r21*x556)));
evalcond[1]=(((r11*x549*x552))+((r12*x557))+((r10*x558))+((r11*x556))+(((-1.0)*cj5*r10*x554)));
evalcond[2]=((1.0)+(((-1.0)*x553*x554))+((x549*x551))+((r01*x556))+((r00*x558))+((x552*x555)));
evalcond[3]=(((sj5*x555))+(((-1.0)*x551*x554))+(((-1.0)*cj4*r00*sj5*x554))+(((-1.0)*x549*x553))+(((-1.0)*r01*x552*x554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x559=((0.9229390048494)*sj4);
IkReal x560=((0.0910115505610575)*cj5);
IkReal x561=((0.9229390048494)*cj4);
IkReal x562=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+((r10*sj5*x559))+(((-1.0)*r11*x562))+((cj5*r11*x559))+(((-1.0)*r12*x561))+((r10*x560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((cj5*r21*x559))+(((-1.0)*r22*x561))+((r20*x560))+((r20*sj5*x559))+(((-1.0)*r21*x562)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+((r10*sj5*x559))+(((-1.0)*r11*x562))+((cj5*r11*x559))+(((-1.0)*r12*x561))+((r10*x560))))+IKsqr(((((2.35293564015143)*pz))+((cj5*r21*x559))+(((-1.0)*r22*x561))+((r20*x560))+((r20*sj5*x559))+(((-1.0)*r21*x562))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+((r10*sj5*x559))+(((-1.0)*r11*x562))+((cj5*r11*x559))+(((-1.0)*r12*x561))+((r10*x560))), ((((2.35293564015143)*pz))+((cj5*r21*x559))+(((-1.0)*r22*x561))+((r20*x560))+((r20*sj5*x559))+(((-1.0)*r21*x562))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x563=((0.39225)*r10);
IkReal x564=(sj4*sj5);
IkReal x565=(cj5*sj3);
IkReal x566=((0.39225)*r11);
IkReal x567=(sj3*sj5);
IkReal x568=(cj3*cj4);
IkReal x569=((0.03868)*sj5);
IkReal x570=((0.39225)*r21);
IkReal x571=((0.03868)*cj5);
IkReal x572=((0.39225)*cj4);
IkReal x573=((0.39225)*r20);
IkReal x574=(cj5*sj4);
IkReal x575=(r10*x571);
IkReal x576=(r11*x569);
IkReal x577=((0.425001)*(IKsin(j1)));
IkReal x578=(r21*x569);
IkReal x579=((0.425001)*(IKcos(j1)));
IkReal x580=(r20*x571);
IkReal x581=((0.39225)*cj3*sj4);
IkReal x582=(py+x575);
IkReal x583=(x577+x576);
IkReal x584=(x579+x578);
evalcond[0]=((((-1.0)*r12*x572))+((x563*x564))+x582+((x566*x574))+(((-1.0)*x583)));
evalcond[1]=(pz+((x564*x573))+x580+(((-1.0)*r22*x572))+(((-1.0)*x584))+((x570*x574)));
evalcond[2]=(((sj5*x568*x573))+((cj5*x568*x570))+((x565*x573))+x582+(((-1.0)*x567*x570))+((r22*x581))+(((-1.0)*x583)));
evalcond[3]=((((-1.0)*x566*x567))+((r12*x581))+((sj5*x563*x568))+((x563*x565))+(((-1.0)*pz))+x584+(((-1.0)*x580))+((cj5*x566*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x585=(cj4*r12);
IkReal x586=(cj4*r22);
IkReal x587=(cj5*sj4);
IkReal x588=((1.0)*r21);
IkReal x589=((1.0)*sj1);
IkReal x590=(r10*sj4*sj5);
IkReal x591=((1.0)*r20*sj4*sj5);
if( IKabs((((sj1*x586))+((cj1*x590))+(((-1.0)*r20*sj4*sj5*x589))+((cj1*r11*x587))+(((-1.0)*cj1*x585))+(((-1.0)*sj1*x587*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x589*x590))+((sj1*x585))+(((-1.0)*r11*x587*x589))+(((-1.0)*cj1*x591))+(((-1.0)*cj1*x587*x588))+((cj1*x586)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x586))+((cj1*x590))+(((-1.0)*r20*sj4*sj5*x589))+((cj1*r11*x587))+(((-1.0)*cj1*x585))+(((-1.0)*sj1*x587*x588))))+IKsqr(((((-1.0)*x589*x590))+((sj1*x585))+(((-1.0)*r11*x587*x589))+(((-1.0)*cj1*x591))+(((-1.0)*cj1*x587*x588))+((cj1*x586))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x586))+((cj1*x590))+(((-1.0)*r20*sj4*sj5*x589))+((cj1*r11*x587))+(((-1.0)*cj1*x585))+(((-1.0)*sj1*x587*x588))), ((((-1.0)*x589*x590))+((sj1*x585))+(((-1.0)*r11*x587*x589))+(((-1.0)*cj1*x591))+(((-1.0)*cj1*x587*x588))+((cj1*x586))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x592=IKcos(j2);
IkReal x593=IKsin(j2);
IkReal x594=((1.0)*cj4);
IkReal x595=(sj3*sj5);
IkReal x596=(cj5*r21);
IkReal x597=((0.03868)*sj5);
IkReal x598=(sj4*sj5);
IkReal x599=(cj5*r11);
IkReal x600=((0.03868)*cj5);
IkReal x601=(cj3*sj5);
IkReal x602=(cj1*x592);
IkReal x603=(sj1*x593);
IkReal x604=((1.0)*cj5*sj3);
IkReal x605=((1.0)*cj3*sj4);
IkReal x606=(cj1*x593);
IkReal x607=(sj1*x592);
IkReal x608=(x603+x602);
evalcond[0]=(((sj4*x596))+(((-1.0)*r22*x594))+x608+((r20*x598)));
evalcond[1]=((((-1.0)*r12*x594))+(((-1.0)*x606))+((sj4*x599))+x607+((r10*x598)));
evalcond[2]=((((-1.0)*r20*x600))+(((0.39225)*x603))+(((0.39225)*x602))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x597)));
evalcond[3]=((((-1.0)*r10*x600))+(((0.39225)*x607))+(((-1.0)*py))+(((0.425001)*sj1))+((r11*x597))+(((-0.39225)*x606)));
evalcond[4]=((((-1.0)*r10*x594*x601))+(((-1.0)*r10*x604))+((r11*x595))+(((-1.0)*r12*x605))+x608+(((-1.0)*cj3*x594*x599)));
evalcond[5]=((((-1.0)*r20*x604))+(((-1.0)*r20*x594*x601))+(((-1.0)*r22*x605))+(((-1.0)*x607))+((r21*x595))+x606+(((-1.0)*cj3*x594*x596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x609=((1.0)*sj5);
IkReal x610=((1.0)*cj5);
CheckValue<IkReal> x611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x609))+((cj4*r12))+(((-1.0)*r11*sj4*x610)))),-1);
if(!x611.valid){
continue;
}
CheckValue<IkReal> x612 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x610))+((r21*sj5)))),IkReal(((((-1.0)*cj4*r21*x610))+(((-1.0)*cj4*r20*x609))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x612.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x611.value)))+(x612.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x613=IKsin(j3);
IkReal x614=IKcos(j3);
IkReal x615=(r02*sj4);
IkReal x616=(cj4*cj5);
IkReal x617=(cj5*r00);
IkReal x618=((1.0)*x614);
IkReal x619=(r01*x613);
IkReal x620=(sj5*x614);
IkReal x621=(sj4*x613);
IkReal x622=(cj4*sj5*x613);
evalcond[0]=(((r21*x620))+((r22*x621))+((r20*x622))+(((-1.0)*cj5*r20*x618))+((r21*x613*x616)));
evalcond[1]=(((r10*x622))+((r12*x621))+(((-1.0)*cj5*r10*x618))+((r11*x613*x616))+((r11*x620)));
evalcond[2]=((1.0)+((x616*x619))+(((-1.0)*x617*x618))+((r01*x620))+((x613*x615))+((r00*x622)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x618))+(((-1.0)*x613*x617))+(((-1.0)*x615*x618))+(((-1.0)*r01*x616*x618))+((sj5*x619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x623=((0.9229390048494)*sj4);
IkReal x624=((0.0910115505610575)*cj5);
IkReal x625=((0.9229390048494)*cj4);
IkReal x626=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*r11*x626))+((r10*sj5*x623))+(((-1.0)*r12*x625))+((cj5*r11*x623))+((r10*x624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((cj5*r21*x623))+(((-1.0)*r21*x626))+((r20*x624))+(((-1.0)*r22*x625))+((r20*sj5*x623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*r11*x626))+((r10*sj5*x623))+(((-1.0)*r12*x625))+((cj5*r11*x623))+((r10*x624))))+IKsqr(((((2.35293564015143)*pz))+((cj5*r21*x623))+(((-1.0)*r21*x626))+((r20*x624))+(((-1.0)*r22*x625))+((r20*sj5*x623))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*r11*x626))+((r10*sj5*x623))+(((-1.0)*r12*x625))+((cj5*r11*x623))+((r10*x624))), ((((2.35293564015143)*pz))+((cj5*r21*x623))+(((-1.0)*r21*x626))+((r20*x624))+(((-1.0)*r22*x625))+((r20*sj5*x623))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x627=((0.39225)*r10);
IkReal x628=(sj4*sj5);
IkReal x629=(cj5*sj3);
IkReal x630=((0.39225)*r11);
IkReal x631=(sj3*sj5);
IkReal x632=(cj3*cj4);
IkReal x633=((0.03868)*sj5);
IkReal x634=((0.39225)*r21);
IkReal x635=((0.03868)*cj5);
IkReal x636=((0.39225)*cj4);
IkReal x637=((0.39225)*r20);
IkReal x638=(cj5*sj4);
IkReal x639=(r10*x635);
IkReal x640=(r11*x633);
IkReal x641=((0.425001)*(IKsin(j1)));
IkReal x642=(r21*x633);
IkReal x643=((0.425001)*(IKcos(j1)));
IkReal x644=(r20*x635);
IkReal x645=((0.39225)*cj3*sj4);
IkReal x646=(py+x639);
IkReal x647=(x641+x640);
IkReal x648=(x643+x642);
evalcond[0]=((((-1.0)*r12*x636))+(((-1.0)*x647))+x646+((x630*x638))+((x627*x628)));
evalcond[1]=(((x634*x638))+((x628*x637))+(((-1.0)*x648))+pz+x644+(((-1.0)*r22*x636)));
evalcond[2]=((((-1.0)*x631*x634))+((x629*x637))+(((-1.0)*x647))+((cj5*x632*x634))+((sj5*x632*x637))+x646+((r22*x645)));
evalcond[3]=((((-1.0)*x630*x631))+((cj5*x630*x632))+(((-1.0)*pz))+(((-1.0)*x644))+((sj5*x627*x632))+((r12*x645))+x648+((x627*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x649=(cj4*r12);
IkReal x650=(cj4*r22);
IkReal x651=(cj5*sj4);
IkReal x652=((1.0)*r21);
IkReal x653=((1.0)*sj1);
IkReal x654=(r10*sj4*sj5);
IkReal x655=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*r20*sj4*sj5*x653))+(((-1.0)*cj1*x649))+((sj1*x650))+((cj1*x654))+(((-1.0)*sj1*x651*x652))+((cj1*r11*x651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x655))+((sj1*x649))+(((-1.0)*r11*x651*x653))+((cj1*x650))+(((-1.0)*cj1*x651*x652))+(((-1.0)*x653*x654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj4*sj5*x653))+(((-1.0)*cj1*x649))+((sj1*x650))+((cj1*x654))+(((-1.0)*sj1*x651*x652))+((cj1*r11*x651))))+IKsqr(((((-1.0)*cj1*x655))+((sj1*x649))+(((-1.0)*r11*x651*x653))+((cj1*x650))+(((-1.0)*cj1*x651*x652))+(((-1.0)*x653*x654))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*sj4*sj5*x653))+(((-1.0)*cj1*x649))+((sj1*x650))+((cj1*x654))+(((-1.0)*sj1*x651*x652))+((cj1*r11*x651))), ((((-1.0)*cj1*x655))+((sj1*x649))+(((-1.0)*r11*x651*x653))+((cj1*x650))+(((-1.0)*cj1*x651*x652))+(((-1.0)*x653*x654))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x656=IKcos(j2);
IkReal x657=IKsin(j2);
IkReal x658=((1.0)*cj4);
IkReal x659=(sj3*sj5);
IkReal x660=(cj5*r21);
IkReal x661=((0.03868)*sj5);
IkReal x662=(sj4*sj5);
IkReal x663=(cj5*r11);
IkReal x664=((0.03868)*cj5);
IkReal x665=(cj3*sj5);
IkReal x666=(cj1*x656);
IkReal x667=(sj1*x657);
IkReal x668=((1.0)*cj5*sj3);
IkReal x669=((1.0)*cj3*sj4);
IkReal x670=(cj1*x657);
IkReal x671=(sj1*x656);
IkReal x672=(x667+x666);
evalcond[0]=(((r20*x662))+((sj4*x660))+(((-1.0)*r22*x658))+x672);
evalcond[1]=((((-1.0)*r12*x658))+((sj4*x663))+x671+(((-1.0)*x670))+((r10*x662)));
evalcond[2]=((((0.39225)*x667))+(((0.39225)*x666))+(((-1.0)*r20*x664))+(((0.425001)*cj1))+(((-1.0)*pz))+((r21*x661)));
evalcond[3]=((((-0.39225)*x670))+(((-1.0)*r10*x664))+((r11*x661))+(((-1.0)*py))+(((0.425001)*sj1))+(((0.39225)*x671)));
evalcond[4]=((((-1.0)*r10*x668))+(((-1.0)*cj3*x658*x663))+(((-1.0)*r10*x658*x665))+(((-1.0)*r12*x669))+((r11*x659))+x672);
evalcond[5]=((((-1.0)*r20*x668))+(((-1.0)*r22*x669))+(((-1.0)*cj3*x658*x660))+x670+(((-1.0)*x671))+(((-1.0)*r20*x658*x665))+((r21*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x673=((1.0)*cj5);
IkReal x674=((1.0)*cj4);
CheckValue<IkReal> x675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x674))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x675.valid){
continue;
}
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x673)))),IkReal(((((-1.0)*r10*sj5*x674))+(((-1.0)*cj4*r11*x673))+(((-1.0)*r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x675.value)))+(x676.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x677=IKsin(j3);
IkReal x678=IKcos(j3);
IkReal x679=(r02*sj4);
IkReal x680=(cj4*cj5);
IkReal x681=(cj5*r00);
IkReal x682=((1.0)*x678);
IkReal x683=(r01*x677);
IkReal x684=(sj5*x678);
IkReal x685=(sj4*x677);
IkReal x686=(cj4*sj5*x677);
evalcond[0]=(((r21*x684))+((r22*x685))+(((-1.0)*cj5*r20*x682))+((r21*x677*x680))+((r20*x686)));
evalcond[1]=(((r11*x677*x680))+((r10*x686))+(((-1.0)*cj5*r10*x682))+((r11*x684))+((r12*x685)));
evalcond[2]=((1.0)+(((-1.0)*x681*x682))+((x677*x679))+((x680*x683))+((r01*x684))+((r00*x686)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x682))+((sj5*x683))+(((-1.0)*x679*x682))+(((-1.0)*x677*x681))+(((-1.0)*r01*x680*x682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x687=((0.9229390048494)*sj4);
IkReal x688=((0.0910115505610575)*cj5);
IkReal x689=((0.9229390048494)*cj4);
IkReal x690=((0.0910115505610575)*sj5);
if( IKabs((((r10*sj5*x687))+(((2.35293564015143)*py))+(((-1.0)*r12*x689))+((cj5*r11*x687))+(((-1.0)*r11*x690))+((r10*x688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((cj5*r21*x687))+((r20*x688))+(((-1.0)*r22*x689))+((r20*sj5*x687))+(((-1.0)*r21*x690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj5*x687))+(((2.35293564015143)*py))+(((-1.0)*r12*x689))+((cj5*r11*x687))+(((-1.0)*r11*x690))+((r10*x688))))+IKsqr(((((2.35293564015143)*pz))+((cj5*r21*x687))+((r20*x688))+(((-1.0)*r22*x689))+((r20*sj5*x687))+(((-1.0)*r21*x690))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*sj5*x687))+(((2.35293564015143)*py))+(((-1.0)*r12*x689))+((cj5*r11*x687))+(((-1.0)*r11*x690))+((r10*x688))), ((((2.35293564015143)*pz))+((cj5*r21*x687))+((r20*x688))+(((-1.0)*r22*x689))+((r20*sj5*x687))+(((-1.0)*r21*x690))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x691=((0.39225)*r10);
IkReal x692=(sj4*sj5);
IkReal x693=(cj5*sj3);
IkReal x694=((0.39225)*r11);
IkReal x695=(sj3*sj5);
IkReal x696=(cj3*cj4);
IkReal x697=((0.03868)*sj5);
IkReal x698=((0.39225)*r21);
IkReal x699=((0.03868)*cj5);
IkReal x700=((0.39225)*cj4);
IkReal x701=((0.39225)*r20);
IkReal x702=(cj5*sj4);
IkReal x703=(r10*x699);
IkReal x704=(r11*x697);
IkReal x705=((0.425001)*(IKsin(j1)));
IkReal x706=(r21*x697);
IkReal x707=((0.425001)*(IKcos(j1)));
IkReal x708=(r20*x699);
IkReal x709=((0.39225)*cj3*sj4);
IkReal x710=(py+x703);
IkReal x711=(x704+x705);
IkReal x712=(x706+x707);
evalcond[0]=((((-1.0)*r12*x700))+((x691*x692))+((x694*x702))+(((-1.0)*x711))+x710);
evalcond[1]=(((x692*x701))+(((-1.0)*x712))+pz+((x698*x702))+x708+(((-1.0)*r22*x700)));
evalcond[2]=(((r22*x709))+((cj5*x696*x698))+((sj5*x696*x701))+(((-1.0)*x711))+(((-1.0)*x695*x698))+x710+((x693*x701)));
evalcond[3]=(((cj5*x694*x696))+((sj5*x691*x696))+((x691*x693))+(((-1.0)*pz))+(((-1.0)*x708))+(((-1.0)*x694*x695))+x712+((r12*x709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x713=(cj4*r12);
IkReal x714=(cj4*r22);
IkReal x715=(cj5*sj4);
IkReal x716=((1.0)*r21);
IkReal x717=((1.0)*sj1);
IkReal x718=(r10*sj4*sj5);
IkReal x719=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*cj1*x713))+((cj1*r11*x715))+((sj1*x714))+(((-1.0)*sj1*x715*x716))+((cj1*x718))+(((-1.0)*r20*sj4*sj5*x717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x715*x717))+(((-1.0)*x717*x718))+(((-1.0)*cj1*x719))+((sj1*x713))+(((-1.0)*cj1*x715*x716))+((cj1*x714)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x713))+((cj1*r11*x715))+((sj1*x714))+(((-1.0)*sj1*x715*x716))+((cj1*x718))+(((-1.0)*r20*sj4*sj5*x717))))+IKsqr(((((-1.0)*r11*x715*x717))+(((-1.0)*x717*x718))+(((-1.0)*cj1*x719))+((sj1*x713))+(((-1.0)*cj1*x715*x716))+((cj1*x714))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x713))+((cj1*r11*x715))+((sj1*x714))+(((-1.0)*sj1*x715*x716))+((cj1*x718))+(((-1.0)*r20*sj4*sj5*x717))), ((((-1.0)*r11*x715*x717))+(((-1.0)*x717*x718))+(((-1.0)*cj1*x719))+((sj1*x713))+(((-1.0)*cj1*x715*x716))+((cj1*x714))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x720=IKcos(j2);
IkReal x721=IKsin(j2);
IkReal x722=((1.0)*cj4);
IkReal x723=(sj3*sj5);
IkReal x724=(cj5*r21);
IkReal x725=((0.03868)*sj5);
IkReal x726=(sj4*sj5);
IkReal x727=(cj5*r11);
IkReal x728=((0.03868)*cj5);
IkReal x729=(cj3*sj5);
IkReal x730=(cj1*x720);
IkReal x731=(sj1*x721);
IkReal x732=((1.0)*cj5*sj3);
IkReal x733=((1.0)*cj3*sj4);
IkReal x734=(cj1*x721);
IkReal x735=(sj1*x720);
IkReal x736=(x731+x730);
evalcond[0]=(((r20*x726))+x736+(((-1.0)*r22*x722))+((sj4*x724)));
evalcond[1]=((((-1.0)*r12*x722))+((r10*x726))+(((-1.0)*x734))+x735+((sj4*x727)));
evalcond[2]=((((0.39225)*x731))+(((0.39225)*x730))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x728))+((r21*x725)));
evalcond[3]=((((0.39225)*x735))+(((-0.39225)*x734))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x728))+((r11*x725)));
evalcond[4]=((((-1.0)*r10*x722*x729))+(((-1.0)*cj3*x722*x727))+x736+(((-1.0)*r10*x732))+((r11*x723))+(((-1.0)*r12*x733)));
evalcond[5]=((((-1.0)*r20*x722*x729))+(((-1.0)*x735))+(((-1.0)*cj3*x722*x724))+(((-1.0)*r20*x732))+x734+((r21*x723))+(((-1.0)*r22*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x737=((1.0)*r20);
IkReal x738=((1.0)*cj4);
IkReal x739=(((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x738)));
j3eval[0]=x739;
j3eval[1]=IKsign(x739);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x737))+(((-1.0)*cj5*r21*x738))+(((-1.0)*r22*sj4)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x737))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x740=((1.0)*cj5);
IkReal x741=((1.0)*sj4);
IkReal x742=(((cj4*r22))+(((-1.0)*r21*sj4*x740))+(((-1.0)*r20*sj5*x741)));
j3eval[0]=x742;
j3eval[1]=IKsign(x742);
j3eval[2]=((IKabs(((((-1.0)*r12*x741))+(((-1.0)*cj4*r10*sj5))+(((-1.0)*cj4*r11*x740)))))+(IKabs((((r11*sj5))+(((-1.0)*r10*x740))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x743=cj5*cj5;
IkReal x744=cj4*cj4;
IkReal x745=r00*r00;
IkReal x746=r01*r01;
IkReal x747=r02*r02;
IkReal x748=(r02*sj4);
IkReal x749=(r00*sj5);
IkReal x750=((1.0)*r01);
IkReal x751=((2.0)*cj5*r01);
IkReal x752=((1.0)*x744);
IkReal x753=(x743*x745);
IkReal x754=(x743*x746);
IkReal x755=((((-1.0)*x745*x752))+((x744*x747))+((x744*x753))+(((-2.0)*cj4*x748*x749))+(((-1.0)*cj4*x748*x751))+(((-1.0)*x753))+(((-1.0)*x747))+(((-1.0)*x746))+(((-1.0)*x752*x754))+(((-1.0)*x744*x749*x751))+x754+((x749*x751)));
j3eval[0]=x755;
j3eval[1]=IKsign(x755);
j3eval[2]=((IKabs(((((-1.0)*cj4*x749))+(((-1.0)*x748))+(((-1.0)*cj4*cj5*x750)))))+(IKabs(((((-1.0)*sj5*x750))+((cj5*r00))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x756=cj5*cj5;
IkReal x757=cj4*cj4;
IkReal x758=r00*r00;
IkReal x759=r01*r01;
IkReal x760=r02*r02;
IkReal x761=(r02*sj4);
IkReal x762=(r00*sj5);
IkReal x763=((1.0)*r01);
IkReal x764=((2.0)*cj5*r01);
IkReal x765=((1.0)*x757);
IkReal x766=(x756*x758);
IkReal x767=(x756*x759);
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*cj5*x763))+(((-1.0)*x761))+(((-1.0)*cj4*x762)))),IkReal(((((-1.0)*sj5*x763))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
CheckValue<IkReal> x769=IKPowWithIntegerCheck(IKsign((((x757*x766))+((x757*x760))+(((-1.0)*x758*x765))+(((-1.0)*x765*x767))+(((-1.0)*cj4*x761*x764))+(((-1.0)*x757*x762*x764))+((x762*x764))+(((-1.0)*x760))+(((-1.0)*x766))+(((-1.0)*x759))+x767+(((-2.0)*cj4*x761*x762)))),-1);
if(!x769.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x768.value)+(((1.5707963267949)*(x769.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x770=IKsin(j3);
IkReal x771=IKcos(j3);
IkReal x772=(r02*sj4);
IkReal x773=(cj4*cj5);
IkReal x774=(cj5*r00);
IkReal x775=((1.0)*x771);
IkReal x776=(r01*x770);
IkReal x777=(sj5*x771);
IkReal x778=(sj4*x770);
IkReal x779=(cj4*sj5*x770);
evalcond[0]=(((r22*x778))+((r21*x777))+((r20*x779))+((r21*x770*x773))+(((-1.0)*cj5*r20*x775)));
evalcond[1]=((((-1.0)*cj5*r10*x775))+((r10*x779))+((r11*x777))+((r12*x778))+((r11*x770*x773)));
evalcond[2]=((-1.0)+((x770*x772))+(((-1.0)*x774*x775))+((x773*x776))+((r01*x777))+((r00*x779)));
evalcond[3]=((((-1.0)*r01*x773*x775))+(((-1.0)*x770*x774))+(((-1.0)*cj4*r00*sj5*x775))+(((-1.0)*x772*x775))+((sj5*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x780=((0.9229390048494)*cj4);
IkReal x781=((0.9229390048494)*sj4);
IkReal x782=((0.0910115505610575)*cj5);
IkReal x783=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r11*x781))+(((-1.0)*r10*x782))+((r11*x783))+(((-1.0)*r10*sj5*x781))+((r12*x780))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*x782))+((r20*sj5*x781))+(((-1.0)*r21*x783))+(((-1.0)*r22*x780))+((cj5*r21*x781)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x781))+(((-1.0)*r10*x782))+((r11*x783))+(((-1.0)*r10*sj5*x781))+((r12*x780))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+((r20*x782))+((r20*sj5*x781))+(((-1.0)*r21*x783))+(((-1.0)*r22*x780))+((cj5*r21*x781))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r11*x781))+(((-1.0)*r10*x782))+((r11*x783))+(((-1.0)*r10*sj5*x781))+((r12*x780))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+((r20*x782))+((r20*sj5*x781))+(((-1.0)*r21*x783))+(((-1.0)*r22*x780))+((cj5*r21*x781))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x784=((0.39225)*r10);
IkReal x785=(sj4*sj5);
IkReal x786=(cj5*sj3);
IkReal x787=((0.39225)*r11);
IkReal x788=(sj3*sj5);
IkReal x789=(cj3*cj4);
IkReal x790=((0.03868)*sj5);
IkReal x791=((0.39225)*r21);
IkReal x792=((0.03868)*cj5);
IkReal x793=((0.39225)*cj4);
IkReal x794=((0.39225)*r20);
IkReal x795=(cj5*sj4);
IkReal x796=((0.425001)*(IKsin(j1)));
IkReal x797=(r10*x792);
IkReal x798=(r11*x790);
IkReal x799=(r20*x792);
IkReal x800=(r21*x790);
IkReal x801=((0.425001)*(IKcos(j1)));
IkReal x802=((0.39225)*cj3*sj4);
IkReal x803=(pz+x799);
IkReal x804=(x797+x796);
IkReal x805=(x801+x800);
evalcond[0]=(((x785*x794))+(((-1.0)*r22*x793))+x803+(((-1.0)*x805))+((x791*x795)));
evalcond[1]=((((-1.0)*py))+(((-1.0)*x787*x795))+(((-1.0)*x784*x785))+x798+(((-1.0)*x804))+((r12*x793)));
evalcond[2]=((((-1.0)*x798))+(((-1.0)*r22*x802))+((x788*x791))+(((-1.0)*sj5*x789*x794))+py+(((-1.0)*cj5*x789*x791))+(((-1.0)*x786*x794))+x804);
evalcond[3]=(((r12*x802))+((cj5*x787*x789))+((x784*x786))+(((-1.0)*x787*x788))+((sj5*x784*x789))+x803+(((-1.0)*x805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x806=(cj1*cj4);
IkReal x807=((1.0)*sj1);
IkReal x808=((1.0)*cj1);
IkReal x809=(cj5*r21*sj4);
IkReal x810=(cj5*r11*sj4);
IkReal x811=(r10*sj4*sj5);
IkReal x812=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*x807*x809))+(((-1.0)*x808*x810))+(((-1.0)*x808*x811))+((cj4*r22*sj1))+((r12*x806))+(((-1.0)*r20*sj4*sj5*x807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12*x807))+((sj1*x811))+((sj1*x810))+((r22*x806))+(((-1.0)*x808*x809))+(((-1.0)*r20*sj4*sj5*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x807*x809))+(((-1.0)*x808*x810))+(((-1.0)*x808*x811))+((cj4*r22*sj1))+((r12*x806))+(((-1.0)*r20*sj4*sj5*x807))))+IKsqr(((((-1.0)*cj4*r12*x807))+((sj1*x811))+((sj1*x810))+((r22*x806))+(((-1.0)*x808*x809))+(((-1.0)*r20*sj4*sj5*x808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x807*x809))+(((-1.0)*x808*x810))+(((-1.0)*x808*x811))+((cj4*r22*sj1))+((r12*x806))+(((-1.0)*r20*sj4*sj5*x807))), ((((-1.0)*cj4*r12*x807))+((sj1*x811))+((sj1*x810))+((r22*x806))+(((-1.0)*x808*x809))+(((-1.0)*r20*sj4*sj5*x808))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x813=IKsin(j2);
IkReal x814=IKcos(j2);
IkReal x815=((1.0)*r20);
IkReal x816=(cj5*sj3);
IkReal x817=((1.0)*cj4);
IkReal x818=(cj3*sj5);
IkReal x819=(cj5*r21);
IkReal x820=(r21*sj5);
IkReal x821=((1.0)*sj1);
IkReal x822=(sj4*sj5);
IkReal x823=(cj5*r11);
IkReal x824=((0.03868)*cj5);
IkReal x825=((0.39225)*sj1);
IkReal x826=(r11*sj5);
IkReal x827=(cj1*x813);
IkReal x828=(cj1*x814);
IkReal x829=((1.0)*cj3*sj4);
IkReal x830=(x814*x821);
evalcond[0]=(((sj4*x819))+((r20*x822))+((sj1*x813))+(((-1.0)*r22*x817))+x828);
evalcond[1]=(((r10*x822))+(((-1.0)*r12*x817))+(((-1.0)*x830))+x827+((sj4*x823)));
evalcond[2]=((((-1.0)*r20*x824))+(((0.39225)*x828))+(((0.425001)*cj1))+((x813*x825))+(((-1.0)*pz))+(((0.03868)*x820)));
evalcond[3]=((((-1.0)*x814*x825))+(((0.39225)*x827))+(((-1.0)*py))+(((-1.0)*r10*x824))+(((-0.425001)*sj1))+(((0.03868)*x826)));
evalcond[4]=((((-1.0)*cj4*x815*x818))+(((-1.0)*cj3*x817*x819))+((sj3*x820))+(((-1.0)*x815*x816))+(((-1.0)*x830))+(((-1.0)*r22*x829))+x827);
evalcond[5]=((((-1.0)*r10*x817*x818))+(((-1.0)*cj3*x817*x823))+(((-1.0)*r12*x829))+((sj3*x826))+(((-1.0)*x813*x821))+(((-1.0)*x828))+(((-1.0)*r10*x816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x831=((1.0)*cj5);
IkReal x832=((1.0)*sj4);
CheckValue<IkReal> x833=IKPowWithIntegerCheck(IKsign((((cj4*r22))+(((-1.0)*r20*sj5*x832))+(((-1.0)*r21*sj4*x831)))),-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x831))+((r11*sj5)))),IkReal(((((-1.0)*cj4*r10*sj5))+(((-1.0)*cj4*r11*x831))+(((-1.0)*r12*x832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x834.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x833.value)))+(x834.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x835=IKsin(j3);
IkReal x836=IKcos(j3);
IkReal x837=(r02*sj4);
IkReal x838=(cj4*cj5);
IkReal x839=(cj5*r00);
IkReal x840=((1.0)*x836);
IkReal x841=(r01*x835);
IkReal x842=(sj5*x836);
IkReal x843=(sj4*x835);
IkReal x844=(cj4*sj5*x835);
evalcond[0]=(((r22*x843))+((r20*x844))+((r21*x835*x838))+((r21*x842))+(((-1.0)*cj5*r20*x840)));
evalcond[1]=(((r11*x835*x838))+(((-1.0)*cj5*r10*x840))+((r10*x844))+((r12*x843))+((r11*x842)));
evalcond[2]=((-1.0)+((x838*x841))+((x835*x837))+((r01*x842))+((r00*x844))+(((-1.0)*x839*x840)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x840))+(((-1.0)*x837*x840))+(((-1.0)*r01*x838*x840))+((sj5*x841))+(((-1.0)*x835*x839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x845=((0.9229390048494)*cj4);
IkReal x846=((0.9229390048494)*sj4);
IkReal x847=((0.0910115505610575)*cj5);
IkReal x848=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*sj5*x846))+(((-1.0)*r10*x847))+(((-1.0)*cj5*r11*x846))+((r12*x845))+((r11*x848))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r21*x848))+((r20*x847))+(((-1.0)*r22*x845))+((r20*sj5*x846))+((cj5*r21*x846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*sj5*x846))+(((-1.0)*r10*x847))+(((-1.0)*cj5*r11*x846))+((r12*x845))+((r11*x848))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r21*x848))+((r20*x847))+(((-1.0)*r22*x845))+((r20*sj5*x846))+((cj5*r21*x846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*sj5*x846))+(((-1.0)*r10*x847))+(((-1.0)*cj5*r11*x846))+((r12*x845))+((r11*x848))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+(((-1.0)*r21*x848))+((r20*x847))+(((-1.0)*r22*x845))+((r20*sj5*x846))+((cj5*r21*x846))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x849=((0.39225)*r10);
IkReal x850=(sj4*sj5);
IkReal x851=(cj5*sj3);
IkReal x852=((0.39225)*r11);
IkReal x853=(sj3*sj5);
IkReal x854=(cj3*cj4);
IkReal x855=((0.03868)*sj5);
IkReal x856=((0.39225)*r21);
IkReal x857=((0.03868)*cj5);
IkReal x858=((0.39225)*cj4);
IkReal x859=((0.39225)*r20);
IkReal x860=(cj5*sj4);
IkReal x861=((0.425001)*(IKsin(j1)));
IkReal x862=(r10*x857);
IkReal x863=(r11*x855);
IkReal x864=(r20*x857);
IkReal x865=(r21*x855);
IkReal x866=((0.425001)*(IKcos(j1)));
IkReal x867=((0.39225)*cj3*sj4);
IkReal x868=(pz+x864);
IkReal x869=(x862+x861);
IkReal x870=(x866+x865);
evalcond[0]=(((x850*x859))+(((-1.0)*r22*x858))+((x856*x860))+x868+(((-1.0)*x870)));
evalcond[1]=((((-1.0)*x869))+((r12*x858))+(((-1.0)*x849*x850))+(((-1.0)*x852*x860))+(((-1.0)*py))+x863);
evalcond[2]=((((-1.0)*x863))+(((-1.0)*cj5*x854*x856))+py+x869+(((-1.0)*x851*x859))+((x853*x856))+(((-1.0)*r22*x867))+(((-1.0)*sj5*x854*x859)));
evalcond[3]=((((-1.0)*x852*x853))+((r12*x867))+((sj5*x849*x854))+((cj5*x852*x854))+x868+((x849*x851))+(((-1.0)*x870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x871=(cj1*cj4);
IkReal x872=((1.0)*sj1);
IkReal x873=((1.0)*cj1);
IkReal x874=(cj5*r21*sj4);
IkReal x875=(cj5*r11*sj4);
IkReal x876=(r10*sj4*sj5);
IkReal x877=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*x872*x874))+((r12*x871))+((cj4*r22*sj1))+(((-1.0)*x873*x875))+(((-1.0)*x873*x876))+(((-1.0)*r20*sj4*sj5*x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x873*x874))+((r22*x871))+(((-1.0)*r20*sj4*sj5*x873))+((sj1*x876))+((sj1*x875))+(((-1.0)*cj4*r12*x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x872*x874))+((r12*x871))+((cj4*r22*sj1))+(((-1.0)*x873*x875))+(((-1.0)*x873*x876))+(((-1.0)*r20*sj4*sj5*x872))))+IKsqr(((((-1.0)*x873*x874))+((r22*x871))+(((-1.0)*r20*sj4*sj5*x873))+((sj1*x876))+((sj1*x875))+(((-1.0)*cj4*r12*x872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x872*x874))+((r12*x871))+((cj4*r22*sj1))+(((-1.0)*x873*x875))+(((-1.0)*x873*x876))+(((-1.0)*r20*sj4*sj5*x872))), ((((-1.0)*x873*x874))+((r22*x871))+(((-1.0)*r20*sj4*sj5*x873))+((sj1*x876))+((sj1*x875))+(((-1.0)*cj4*r12*x872))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x878=IKsin(j2);
IkReal x879=IKcos(j2);
IkReal x880=((1.0)*r20);
IkReal x881=(cj5*sj3);
IkReal x882=((1.0)*cj4);
IkReal x883=(cj3*sj5);
IkReal x884=(cj5*r21);
IkReal x885=(r21*sj5);
IkReal x886=((1.0)*sj1);
IkReal x887=(sj4*sj5);
IkReal x888=(cj5*r11);
IkReal x889=((0.03868)*cj5);
IkReal x890=((0.39225)*sj1);
IkReal x891=(r11*sj5);
IkReal x892=(cj1*x878);
IkReal x893=(cj1*x879);
IkReal x894=((1.0)*cj3*sj4);
IkReal x895=(x879*x886);
evalcond[0]=(((sj4*x884))+((r20*x887))+((sj1*x878))+x893+(((-1.0)*r22*x882)));
evalcond[1]=(((sj4*x888))+((r10*x887))+(((-1.0)*x895))+(((-1.0)*r12*x882))+x892);
evalcond[2]=((((0.39225)*x893))+(((0.425001)*cj1))+(((-1.0)*pz))+((x878*x890))+(((-1.0)*r20*x889))+(((0.03868)*x885)));
evalcond[3]=((((-1.0)*x879*x890))+(((0.39225)*x892))+(((-1.0)*py))+(((-1.0)*r10*x889))+(((-0.425001)*sj1))+(((0.03868)*x891)));
evalcond[4]=((((-1.0)*cj4*x880*x883))+(((-1.0)*cj3*x882*x884))+(((-1.0)*x895))+((sj3*x885))+(((-1.0)*r22*x894))+x892+(((-1.0)*x880*x881)));
evalcond[5]=((((-1.0)*cj3*x882*x888))+(((-1.0)*r12*x894))+(((-1.0)*x893))+(((-1.0)*r10*x881))+(((-1.0)*r10*x882*x883))+((sj3*x891))+(((-1.0)*x878*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x896=((1.0)*r20);
IkReal x897=((1.0)*cj4);
CheckValue<IkReal> x898=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+(((-1.0)*r12*x897)))),-1);
if(!x898.valid){
continue;
}
CheckValue<IkReal> x899 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x896)))),IkReal(((((-1.0)*cj4*sj5*x896))+(((-1.0)*cj5*r21*x897))+(((-1.0)*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x899.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x898.value)))+(x899.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x900=IKsin(j3);
IkReal x901=IKcos(j3);
IkReal x902=(r02*sj4);
IkReal x903=(cj4*cj5);
IkReal x904=(cj5*r00);
IkReal x905=((1.0)*x901);
IkReal x906=(r01*x900);
IkReal x907=(sj5*x901);
IkReal x908=(sj4*x900);
IkReal x909=(cj4*sj5*x900);
evalcond[0]=(((r21*x907))+((r21*x900*x903))+((r20*x909))+((r22*x908))+(((-1.0)*cj5*r20*x905)));
evalcond[1]=((((-1.0)*cj5*r10*x905))+((r11*x907))+((r11*x900*x903))+((r12*x908))+((r10*x909)));
evalcond[2]=((-1.0)+((r00*x909))+((r01*x907))+((x903*x906))+((x900*x902))+(((-1.0)*x904*x905)));
evalcond[3]=((((-1.0)*x900*x904))+(((-1.0)*x902*x905))+((sj5*x906))+(((-1.0)*r01*x903*x905))+(((-1.0)*cj4*r00*sj5*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x910=((0.9229390048494)*cj4);
IkReal x911=((0.9229390048494)*sj4);
IkReal x912=((0.0910115505610575)*cj5);
IkReal x913=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r11*x911))+((r12*x910))+((r11*x913))+(((-1.0)*r10*x912))+(((-1.0)*r10*sj5*x911))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r22*x910))+(((-1.0)*r21*x913))+((r20*x912))+((r20*sj5*x911))+((cj5*r21*x911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x911))+((r12*x910))+((r11*x913))+(((-1.0)*r10*x912))+(((-1.0)*r10*sj5*x911))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r22*x910))+(((-1.0)*r21*x913))+((r20*x912))+((r20*sj5*x911))+((cj5*r21*x911))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r11*x911))+((r12*x910))+((r11*x913))+(((-1.0)*r10*x912))+(((-1.0)*r10*sj5*x911))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+(((-1.0)*r22*x910))+(((-1.0)*r21*x913))+((r20*x912))+((r20*sj5*x911))+((cj5*r21*x911))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x914=((0.39225)*r10);
IkReal x915=(sj4*sj5);
IkReal x916=(cj5*sj3);
IkReal x917=((0.39225)*r11);
IkReal x918=(sj3*sj5);
IkReal x919=(cj3*cj4);
IkReal x920=((0.03868)*sj5);
IkReal x921=((0.39225)*r21);
IkReal x922=((0.03868)*cj5);
IkReal x923=((0.39225)*cj4);
IkReal x924=((0.39225)*r20);
IkReal x925=(cj5*sj4);
IkReal x926=((0.425001)*(IKsin(j1)));
IkReal x927=(r10*x922);
IkReal x928=(r11*x920);
IkReal x929=(r20*x922);
IkReal x930=(r21*x920);
IkReal x931=((0.425001)*(IKcos(j1)));
IkReal x932=((0.39225)*cj3*sj4);
IkReal x933=(pz+x929);
IkReal x934=(x926+x927);
IkReal x935=(x931+x930);
evalcond[0]=(((x915*x924))+(((-1.0)*r22*x923))+((x921*x925))+x933+(((-1.0)*x935)));
evalcond[1]=((((-1.0)*py))+((r12*x923))+(((-1.0)*x914*x915))+x928+(((-1.0)*x917*x925))+(((-1.0)*x934)));
evalcond[2]=(((x918*x921))+(((-1.0)*x928))+(((-1.0)*r22*x932))+(((-1.0)*sj5*x919*x924))+py+(((-1.0)*x916*x924))+x934+(((-1.0)*cj5*x919*x921)));
evalcond[3]=(((cj5*x917*x919))+((x914*x916))+((r12*x932))+((sj5*x914*x919))+x933+(((-1.0)*x917*x918))+(((-1.0)*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x936=(cj1*cj4);
IkReal x937=((1.0)*sj1);
IkReal x938=((1.0)*cj1);
IkReal x939=(cj5*r21*sj4);
IkReal x940=(cj5*r11*sj4);
IkReal x941=(r10*sj4*sj5);
IkReal x942=((1.0)*r20*sj4*sj5);
if( IKabs((((cj4*r22*sj1))+(((-1.0)*x938*x940))+(((-1.0)*x938*x941))+((r12*x936))+(((-1.0)*r20*sj4*sj5*x937))+(((-1.0)*x937*x939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12*x937))+((r22*x936))+((sj1*x941))+((sj1*x940))+(((-1.0)*x938*x939))+(((-1.0)*r20*sj4*sj5*x938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r22*sj1))+(((-1.0)*x938*x940))+(((-1.0)*x938*x941))+((r12*x936))+(((-1.0)*r20*sj4*sj5*x937))+(((-1.0)*x937*x939))))+IKsqr(((((-1.0)*cj4*r12*x937))+((r22*x936))+((sj1*x941))+((sj1*x940))+(((-1.0)*x938*x939))+(((-1.0)*r20*sj4*sj5*x938))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*r22*sj1))+(((-1.0)*x938*x940))+(((-1.0)*x938*x941))+((r12*x936))+(((-1.0)*r20*sj4*sj5*x937))+(((-1.0)*x937*x939))), ((((-1.0)*cj4*r12*x937))+((r22*x936))+((sj1*x941))+((sj1*x940))+(((-1.0)*x938*x939))+(((-1.0)*r20*sj4*sj5*x938))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x943=IKsin(j2);
IkReal x944=IKcos(j2);
IkReal x945=((1.0)*r20);
IkReal x946=(cj5*sj3);
IkReal x947=((1.0)*cj4);
IkReal x948=(cj3*sj5);
IkReal x949=(cj5*r21);
IkReal x950=(r21*sj5);
IkReal x951=((1.0)*sj1);
IkReal x952=(sj4*sj5);
IkReal x953=(cj5*r11);
IkReal x954=((0.03868)*cj5);
IkReal x955=((0.39225)*sj1);
IkReal x956=(r11*sj5);
IkReal x957=(cj1*x943);
IkReal x958=(cj1*x944);
IkReal x959=((1.0)*cj3*sj4);
IkReal x960=(x944*x951);
evalcond[0]=(((sj1*x943))+((r20*x952))+((sj4*x949))+(((-1.0)*r22*x947))+x958);
evalcond[1]=((((-1.0)*r12*x947))+((sj4*x953))+x957+(((-1.0)*x960))+((r10*x952)));
evalcond[2]=((((0.39225)*x958))+(((-1.0)*r20*x954))+((x943*x955))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x950)));
evalcond[3]=((((-1.0)*r10*x954))+(((0.39225)*x957))+(((-1.0)*x944*x955))+(((-1.0)*py))+(((-0.425001)*sj1))+(((0.03868)*x956)));
evalcond[4]=((((-1.0)*x945*x946))+(((-1.0)*cj4*x945*x948))+(((-1.0)*cj3*x947*x949))+(((-1.0)*r22*x959))+((sj3*x950))+x957+(((-1.0)*x960)));
evalcond[5]=((((-1.0)*r10*x947*x948))+(((-1.0)*x958))+(((-1.0)*x943*x951))+(((-1.0)*cj3*x947*x953))+(((-1.0)*r10*x946))+(((-1.0)*r12*x959))+((sj3*x956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x961=(cj5*sj0);
IkReal x962=(cj0*sj5);
IkReal x963=((1.0)*cj0);
IkReal x964=((1.0)*cj4);
IkReal x965=(sj0*sj5);
CheckValue<IkReal> x966=IKPowWithIntegerCheck(IKsign((((cj5*r21*sj4))+(((-1.0)*r22*x964))+((r20*sj4*sj5)))),-1);
if(!x966.valid){
continue;
}
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x963))+((r00*x961))+((r11*x962))+(((-1.0)*r01*x965)))),IkReal(((((-1.0)*r12*sj4*x963))+((r02*sj0*sj4))+(((-1.0)*r10*x962*x964))+(((-1.0)*cj4*cj5*r11*x963))+((cj4*r01*x961))+((cj4*r00*x965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x966.value)))+(x967.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x968=IKsin(j3);
IkReal x969=IKcos(j3);
IkReal x970=(sj4*x968);
IkReal x971=(sj5*x969);
IkReal x972=(cj4*cj5*x968);
IkReal x973=(cj4*sj5*x968);
IkReal x974=((1.0)*cj5*x969);
evalcond[0]=((((-1.0)*r20*x974))+((r22*x970))+((r21*x972))+((r21*x971))+((r20*x973)));
evalcond[1]=(cj0+(((-1.0)*r00*x974))+((r01*x972))+((r01*x971))+((r00*x973))+((r02*x970)));
evalcond[2]=(sj0+((r12*x970))+((r10*x973))+((r11*x972))+((r11*x971))+(((-1.0)*r10*x974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x975=((0.9229390048494)*sj4);
IkReal x976=((0.0910115505610575)*cj5);
IkReal x977=((0.9229390048494)*cj4);
IkReal x978=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+((r10*sj5*x975))+((cj5*r11*x975))+(((-1.0)*r11*x978))+((r10*x976))+(((-1.0)*r12*x977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((cj5*r21*x975))+((r20*sj5*x975))+((r20*x976))+(((-1.0)*r22*x977))+(((-1.0)*r21*x978)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+((r10*sj5*x975))+((cj5*r11*x975))+(((-1.0)*r11*x978))+((r10*x976))+(((-1.0)*r12*x977))))+IKsqr(((((2.35293564015143)*pz))+((cj5*r21*x975))+((r20*sj5*x975))+((r20*x976))+(((-1.0)*r22*x977))+(((-1.0)*r21*x978))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+((r10*sj5*x975))+((cj5*r11*x975))+(((-1.0)*r11*x978))+((r10*x976))+(((-1.0)*r12*x977))), ((((2.35293564015143)*pz))+((cj5*r21*x975))+((r20*sj5*x975))+((r20*x976))+(((-1.0)*r22*x977))+(((-1.0)*r21*x978))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x979=((0.39225)*r10);
IkReal x980=(sj4*sj5);
IkReal x981=(cj5*sj3);
IkReal x982=((0.39225)*r11);
IkReal x983=(sj3*sj5);
IkReal x984=(cj3*cj4);
IkReal x985=((0.03868)*sj5);
IkReal x986=((0.39225)*r21);
IkReal x987=((0.03868)*cj5);
IkReal x988=((0.39225)*cj4);
IkReal x989=((0.39225)*r20);
IkReal x990=(cj5*sj4);
IkReal x991=(r10*x987);
IkReal x992=(r11*x985);
IkReal x993=((0.425001)*(IKsin(j1)));
IkReal x994=(r21*x985);
IkReal x995=((0.425001)*(IKcos(j1)));
IkReal x996=(r20*x987);
IkReal x997=((0.39225)*cj3*sj4);
IkReal x998=(py+x991);
IkReal x999=(x993+x992);
IkReal x1000=(x995+x994);
evalcond[0]=(((x979*x980))+(((-1.0)*x999))+(((-1.0)*r12*x988))+x998+((x982*x990)));
evalcond[1]=(((x986*x990))+(((-1.0)*x1000))+pz+((x980*x989))+x996+(((-1.0)*r22*x988)));
evalcond[2]=(((x981*x989))+((sj5*x984*x989))+(((-1.0)*x999))+((cj5*x984*x986))+((r22*x997))+x998+(((-1.0)*x983*x986)));
evalcond[3]=(((cj5*x982*x984))+((r12*x997))+x1000+((sj5*x979*x984))+((x979*x981))+(((-1.0)*x982*x983))+(((-1.0)*pz))+(((-1.0)*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1001=(cj4*r12);
IkReal x1002=(cj4*r22);
IkReal x1003=(cj5*sj4);
IkReal x1004=((1.0)*r21);
IkReal x1005=((1.0)*sj1);
IkReal x1006=(r10*sj4*sj5);
IkReal x1007=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*sj1*x1003*x1004))+((sj1*x1002))+(((-1.0)*cj1*x1001))+((cj1*r11*x1003))+(((-1.0)*r20*sj4*sj5*x1005))+((cj1*x1006)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x1003*x1004))+(((-1.0)*r11*x1003*x1005))+((sj1*x1001))+(((-1.0)*x1005*x1006))+(((-1.0)*cj1*x1007))+((cj1*x1002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1003*x1004))+((sj1*x1002))+(((-1.0)*cj1*x1001))+((cj1*r11*x1003))+(((-1.0)*r20*sj4*sj5*x1005))+((cj1*x1006))))+IKsqr(((((-1.0)*cj1*x1003*x1004))+(((-1.0)*r11*x1003*x1005))+((sj1*x1001))+(((-1.0)*x1005*x1006))+(((-1.0)*cj1*x1007))+((cj1*x1002))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x1003*x1004))+((sj1*x1002))+(((-1.0)*cj1*x1001))+((cj1*r11*x1003))+(((-1.0)*r20*sj4*sj5*x1005))+((cj1*x1006))), ((((-1.0)*cj1*x1003*x1004))+(((-1.0)*r11*x1003*x1005))+((sj1*x1001))+(((-1.0)*x1005*x1006))+(((-1.0)*cj1*x1007))+((cj1*x1002))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1008=IKcos(j2);
IkReal x1009=IKsin(j2);
IkReal x1010=((1.0)*cj4);
IkReal x1011=(sj3*sj5);
IkReal x1012=(cj5*r21);
IkReal x1013=((0.03868)*sj5);
IkReal x1014=(sj4*sj5);
IkReal x1015=(cj5*r11);
IkReal x1016=((0.03868)*cj5);
IkReal x1017=(cj3*sj5);
IkReal x1018=(cj1*x1008);
IkReal x1019=(sj1*x1009);
IkReal x1020=((1.0)*cj5*sj3);
IkReal x1021=((1.0)*cj3*sj4);
IkReal x1022=(cj1*x1009);
IkReal x1023=(sj1*x1008);
IkReal x1024=(x1018+x1019);
evalcond[0]=((((-1.0)*r22*x1010))+x1024+((sj4*x1012))+((r20*x1014)));
evalcond[1]=(x1023+(((-1.0)*x1022))+((sj4*x1015))+(((-1.0)*r12*x1010))+((r10*x1014)));
evalcond[2]=((((-1.0)*r20*x1016))+((r21*x1013))+(((0.39225)*x1018))+(((0.39225)*x1019))+(((0.425001)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((0.39225)*x1023))+(((-0.39225)*x1022))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x1016))+((r11*x1013)));
evalcond[4]=((((-1.0)*r12*x1021))+x1024+(((-1.0)*r10*x1010*x1017))+(((-1.0)*r10*x1020))+(((-1.0)*cj3*x1010*x1015))+((r11*x1011)));
evalcond[5]=((((-1.0)*r22*x1021))+x1022+(((-1.0)*x1023))+(((-1.0)*r20*x1010*x1017))+((r21*x1011))+(((-1.0)*r20*x1020))+(((-1.0)*cj3*x1010*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1025=((0.9229390048494)*cj4);
IkReal x1026=((0.9229390048494)*sj4);
IkReal x1027=((0.0910115505610575)*cj5);
IkReal x1028=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r11*x1026))+(((-1.0)*r10*sj5*x1026))+((r12*x1025))+((r11*x1028))+(((-1.0)*r10*x1027))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1025))+(((2.35293564015143)*pz))+((r20*x1027))+((r20*sj5*x1026))+(((-1.0)*r21*x1028))+((cj5*r21*x1026)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r11*x1026))+(((-1.0)*r10*sj5*x1026))+((r12*x1025))+((r11*x1028))+(((-1.0)*r10*x1027))+(((-2.35293564015143)*py))))+IKsqr(((((-1.0)*r22*x1025))+(((2.35293564015143)*pz))+((r20*x1027))+((r20*sj5*x1026))+(((-1.0)*r21*x1028))+((cj5*r21*x1026))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r11*x1026))+(((-1.0)*r10*sj5*x1026))+((r12*x1025))+((r11*x1028))+(((-1.0)*r10*x1027))+(((-2.35293564015143)*py))), ((((-1.0)*r22*x1025))+(((2.35293564015143)*pz))+((r20*x1027))+((r20*sj5*x1026))+(((-1.0)*r21*x1028))+((cj5*r21*x1026))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1029=((0.39225)*r10);
IkReal x1030=(sj4*sj5);
IkReal x1031=(cj5*sj3);
IkReal x1032=((0.39225)*r11);
IkReal x1033=(sj3*sj5);
IkReal x1034=(cj3*cj4);
IkReal x1035=((0.03868)*sj5);
IkReal x1036=((0.39225)*r21);
IkReal x1037=((0.03868)*cj5);
IkReal x1038=((0.39225)*cj4);
IkReal x1039=((0.39225)*r20);
IkReal x1040=(cj5*sj4);
IkReal x1041=((0.425001)*(IKsin(j1)));
IkReal x1042=(r10*x1037);
IkReal x1043=(r11*x1035);
IkReal x1044=(r20*x1037);
IkReal x1045=(r21*x1035);
IkReal x1046=((0.425001)*(IKcos(j1)));
IkReal x1047=((0.39225)*cj3*sj4);
IkReal x1048=(x1044+pz);
IkReal x1049=(x1042+x1041);
IkReal x1050=(x1046+x1045);
evalcond[0]=((((-1.0)*x1050))+((x1030*x1039))+x1048+((x1036*x1040))+(((-1.0)*r22*x1038)));
evalcond[1]=((((-1.0)*x1032*x1040))+x1043+(((-1.0)*x1029*x1030))+(((-1.0)*py))+((r12*x1038))+(((-1.0)*x1049)));
evalcond[2]=(x1049+(((-1.0)*r22*x1047))+py+(((-1.0)*x1031*x1039))+(((-1.0)*cj5*x1034*x1036))+((x1033*x1036))+(((-1.0)*sj5*x1034*x1039))+(((-1.0)*x1043)));
evalcond[3]=((((-1.0)*x1050))+x1048+(((-1.0)*x1032*x1033))+((x1029*x1031))+((cj5*x1032*x1034))+((sj5*x1029*x1034))+((r12*x1047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1051=(cj1*cj4);
IkReal x1052=((1.0)*sj1);
IkReal x1053=((1.0)*cj1);
IkReal x1054=(cj5*r21*sj4);
IkReal x1055=(cj5*r11*sj4);
IkReal x1056=(r10*sj4*sj5);
IkReal x1057=((1.0)*r20*sj4*sj5);
if( IKabs((((r12*x1051))+(((-1.0)*x1052*x1054))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x1052))+(((-1.0)*x1053*x1056))+(((-1.0)*x1053*x1055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12*x1052))+((sj1*x1056))+((sj1*x1055))+(((-1.0)*r20*sj4*sj5*x1053))+(((-1.0)*x1053*x1054))+((r22*x1051)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1051))+(((-1.0)*x1052*x1054))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x1052))+(((-1.0)*x1053*x1056))+(((-1.0)*x1053*x1055))))+IKsqr(((((-1.0)*cj4*r12*x1052))+((sj1*x1056))+((sj1*x1055))+(((-1.0)*r20*sj4*sj5*x1053))+(((-1.0)*x1053*x1054))+((r22*x1051))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x1051))+(((-1.0)*x1052*x1054))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x1052))+(((-1.0)*x1053*x1056))+(((-1.0)*x1053*x1055))), ((((-1.0)*cj4*r12*x1052))+((sj1*x1056))+((sj1*x1055))+(((-1.0)*r20*sj4*sj5*x1053))+(((-1.0)*x1053*x1054))+((r22*x1051))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1058=IKsin(j2);
IkReal x1059=IKcos(j2);
IkReal x1060=((1.0)*r20);
IkReal x1061=(cj5*sj3);
IkReal x1062=((1.0)*cj4);
IkReal x1063=(cj3*sj5);
IkReal x1064=(cj5*r21);
IkReal x1065=(r21*sj5);
IkReal x1066=((1.0)*sj1);
IkReal x1067=(sj4*sj5);
IkReal x1068=(cj5*r11);
IkReal x1069=((0.03868)*cj5);
IkReal x1070=((0.39225)*sj1);
IkReal x1071=(r11*sj5);
IkReal x1072=(cj1*x1058);
IkReal x1073=(cj1*x1059);
IkReal x1074=((1.0)*cj3*sj4);
IkReal x1075=(x1059*x1066);
evalcond[0]=(x1073+(((-1.0)*r22*x1062))+((r20*x1067))+((sj1*x1058))+((sj4*x1064)));
evalcond[1]=(x1072+(((-1.0)*r12*x1062))+((r10*x1067))+((sj4*x1068))+(((-1.0)*x1075)));
evalcond[2]=(((x1058*x1070))+(((-1.0)*r20*x1069))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1073))+(((0.03868)*x1065)));
evalcond[3]=((((-1.0)*r10*x1069))+(((-1.0)*x1059*x1070))+(((-1.0)*py))+(((0.39225)*x1072))+(((-0.425001)*sj1))+(((0.03868)*x1071)));
evalcond[4]=((((-1.0)*x1060*x1061))+x1072+((sj3*x1065))+(((-1.0)*r22*x1074))+(((-1.0)*x1075))+(((-1.0)*cj3*x1062*x1064))+(((-1.0)*cj4*x1060*x1063)));
evalcond[5]=((((-1.0)*r10*x1062*x1063))+((sj3*x1071))+(((-1.0)*r12*x1074))+(((-1.0)*x1058*x1066))+(((-1.0)*r10*x1061))+(((-1.0)*x1073))+(((-1.0)*cj3*x1062*x1068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1076=((0.9229390048494)*cj4);
IkReal x1077=((0.9229390048494)*sj4);
IkReal x1078=((0.0910115505610575)*cj5);
IkReal x1079=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r00*x1078))+(((-1.0)*cj5*r01*x1077))+((r01*x1079))+(((-1.0)*r00*sj5*x1077))+(((-2.35293564015143)*px))+((r02*x1076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((cj5*r21*x1077))+(((-1.0)*r21*x1079))+(((-1.0)*r22*x1076))+((r20*x1078))+((r20*sj5*x1077)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1078))+(((-1.0)*cj5*r01*x1077))+((r01*x1079))+(((-1.0)*r00*sj5*x1077))+(((-2.35293564015143)*px))+((r02*x1076))))+IKsqr(((((2.35293564015143)*pz))+((cj5*r21*x1077))+(((-1.0)*r21*x1079))+(((-1.0)*r22*x1076))+((r20*x1078))+((r20*sj5*x1077))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1078))+(((-1.0)*cj5*r01*x1077))+((r01*x1079))+(((-1.0)*r00*sj5*x1077))+(((-2.35293564015143)*px))+((r02*x1076))), ((((2.35293564015143)*pz))+((cj5*r21*x1077))+(((-1.0)*r21*x1079))+(((-1.0)*r22*x1076))+((r20*x1078))+((r20*sj5*x1077))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1080=((0.39225)*sj3);
IkReal x1081=(cj5*r00);
IkReal x1082=((0.39225)*cj4);
IkReal x1083=(r01*sj5);
IkReal x1084=(r21*sj5);
IkReal x1085=(cj5*r20);
IkReal x1086=((0.39225)*sj4);
IkReal x1087=(r20*sj5);
IkReal x1088=(r00*sj5);
IkReal x1089=(cj5*r01);
IkReal x1090=(cj5*r21);
IkReal x1091=((0.425001)*(IKsin(j1)));
IkReal x1092=((0.03868)*x1081);
IkReal x1093=((0.03868)*x1083);
IkReal x1094=((0.03868)*x1085);
IkReal x1095=((0.03868)*x1084);
IkReal x1096=((0.425001)*(IKcos(j1)));
IkReal x1097=(x1094+pz);
IkReal x1098=(x1091+x1092);
IkReal x1099=(x1095+x1096);
evalcond[0]=(x1097+((x1086*x1090))+(((-1.0)*x1099))+((x1086*x1087))+(((-1.0)*r22*x1082)));
evalcond[1]=(x1093+(((-1.0)*x1098))+(((-1.0)*px))+((r02*x1082))+(((-1.0)*x1086*x1088))+(((-1.0)*x1086*x1089)));
evalcond[2]=(x1098+(((-1.0)*cj3*r22*x1086))+(((-1.0)*x1093))+(((-1.0)*cj3*x1082*x1087))+(((-1.0)*x1080*x1085))+px+((x1080*x1084))+(((-1.0)*cj3*x1082*x1090)));
evalcond[3]=(x1097+(((-1.0)*x1099))+(((-1.0)*x1080*x1083))+((x1080*x1081))+((cj3*x1082*x1088))+((cj3*x1082*x1089))+((cj3*r02*x1086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1100=(sj1*sj4);
IkReal x1101=(cj5*r01);
IkReal x1102=(cj1*sj4);
IkReal x1103=(cj4*r22);
IkReal x1104=(cj4*r02);
IkReal x1105=(r00*sj5);
IkReal x1106=((1.0)*r20*sj5);
IkReal x1107=((1.0)*cj5*r21);
if( IKabs((((cj1*x1104))+(((-1.0)*x1100*x1106))+(((-1.0)*x1100*x1107))+((sj1*x1103))+(((-1.0)*x1102*x1105))+(((-1.0)*x1101*x1102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1103))+(((-1.0)*sj1*x1104))+((x1100*x1105))+((x1100*x1101))+(((-1.0)*x1102*x1107))+(((-1.0)*x1102*x1106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1104))+(((-1.0)*x1100*x1106))+(((-1.0)*x1100*x1107))+((sj1*x1103))+(((-1.0)*x1102*x1105))+(((-1.0)*x1101*x1102))))+IKsqr((((cj1*x1103))+(((-1.0)*sj1*x1104))+((x1100*x1105))+((x1100*x1101))+(((-1.0)*x1102*x1107))+(((-1.0)*x1102*x1106))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1104))+(((-1.0)*x1100*x1106))+(((-1.0)*x1100*x1107))+((sj1*x1103))+(((-1.0)*x1102*x1105))+(((-1.0)*x1101*x1102))), (((cj1*x1103))+(((-1.0)*sj1*x1104))+((x1100*x1105))+((x1100*x1101))+(((-1.0)*x1102*x1107))+(((-1.0)*x1102*x1106))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1108=IKsin(j2);
IkReal x1109=IKcos(j2);
IkReal x1110=((1.0)*cj5);
IkReal x1111=((1.0)*cj3);
IkReal x1112=((1.0)*cj4);
IkReal x1113=(cj3*cj4);
IkReal x1114=(cj5*sj4);
IkReal x1115=(r21*sj5);
IkReal x1116=((1.0)*sj1);
IkReal x1117=(r20*sj5);
IkReal x1118=((0.03868)*cj5);
IkReal x1119=((0.39225)*sj1);
IkReal x1120=(r00*sj5);
IkReal x1121=(r01*sj5);
IkReal x1122=(cj1*x1108);
IkReal x1123=(cj1*x1109);
IkReal x1124=(x1109*x1116);
evalcond[0]=(x1123+(((-1.0)*r22*x1112))+((sj4*x1117))+((sj1*x1108))+((r21*x1114)));
evalcond[1]=(x1122+((sj4*x1120))+((r01*x1114))+(((-1.0)*x1124))+(((-1.0)*r02*x1112)));
evalcond[2]=(((x1108*x1119))+(((0.03868)*x1115))+(((0.39225)*x1123))+(((0.425001)*cj1))+(((-1.0)*r20*x1118))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*r00*x1118))+(((-1.0)*x1109*x1119))+(((0.03868)*x1121))+(((0.39225)*x1122))+(((-1.0)*px))+(((-0.425001)*sj1)));
evalcond[4]=(x1122+((sj3*x1115))+(((-1.0)*r20*sj3*x1110))+(((-1.0)*r22*sj4*x1111))+(((-1.0)*x1124))+(((-1.0)*cj4*x1111*x1117))+(((-1.0)*r21*x1110*x1113)));
evalcond[5]=((((-1.0)*x1108*x1116))+(((-1.0)*x1123))+(((-1.0)*cj4*x1111*x1120))+((sj3*x1121))+(((-1.0)*r02*sj4*x1111))+(((-1.0)*r01*x1110*x1113))+(((-1.0)*r00*sj3*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1125=((0.9229390048494)*cj4);
IkReal x1126=((0.9229390048494)*sj4);
IkReal x1127=((0.0910115505610575)*cj5);
IkReal x1128=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((r00*x1127))+(((-1.0)*r02*x1125))+((r00*sj5*x1126))+(((-1.0)*r01*x1128))+((cj5*r01*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x1126))+((cj5*r21*x1126))+(((-1.0)*r22*x1125))+(((-1.0)*r21*x1128))+((r20*x1127)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((r00*x1127))+(((-1.0)*r02*x1125))+((r00*sj5*x1126))+(((-1.0)*r01*x1128))+((cj5*r01*x1126))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x1126))+((cj5*r21*x1126))+(((-1.0)*r22*x1125))+(((-1.0)*r21*x1128))+((r20*x1127))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((r00*x1127))+(((-1.0)*r02*x1125))+((r00*sj5*x1126))+(((-1.0)*r01*x1128))+((cj5*r01*x1126))), ((((2.35293564015143)*pz))+((r20*sj5*x1126))+((cj5*r21*x1126))+(((-1.0)*r22*x1125))+(((-1.0)*r21*x1128))+((r20*x1127))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1129=((0.39225)*sj3);
IkReal x1130=(cj5*r00);
IkReal x1131=((0.39225)*cj4);
IkReal x1132=(r01*sj5);
IkReal x1133=(r21*sj5);
IkReal x1134=(cj5*r20);
IkReal x1135=((0.39225)*sj4);
IkReal x1136=(r20*sj5);
IkReal x1137=(r00*sj5);
IkReal x1138=(cj5*r01);
IkReal x1139=(cj5*r21);
IkReal x1140=((0.03868)*x1130);
IkReal x1141=((0.425001)*(IKsin(j1)));
IkReal x1142=((0.03868)*x1132);
IkReal x1143=((0.03868)*x1133);
IkReal x1144=((0.425001)*(IKcos(j1)));
IkReal x1145=((0.03868)*x1134);
IkReal x1146=(x1140+px);
IkReal x1147=(x1143+x1144);
IkReal x1148=(x1142+x1141);
evalcond[0]=(x1146+((x1135*x1137))+((x1135*x1138))+(((-1.0)*x1148))+(((-1.0)*r02*x1131)));
evalcond[1]=(x1145+((x1135*x1136))+((x1135*x1139))+(((-1.0)*x1147))+pz+(((-1.0)*r22*x1131)));
evalcond[2]=(((cj3*r22*x1135))+x1146+((x1129*x1134))+(((-1.0)*x1148))+((cj3*x1131*x1136))+((cj3*x1131*x1139))+(((-1.0)*x1129*x1133)));
evalcond[3]=(x1147+((x1129*x1130))+(((-1.0)*x1145))+(((-1.0)*pz))+((cj3*r02*x1135))+((cj3*x1131*x1137))+((cj3*x1131*x1138))+(((-1.0)*x1129*x1132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1149=(cj4*sj1);
IkReal x1150=(cj1*cj4);
IkReal x1151=(cj1*cj5*sj4);
IkReal x1152=(r00*sj4*sj5);
IkReal x1153=((1.0)*r20*sj4*sj5);
IkReal x1154=((1.0)*cj5*sj1*sj4);
if( IKabs((((r22*x1149))+(((-1.0)*r21*x1154))+((cj1*x1152))+(((-1.0)*sj1*x1153))+(((-1.0)*r02*x1150))+((r01*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1150))+(((-1.0)*r01*x1154))+(((-1.0)*cj1*x1153))+(((-1.0)*r21*x1151))+((r02*x1149))+(((-1.0)*sj1*x1152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1149))+(((-1.0)*r21*x1154))+((cj1*x1152))+(((-1.0)*sj1*x1153))+(((-1.0)*r02*x1150))+((r01*x1151))))+IKsqr((((r22*x1150))+(((-1.0)*r01*x1154))+(((-1.0)*cj1*x1153))+(((-1.0)*r21*x1151))+((r02*x1149))+(((-1.0)*sj1*x1152))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1149))+(((-1.0)*r21*x1154))+((cj1*x1152))+(((-1.0)*sj1*x1153))+(((-1.0)*r02*x1150))+((r01*x1151))), (((r22*x1150))+(((-1.0)*r01*x1154))+(((-1.0)*cj1*x1153))+(((-1.0)*r21*x1151))+((r02*x1149))+(((-1.0)*sj1*x1152))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1155=IKcos(j2);
IkReal x1156=IKsin(j2);
IkReal x1157=((1.0)*cj5);
IkReal x1158=((1.0)*cj3);
IkReal x1159=((1.0)*cj4);
IkReal x1160=(cj3*cj4);
IkReal x1161=(r21*sj5);
IkReal x1162=(cj5*sj4);
IkReal x1163=(r20*sj5);
IkReal x1164=((0.03868)*cj5);
IkReal x1165=(r00*sj5);
IkReal x1166=(r01*sj5);
IkReal x1167=(cj1*x1155);
IkReal x1168=(sj1*x1156);
IkReal x1169=(cj1*x1156);
IkReal x1170=(sj1*x1155);
IkReal x1171=(x1167+x1168);
evalcond[0]=(x1171+((r21*x1162))+((sj4*x1163))+(((-1.0)*r22*x1159)));
evalcond[1]=(x1170+((r01*x1162))+((sj4*x1165))+(((-1.0)*r02*x1159))+(((-1.0)*x1169)));
evalcond[2]=((((-1.0)*r20*x1164))+(((0.03868)*x1161))+(((0.39225)*x1168))+(((0.39225)*x1167))+(((0.425001)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((0.03868)*x1166))+(((0.39225)*x1170))+(((-0.39225)*x1169))+(((-1.0)*px))+(((0.425001)*sj1))+(((-1.0)*r00*x1164)));
evalcond[4]=(x1171+(((-1.0)*r01*x1157*x1160))+(((-1.0)*r00*sj3*x1157))+(((-1.0)*r02*sj4*x1158))+(((-1.0)*cj4*x1158*x1165))+((sj3*x1166)));
evalcond[5]=(x1169+(((-1.0)*r22*sj4*x1158))+(((-1.0)*r21*x1157*x1160))+(((-1.0)*r20*sj3*x1157))+(((-1.0)*cj4*x1158*x1163))+((sj3*x1161))+(((-1.0)*x1170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1172=(r01*sj0);
IkReal x1173=(cj5*sj4);
IkReal x1174=(sj4*sj5);
IkReal x1175=((0.39225)*sj0);
CheckValue<IkReal> x1176=IKPowWithIntegerCheck(sj0,-2);
if(!x1176.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1176.value)*(((((-1.0)*r00*x1174*x1175))+(((-0.03868)*cj5*r00*sj0))+(((0.03868)*sj5*x1172))+((cj4*r02*x1175))+(((-0.032446)*cj0*sj0))+(((-0.39225)*x1172*x1173))+(((-1.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((0.9229390048494)*r20*x1174))+(((-0.0910115505610575)*r21*sj5))+(((0.9229390048494)*r21*x1173))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1176.value)*(((((-1.0)*r00*x1174*x1175))+(((-0.03868)*cj5*r00*sj0))+(((0.03868)*sj5*x1172))+((cj4*r02*x1175))+(((-0.032446)*cj0*sj0))+(((-0.39225)*x1172*x1173))+(((-1.0)*px*sj0))))))+IKsqr(((((2.35293564015143)*pz))+(((0.9229390048494)*r20*x1174))+(((-0.0910115505610575)*r21*sj5))+(((0.9229390048494)*r21*x1173))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1176.value)*(((((-1.0)*r00*x1174*x1175))+(((-0.03868)*cj5*r00*sj0))+(((0.03868)*sj5*x1172))+((cj4*r02*x1175))+(((-0.032446)*cj0*sj0))+(((-0.39225)*x1172*x1173))+(((-1.0)*px*sj0))))), ((((2.35293564015143)*pz))+(((0.9229390048494)*r20*x1174))+(((-0.0910115505610575)*r21*sj5))+(((0.9229390048494)*r21*x1173))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1177=IKsin(j1);
IkReal x1178=IKcos(j1);
IkReal x1179=cj0*cj0;
IkReal x1180=sj0*sj0;
IkReal x1181=((0.425001)*cj0);
IkReal x1182=((0.39225)*sj5);
IkReal x1183=(cj3*cj4);
IkReal x1184=(cj0*r20);
IkReal x1185=(cj5*r00);
IkReal x1186=((0.03868)*sj0);
IkReal x1187=(sj0*sj4);
IkReal x1188=((0.39225)*sj3);
IkReal x1189=((0.39225)*cj5);
IkReal x1190=(cj0*sj4);
IkReal x1191=(cj5*r10);
IkReal x1192=(r11*sj5);
IkReal x1193=((0.39225)*r22);
IkReal x1194=((1.0)*sj0);
IkReal x1195=((0.03868)*cj0);
IkReal x1196=((0.03868)*cj5);
IkReal x1197=((0.032446)*cj0);
IkReal x1198=(cj0*r21);
IkReal x1199=((0.39225)*r02);
IkReal x1200=(cj0*cj4);
IkReal x1201=(r01*sj5);
IkReal x1202=(cj3*sj4);
IkReal x1203=(r20*sj0);
IkReal x1204=(r21*sj0);
IkReal x1205=((0.39225)*r12);
IkReal x1206=(sj0*x1197);
IkReal x1207=((0.39225)*cj4*sj0);
IkReal x1208=((0.03868)*r21*sj5);
IkReal x1209=((0.425001)*x1177);
IkReal x1210=((0.425001)*x1178);
IkReal x1211=(sj0*x1177*x1181);
evalcond[0]=((((-1.0)*cj4*x1193))+((r21*sj4*x1189))+pz+(((-1.0)*x1208))+((r20*x1196))+(((-1.0)*x1210))+((r20*sj4*x1182)));
evalcond[1]=(x1206+((r11*x1189*x1190))+(((-1.0)*x1179*x1209))+((r10*x1182*x1190))+(((-1.0)*x1200*x1205))+((cj0*py))+(((-1.0)*x1192*x1195))+((x1191*x1195)));
evalcond[2]=(((cj4*sj0*x1199))+((x1186*x1201))+(((-1.0)*r00*x1182*x1187))+(((-1.0)*r01*x1187*x1189))+(((-1.0)*x1185*x1186))+(((-1.0)*x1180*x1209))+(((-1.0)*px*x1194))+(((-1.0)*x1206)));
evalcond[3]=((((-1.0)*r21*sj5*x1186))+((r00*x1182*x1183))+((cj5*r20*x1186))+((x1185*x1188))+((x1199*x1202))+((pz*sj0))+(((-1.0)*r01*sj3*x1182))+(((-1.0)*sj0*x1210))+((r01*x1183*x1189)));
evalcond[4]=(((x1178*x1181))+((r11*x1183*x1189))+((x1188*x1191))+((x1202*x1205))+(((-1.0)*x1184*x1196))+((r10*x1182*x1183))+((r21*sj5*x1195))+(((-1.0)*r11*sj3*x1182))+(((-1.0)*cj0*pz)));
evalcond[5]=(((x1182*x1183*x1184))+(((0.03868)*x1191))+(((-1.0)*sj3*x1182*x1198))+(((0.032446)*sj0))+((cj3*x1190*x1193))+((x1183*x1189*x1198))+py+(((-0.03868)*x1192))+((cj5*x1184*x1188))+(((-1.0)*x1177*x1181)));
evalcond[6]=(x1197+(((0.03868)*x1185))+(((-1.0)*x1182*x1183*x1203))+(((-1.0)*x1183*x1189*x1204))+((sj0*x1209))+px+(((-1.0)*cj3*x1187*x1193))+(((-0.03868)*x1201))+((sj3*x1182*x1204))+(((-1.0)*cj5*x1188*x1203)));
evalcond[7]=(x1211+(((0.032446)*x1179))+(((-1.0)*r10*x1182*x1187))+((x1185*x1195))+(((-1.0)*r11*x1187*x1189))+((cj4*sj0*x1205))+((cj0*px))+(((-1.0)*x1195*x1201)));
evalcond[8]=(((r00*x1182*x1190))+(((-1.0)*x1199*x1200))+x1211+((x1186*x1192))+((r01*x1189*x1190))+(((-1.0)*py*x1194))+(((-1.0)*x1186*x1191))+(((-0.032446)*x1180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1212=(sj1*sj4);
IkReal x1213=(cj5*r01);
IkReal x1214=(cj1*sj4);
IkReal x1215=(cj4*r22);
IkReal x1216=(cj4*r02);
IkReal x1217=(r00*sj5);
IkReal x1218=((1.0)*r20*sj5);
IkReal x1219=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x1213*x1214))+(((-1.0)*x1212*x1219))+(((-1.0)*x1212*x1218))+(((-1.0)*x1214*x1217))+((sj1*x1215))+((cj1*x1216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1212*x1217))+((x1212*x1213))+(((-1.0)*x1214*x1219))+(((-1.0)*x1214*x1218))+(((-1.0)*sj1*x1216))+((cj1*x1215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1213*x1214))+(((-1.0)*x1212*x1219))+(((-1.0)*x1212*x1218))+(((-1.0)*x1214*x1217))+((sj1*x1215))+((cj1*x1216))))+IKsqr((((x1212*x1217))+((x1212*x1213))+(((-1.0)*x1214*x1219))+(((-1.0)*x1214*x1218))+(((-1.0)*sj1*x1216))+((cj1*x1215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1213*x1214))+(((-1.0)*x1212*x1219))+(((-1.0)*x1212*x1218))+(((-1.0)*x1214*x1217))+((sj1*x1215))+((cj1*x1216))), (((x1212*x1217))+((x1212*x1213))+(((-1.0)*x1214*x1219))+(((-1.0)*x1214*x1218))+(((-1.0)*sj1*x1216))+((cj1*x1215))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1220=IKsin(j2);
IkReal x1221=IKcos(j2);
IkReal x1222=((1.0)*cj5);
IkReal x1223=((1.0)*cj3);
IkReal x1224=((1.0)*cj4);
IkReal x1225=(cj3*cj4);
IkReal x1226=(cj5*sj4);
IkReal x1227=(r21*sj5);
IkReal x1228=((1.0)*sj1);
IkReal x1229=(r20*sj5);
IkReal x1230=((0.03868)*cj5);
IkReal x1231=((0.39225)*sj1);
IkReal x1232=(r00*sj5);
IkReal x1233=(r01*sj5);
IkReal x1234=(cj1*x1220);
IkReal x1235=(cj1*x1221);
IkReal x1236=(x1221*x1228);
evalcond[0]=(((sj1*x1220))+x1235+((sj4*x1229))+((r21*x1226))+(((-1.0)*r22*x1224)));
evalcond[1]=(x1234+((r01*x1226))+(((-1.0)*x1236))+((sj4*x1232))+(((-1.0)*r02*x1224)));
evalcond[2]=((((-1.0)*r20*x1230))+(((0.03868)*x1227))+(((0.425001)*cj1))+((x1220*x1231))+(((-1.0)*pz))+(((0.39225)*x1235)));
evalcond[3]=((((-1.0)*r00*x1230))+(((-1.0)*x1221*x1231))+(((0.03868)*x1233))+(((-1.0)*px))+(((0.39225)*x1234))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*r22*sj4*x1223))+x1234+(((-1.0)*x1236))+((sj3*x1227))+(((-1.0)*r20*sj3*x1222))+(((-1.0)*r21*x1222*x1225))+(((-1.0)*cj4*x1223*x1229)));
evalcond[5]=((((-1.0)*x1235))+((sj3*x1233))+(((-1.0)*r01*x1222*x1225))+(((-1.0)*x1220*x1228))+(((-1.0)*r00*sj3*x1222))+(((-1.0)*r02*sj4*x1223))+(((-1.0)*cj4*x1223*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1237=(cj4*sj1);
IkReal x1238=(cj1*cj4);
IkReal x1239=(cj1*cj5*sj4);
IkReal x1240=(r00*sj4*sj5);
IkReal x1241=((1.0)*r20*sj4*sj5);
IkReal x1242=((1.0)*cj5*sj1*sj4);
if( IKabs(((((-1.0)*sj1*x1241))+((cj1*x1240))+((r01*x1239))+(((-1.0)*r21*x1242))+((r22*x1237))+(((-1.0)*r02*x1238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x1241))+((r22*x1238))+((r02*x1237))+(((-1.0)*r21*x1239))+(((-1.0)*r01*x1242))+(((-1.0)*sj1*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x1241))+((cj1*x1240))+((r01*x1239))+(((-1.0)*r21*x1242))+((r22*x1237))+(((-1.0)*r02*x1238))))+IKsqr(((((-1.0)*cj1*x1241))+((r22*x1238))+((r02*x1237))+(((-1.0)*r21*x1239))+(((-1.0)*r01*x1242))+(((-1.0)*sj1*x1240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x1241))+((cj1*x1240))+((r01*x1239))+(((-1.0)*r21*x1242))+((r22*x1237))+(((-1.0)*r02*x1238))), ((((-1.0)*cj1*x1241))+((r22*x1238))+((r02*x1237))+(((-1.0)*r21*x1239))+(((-1.0)*r01*x1242))+(((-1.0)*sj1*x1240))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1243=IKcos(j2);
IkReal x1244=IKsin(j2);
IkReal x1245=((1.0)*cj5);
IkReal x1246=((1.0)*cj3);
IkReal x1247=((1.0)*cj4);
IkReal x1248=(cj3*cj4);
IkReal x1249=(r21*sj5);
IkReal x1250=(cj5*sj4);
IkReal x1251=(r20*sj5);
IkReal x1252=((0.03868)*cj5);
IkReal x1253=(r00*sj5);
IkReal x1254=(r01*sj5);
IkReal x1255=(cj1*x1243);
IkReal x1256=(sj1*x1244);
IkReal x1257=(cj1*x1244);
IkReal x1258=(sj1*x1243);
IkReal x1259=(x1256+x1255);
evalcond[0]=(x1259+((r21*x1250))+((sj4*x1251))+(((-1.0)*r22*x1247)));
evalcond[1]=((((-1.0)*r02*x1247))+x1258+((sj4*x1253))+(((-1.0)*x1257))+((r01*x1250)));
evalcond[2]=((((0.39225)*x1256))+(((0.39225)*x1255))+(((-1.0)*r20*x1252))+(((0.03868)*x1249))+(((0.425001)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((0.39225)*x1258))+(((-0.39225)*x1257))+(((-1.0)*r00*x1252))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x1254)));
evalcond[4]=(x1259+(((-1.0)*r01*x1245*x1248))+(((-1.0)*r00*sj3*x1245))+(((-1.0)*r02*sj4*x1246))+(((-1.0)*cj4*x1246*x1253))+((sj3*x1254)));
evalcond[5]=(x1257+(((-1.0)*r21*x1245*x1248))+(((-1.0)*r22*sj4*x1246))+((sj3*x1249))+(((-1.0)*x1258))+(((-1.0)*cj4*x1246*x1251))+(((-1.0)*r20*sj3*x1245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1260=(cj4*r12);
IkReal x1261=(cj4*r22);
IkReal x1262=(cj5*sj4);
IkReal x1263=((1.0)*r21);
IkReal x1264=((1.0)*sj1);
IkReal x1265=(r10*sj4*sj5);
IkReal x1266=((1.0)*r20*sj4*sj5);
if( IKabs((((sj1*x1261))+(((-1.0)*cj1*x1260))+((cj1*r11*x1262))+((cj1*x1265))+(((-1.0)*r20*sj4*sj5*x1264))+(((-1.0)*sj1*x1262*x1263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1264*x1265))+((sj1*x1260))+(((-1.0)*cj1*x1266))+(((-1.0)*cj1*x1262*x1263))+((cj1*x1261))+(((-1.0)*r11*x1262*x1264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1261))+(((-1.0)*cj1*x1260))+((cj1*r11*x1262))+((cj1*x1265))+(((-1.0)*r20*sj4*sj5*x1264))+(((-1.0)*sj1*x1262*x1263))))+IKsqr(((((-1.0)*x1264*x1265))+((sj1*x1260))+(((-1.0)*cj1*x1266))+(((-1.0)*cj1*x1262*x1263))+((cj1*x1261))+(((-1.0)*r11*x1262*x1264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1261))+(((-1.0)*cj1*x1260))+((cj1*r11*x1262))+((cj1*x1265))+(((-1.0)*r20*sj4*sj5*x1264))+(((-1.0)*sj1*x1262*x1263))), ((((-1.0)*x1264*x1265))+((sj1*x1260))+(((-1.0)*cj1*x1266))+(((-1.0)*cj1*x1262*x1263))+((cj1*x1261))+(((-1.0)*r11*x1262*x1264))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1267=IKcos(j2);
IkReal x1268=IKsin(j2);
IkReal x1269=((1.0)*cj4);
IkReal x1270=(sj3*sj5);
IkReal x1271=(cj5*r21);
IkReal x1272=((0.03868)*sj5);
IkReal x1273=(sj4*sj5);
IkReal x1274=(cj5*r11);
IkReal x1275=((0.03868)*cj5);
IkReal x1276=(cj3*sj5);
IkReal x1277=(cj1*x1267);
IkReal x1278=(sj1*x1268);
IkReal x1279=((1.0)*cj5*sj3);
IkReal x1280=((1.0)*cj3*sj4);
IkReal x1281=(cj1*x1268);
IkReal x1282=(sj1*x1267);
IkReal x1283=(x1278+x1277);
evalcond[0]=(x1283+(((-1.0)*r22*x1269))+((sj4*x1271))+((r20*x1273)));
evalcond[1]=((((-1.0)*r12*x1269))+(((-1.0)*x1281))+x1282+((r10*x1273))+((sj4*x1274)));
evalcond[2]=(((r21*x1272))+(((0.39225)*x1277))+(((0.39225)*x1278))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1275)));
evalcond[3]=((((-0.39225)*x1281))+(((0.39225)*x1282))+((r11*x1272))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x1275)));
evalcond[4]=(x1283+((r11*x1270))+(((-1.0)*r10*x1269*x1276))+(((-1.0)*cj3*x1269*x1274))+(((-1.0)*r10*x1279))+(((-1.0)*r12*x1280)));
evalcond[5]=((((-1.0)*x1282))+x1281+((r21*x1270))+(((-1.0)*r22*x1280))+(((-1.0)*cj3*x1269*x1271))+(((-1.0)*r20*x1279))+(((-1.0)*r20*x1269*x1276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1284=(cj1*cj4);
IkReal x1285=((1.0)*sj1);
IkReal x1286=((1.0)*cj1);
IkReal x1287=(cj5*r21*sj4);
IkReal x1288=(cj5*r11*sj4);
IkReal x1289=(r10*sj4*sj5);
IkReal x1290=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*r20*sj4*sj5*x1285))+(((-1.0)*x1285*x1287))+((cj4*r22*sj1))+(((-1.0)*x1286*x1289))+(((-1.0)*x1286*x1288))+((r12*x1284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj4*sj5*x1286))+(((-1.0)*cj4*r12*x1285))+((r22*x1284))+(((-1.0)*x1286*x1287))+((sj1*x1288))+((sj1*x1289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj4*sj5*x1285))+(((-1.0)*x1285*x1287))+((cj4*r22*sj1))+(((-1.0)*x1286*x1289))+(((-1.0)*x1286*x1288))+((r12*x1284))))+IKsqr(((((-1.0)*r20*sj4*sj5*x1286))+(((-1.0)*cj4*r12*x1285))+((r22*x1284))+(((-1.0)*x1286*x1287))+((sj1*x1288))+((sj1*x1289))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*sj4*sj5*x1285))+(((-1.0)*x1285*x1287))+((cj4*r22*sj1))+(((-1.0)*x1286*x1289))+(((-1.0)*x1286*x1288))+((r12*x1284))), ((((-1.0)*r20*sj4*sj5*x1286))+(((-1.0)*cj4*r12*x1285))+((r22*x1284))+(((-1.0)*x1286*x1287))+((sj1*x1288))+((sj1*x1289))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1291=IKsin(j2);
IkReal x1292=IKcos(j2);
IkReal x1293=((1.0)*r20);
IkReal x1294=(cj5*sj3);
IkReal x1295=((1.0)*cj4);
IkReal x1296=(cj3*sj5);
IkReal x1297=(cj5*r21);
IkReal x1298=(r21*sj5);
IkReal x1299=((1.0)*sj1);
IkReal x1300=(sj4*sj5);
IkReal x1301=(cj5*r11);
IkReal x1302=((0.03868)*cj5);
IkReal x1303=((0.39225)*sj1);
IkReal x1304=(r11*sj5);
IkReal x1305=(cj1*x1291);
IkReal x1306=(cj1*x1292);
IkReal x1307=((1.0)*cj3*sj4);
IkReal x1308=(x1292*x1299);
evalcond[0]=(x1306+((sj1*x1291))+((sj4*x1297))+(((-1.0)*r22*x1295))+((r20*x1300)));
evalcond[1]=(x1305+((r10*x1300))+(((-1.0)*x1308))+(((-1.0)*r12*x1295))+((sj4*x1301)));
evalcond[2]=(((x1291*x1303))+(((0.39225)*x1306))+(((0.425001)*cj1))+(((-1.0)*r20*x1302))+(((0.03868)*x1298))+(((-1.0)*pz)));
evalcond[3]=((((0.39225)*x1305))+(((0.03868)*x1304))+(((-1.0)*py))+(((-1.0)*r10*x1302))+(((-1.0)*x1292*x1303))+(((-0.425001)*sj1)));
evalcond[4]=(x1305+((sj3*x1298))+(((-1.0)*r22*x1307))+(((-1.0)*x1308))+(((-1.0)*x1293*x1294))+(((-1.0)*cj3*x1295*x1297))+(((-1.0)*cj4*x1293*x1296)));
evalcond[5]=((((-1.0)*cj3*x1295*x1301))+(((-1.0)*x1306))+((sj3*x1304))+(((-1.0)*r10*x1294))+(((-1.0)*r12*x1307))+(((-1.0)*r10*x1295*x1296))+(((-1.0)*x1291*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1309=(cj1*cj5);
IkReal x1310=(cj4*r12);
IkReal x1311=(r20*sj5);
IkReal x1312=(r11*sj4);
IkReal x1313=(cj5*sj1);
IkReal x1314=((1.0)*cj0*sj4);
IkReal x1315=(cj0*cj4*r22);
IkReal x1316=(r10*sj4*sj5);
CheckValue<IkReal> x1317=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1317.valid){
continue;
}
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1311*x1314))+((x1309*x1312))+((cj1*x1316))+(((-1.0)*cj1*x1310))+((sj1*x1315))+(((-1.0)*r21*x1313*x1314)))),IkReal(((((-1.0)*r21*x1309*x1314))+(((-1.0)*cj1*x1311*x1314))+(((-1.0)*sj1*x1316))+((cj1*x1315))+((sj1*x1310))+(((-1.0)*x1312*x1313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1317.value)))+(x1318.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1319=IKsin(j2);
IkReal x1320=IKcos(j2);
IkReal x1321=((1.0)*r20);
IkReal x1322=(cj5*sj3);
IkReal x1323=((1.0)*cj4);
IkReal x1324=(cj3*sj5);
IkReal x1325=(cj3*cj5);
IkReal x1326=(r21*sj5);
IkReal x1327=(cj5*sj4);
IkReal x1328=(sj4*sj5);
IkReal x1329=((0.03868)*cj5);
IkReal x1330=((1.0)*sj0);
IkReal x1331=((0.425001)*sj1);
IkReal x1332=(sj3*sj5);
IkReal x1333=((0.03868)*sj5);
IkReal x1334=(cj1*x1320);
IkReal x1335=((1.0)*cj3*sj4);
IkReal x1336=(cj1*x1319);
IkReal x1337=(sj1*x1319);
IkReal x1338=((0.39225)*sj1*x1320);
IkReal x1339=((1.0)*sj1*x1320);
evalcond[0]=(x1334+x1337+(((-1.0)*r22*x1323))+((r21*x1327))+((r20*x1328)));
evalcond[1]=(((r01*x1327))+((r00*x1328))+(((-1.0)*sj1*x1320*x1330))+(((-1.0)*r02*x1323))+((sj0*x1336)));
evalcond[2]=(((cj0*sj1*x1320))+((r11*x1327))+((r10*x1328))+(((-1.0)*r12*x1323))+(((-1.0)*cj0*x1336)));
evalcond[3]=((((0.03868)*x1326))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1329))+(((0.39225)*x1334))+(((0.39225)*x1337)));
evalcond[4]=((((0.39225)*sj0*x1336))+(((-1.0)*r00*x1329))+((r01*x1333))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-1.0)*sj0*x1338))+(((-1.0)*sj0*x1331)));
evalcond[5]=((((-0.032446)*sj0))+((r11*x1333))+((cj0*x1338))+((cj0*x1331))+(((-0.39225)*cj0*x1336))+(((-1.0)*py))+(((-1.0)*r10*x1329)));
evalcond[6]=(x1336+((sj3*x1326))+(((-1.0)*r22*x1335))+(((-1.0)*r21*x1323*x1325))+(((-1.0)*x1321*x1322))+(((-1.0)*cj4*x1321*x1324))+(((-1.0)*x1339)));
evalcond[7]=((((-1.0)*r10*x1322))+((r11*x1332))+((cj0*x1337))+((cj0*x1334))+(((-1.0)*r11*x1323*x1325))+(((-1.0)*r10*x1323*x1324))+(((-1.0)*r12*x1335)));
evalcond[8]=((((-1.0)*r00*x1322))+(((-1.0)*r01*x1323*x1325))+((r01*x1332))+(((-1.0)*x1330*x1337))+(((-1.0)*x1330*x1334))+(((-1.0)*r02*x1335))+(((-1.0)*r00*x1323*x1324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1340=((1.0)*sj1);
IkReal x1341=(cj5*sj4);
IkReal x1342=(r21*sj0);
IkReal x1343=(cj4*r02);
IkReal x1344=((1.0)*cj1);
IkReal x1345=(cj4*r22*sj0);
IkReal x1346=(r00*sj4*sj5);
IkReal x1347=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1348.valid){
continue;
}
CheckValue<IkReal> x1349 = IKatan2WithCheck(IkReal((((sj1*x1345))+(((-1.0)*x1340*x1347))+(((-1.0)*r01*x1341*x1344))+((cj1*x1343))+(((-1.0)*x1340*x1341*x1342))+(((-1.0)*x1344*x1346)))),IkReal((((sj1*x1346))+((r01*sj1*x1341))+(((-1.0)*x1340*x1343))+((cj1*x1345))+(((-1.0)*x1341*x1342*x1344))+(((-1.0)*x1344*x1347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1349.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1348.value)))+(x1349.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1350=IKsin(j2);
IkReal x1351=IKcos(j2);
IkReal x1352=((1.0)*r20);
IkReal x1353=(cj5*sj3);
IkReal x1354=((1.0)*cj4);
IkReal x1355=(cj3*sj5);
IkReal x1356=(cj3*cj5);
IkReal x1357=(r21*sj5);
IkReal x1358=(cj5*sj4);
IkReal x1359=(sj4*sj5);
IkReal x1360=((0.03868)*cj5);
IkReal x1361=((1.0)*sj0);
IkReal x1362=((0.425001)*sj1);
IkReal x1363=(sj3*sj5);
IkReal x1364=((0.03868)*sj5);
IkReal x1365=(cj1*x1351);
IkReal x1366=((1.0)*cj3*sj4);
IkReal x1367=(cj1*x1350);
IkReal x1368=(sj1*x1350);
IkReal x1369=((0.39225)*sj1*x1351);
IkReal x1370=((1.0)*sj1*x1351);
evalcond[0]=(x1365+x1368+(((-1.0)*r22*x1354))+((r20*x1359))+((r21*x1358)));
evalcond[1]=(((sj0*x1367))+(((-1.0)*r02*x1354))+(((-1.0)*sj1*x1351*x1361))+((r00*x1359))+((r01*x1358)));
evalcond[2]=((((-1.0)*cj0*x1367))+(((-1.0)*r12*x1354))+((r10*x1359))+((r11*x1358))+((cj0*sj1*x1351)));
evalcond[3]=((((0.39225)*x1368))+(((0.39225)*x1365))+(((-1.0)*r20*x1360))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x1357)));
evalcond[4]=((((-1.0)*px))+(((0.39225)*sj0*x1367))+(((-1.0)*sj0*x1369))+(((-1.0)*sj0*x1362))+(((-0.032446)*cj0))+(((-1.0)*r00*x1360))+((r01*x1364)));
evalcond[5]=((((-0.032446)*sj0))+(((-1.0)*py))+((cj0*x1362))+((cj0*x1369))+((r11*x1364))+(((-0.39225)*cj0*x1367))+(((-1.0)*r10*x1360)));
evalcond[6]=(x1367+(((-1.0)*x1352*x1353))+(((-1.0)*cj4*x1352*x1355))+(((-1.0)*r22*x1366))+(((-1.0)*x1370))+(((-1.0)*r21*x1354*x1356))+((sj3*x1357)));
evalcond[7]=((((-1.0)*r12*x1366))+(((-1.0)*r10*x1354*x1355))+(((-1.0)*r10*x1353))+(((-1.0)*r11*x1354*x1356))+((cj0*x1365))+((cj0*x1368))+((r11*x1363)));
evalcond[8]=((((-1.0)*r00*x1353))+(((-1.0)*r02*x1366))+(((-1.0)*r01*x1354*x1356))+((r01*x1363))+(((-1.0)*x1361*x1368))+(((-1.0)*x1361*x1365))+(((-1.0)*r00*x1354*x1355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1371=((0.39225)*cj0);
IkReal x1372=((0.03868)*cj0);
IkReal x1373=((0.9229390048494)*sj4);
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(cj0,-2);
if(!x1374.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1374.value)*(((((-1.0)*cj4*r12*x1371))+((r10*sj4*sj5*x1371))+((cj5*r11*sj4*x1371))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1372))+((cj0*py))+((cj5*r10*x1372)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x1373))+(((-0.0910115505610575)*r21*sj5))+((cj5*r21*x1373))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1374.value)*(((((-1.0)*cj4*r12*x1371))+((r10*sj4*sj5*x1371))+((cj5*r11*sj4*x1371))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1372))+((cj0*py))+((cj5*r10*x1372))))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x1373))+(((-0.0910115505610575)*r21*sj5))+((cj5*r21*x1373))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1374.value)*(((((-1.0)*cj4*r12*x1371))+((r10*sj4*sj5*x1371))+((cj5*r11*sj4*x1371))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1372))+((cj0*py))+((cj5*r10*x1372))))), ((((2.35293564015143)*pz))+((r20*sj5*x1373))+(((-0.0910115505610575)*r21*sj5))+((cj5*r21*x1373))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1375=IKsin(j1);
IkReal x1376=IKcos(j1);
IkReal x1377=cj0*cj0;
IkReal x1378=sj0*sj0;
IkReal x1379=((0.425001)*cj0);
IkReal x1380=((0.39225)*sj5);
IkReal x1381=(cj3*cj4);
IkReal x1382=(cj0*r20);
IkReal x1383=(cj5*r00);
IkReal x1384=((0.03868)*sj0);
IkReal x1385=(sj0*sj4);
IkReal x1386=((0.39225)*sj3);
IkReal x1387=((0.39225)*cj5);
IkReal x1388=(cj0*sj4);
IkReal x1389=(cj5*r10);
IkReal x1390=(r11*sj5);
IkReal x1391=((0.39225)*r22);
IkReal x1392=((1.0)*sj0);
IkReal x1393=((0.03868)*cj0);
IkReal x1394=((0.03868)*cj5);
IkReal x1395=((0.032446)*cj0);
IkReal x1396=(cj0*r21);
IkReal x1397=((0.39225)*r02);
IkReal x1398=(cj0*cj4);
IkReal x1399=(r01*sj5);
IkReal x1400=(cj3*sj4);
IkReal x1401=(r20*sj0);
IkReal x1402=(r21*sj0);
IkReal x1403=((0.39225)*r12);
IkReal x1404=(sj0*x1395);
IkReal x1405=((0.39225)*cj4*sj0);
IkReal x1406=((0.03868)*r21*sj5);
IkReal x1407=((0.425001)*x1375);
IkReal x1408=((0.425001)*x1376);
IkReal x1409=(sj0*x1375*x1379);
evalcond[0]=(((r21*sj4*x1387))+(((-1.0)*cj4*x1391))+((r20*x1394))+(((-1.0)*x1408))+(((-1.0)*x1406))+pz+((r20*sj4*x1380)));
evalcond[1]=((((-1.0)*x1398*x1403))+((r10*x1380*x1388))+(((-1.0)*x1390*x1393))+((r11*x1387*x1388))+(((-1.0)*x1377*x1407))+x1404+((x1389*x1393))+((cj0*py)));
evalcond[2]=((((-1.0)*r01*x1385*x1387))+(((-1.0)*r00*x1380*x1385))+(((-1.0)*x1383*x1384))+(((-1.0)*x1378*x1407))+(((-1.0)*x1404))+((cj4*sj0*x1397))+(((-1.0)*px*x1392))+((x1384*x1399)));
evalcond[3]=((((-1.0)*sj0*x1408))+((r01*x1381*x1387))+((x1397*x1400))+((cj5*r20*x1384))+(((-1.0)*r21*sj5*x1384))+((r00*x1380*x1381))+((pz*sj0))+(((-1.0)*r01*sj3*x1380))+((x1383*x1386)));
evalcond[4]=(((x1376*x1379))+((r11*x1381*x1387))+(((-1.0)*x1382*x1394))+((r10*x1380*x1381))+(((-1.0)*r11*sj3*x1380))+((r21*sj5*x1393))+((x1386*x1389))+((x1400*x1403))+(((-1.0)*cj0*pz)));
evalcond[5]=(((x1381*x1387*x1396))+(((-0.03868)*x1390))+(((0.032446)*sj0))+(((-1.0)*sj3*x1380*x1396))+(((-1.0)*x1375*x1379))+((cj3*x1388*x1391))+((cj5*x1382*x1386))+py+((x1380*x1381*x1382))+(((0.03868)*x1389)));
evalcond[6]=(x1395+(((-1.0)*cj3*x1385*x1391))+((sj3*x1380*x1402))+(((-0.03868)*x1399))+(((-1.0)*cj5*x1386*x1401))+((sj0*x1407))+px+(((0.03868)*x1383))+(((-1.0)*x1381*x1387*x1402))+(((-1.0)*x1380*x1381*x1401)));
evalcond[7]=((((-1.0)*r11*x1385*x1387))+(((-1.0)*r10*x1380*x1385))+(((-1.0)*x1393*x1399))+(((0.032446)*x1377))+x1409+((cj4*sj0*x1403))+((cj0*px))+((x1383*x1393)));
evalcond[8]=((((-1.0)*x1384*x1389))+((r01*x1387*x1388))+(((-1.0)*x1397*x1398))+(((-0.032446)*x1378))+x1409+((r00*x1380*x1388))+((x1384*x1390))+(((-1.0)*py*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1410=(sj1*sj4);
IkReal x1411=(cj5*r01);
IkReal x1412=(cj1*sj4);
IkReal x1413=(cj4*r22);
IkReal x1414=(cj4*r02);
IkReal x1415=(r00*sj5);
IkReal x1416=((1.0)*r20*sj5);
IkReal x1417=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x1411*x1412))+(((-1.0)*x1410*x1416))+(((-1.0)*x1410*x1417))+((cj1*x1414))+((sj1*x1413))+(((-1.0)*x1412*x1415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1412*x1416))+(((-1.0)*x1412*x1417))+(((-1.0)*sj1*x1414))+((x1410*x1411))+((x1410*x1415))+((cj1*x1413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1411*x1412))+(((-1.0)*x1410*x1416))+(((-1.0)*x1410*x1417))+((cj1*x1414))+((sj1*x1413))+(((-1.0)*x1412*x1415))))+IKsqr(((((-1.0)*x1412*x1416))+(((-1.0)*x1412*x1417))+(((-1.0)*sj1*x1414))+((x1410*x1411))+((x1410*x1415))+((cj1*x1413))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1411*x1412))+(((-1.0)*x1410*x1416))+(((-1.0)*x1410*x1417))+((cj1*x1414))+((sj1*x1413))+(((-1.0)*x1412*x1415))), ((((-1.0)*x1412*x1416))+(((-1.0)*x1412*x1417))+(((-1.0)*sj1*x1414))+((x1410*x1411))+((x1410*x1415))+((cj1*x1413))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1418=IKsin(j2);
IkReal x1419=IKcos(j2);
IkReal x1420=((1.0)*cj5);
IkReal x1421=((1.0)*cj3);
IkReal x1422=((1.0)*cj4);
IkReal x1423=(cj3*cj4);
IkReal x1424=(cj5*sj4);
IkReal x1425=(r21*sj5);
IkReal x1426=((1.0)*sj1);
IkReal x1427=(r20*sj5);
IkReal x1428=((0.03868)*cj5);
IkReal x1429=((0.39225)*sj1);
IkReal x1430=(r00*sj5);
IkReal x1431=(r01*sj5);
IkReal x1432=(cj1*x1418);
IkReal x1433=(cj1*x1419);
IkReal x1434=(x1419*x1426);
evalcond[0]=(((r21*x1424))+((sj4*x1427))+x1433+(((-1.0)*r22*x1422))+((sj1*x1418)));
evalcond[1]=(((r01*x1424))+(((-1.0)*x1434))+x1432+(((-1.0)*r02*x1422))+((sj4*x1430)));
evalcond[2]=((((-1.0)*r20*x1428))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1433))+((x1418*x1429))+(((0.03868)*x1425)));
evalcond[3]=((((0.03868)*x1431))+(((-1.0)*px))+(((-1.0)*x1419*x1429))+(((0.39225)*x1432))+(((-0.425001)*sj1))+(((-1.0)*r00*x1428)));
evalcond[4]=((((-1.0)*x1434))+(((-1.0)*r20*sj3*x1420))+(((-1.0)*r21*x1420*x1423))+x1432+(((-1.0)*r22*sj4*x1421))+((sj3*x1425))+(((-1.0)*cj4*x1421*x1427)));
evalcond[5]=((((-1.0)*r01*x1420*x1423))+(((-1.0)*x1433))+((sj3*x1431))+(((-1.0)*x1418*x1426))+(((-1.0)*r02*sj4*x1421))+(((-1.0)*cj4*x1421*x1430))+(((-1.0)*r00*sj3*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1435=(cj4*sj1);
IkReal x1436=(cj1*cj4);
IkReal x1437=(cj1*cj5*sj4);
IkReal x1438=(r00*sj4*sj5);
IkReal x1439=((1.0)*r20*sj4*sj5);
IkReal x1440=((1.0)*cj5*sj1*sj4);
if( IKabs(((((-1.0)*r02*x1436))+(((-1.0)*r21*x1440))+((r01*x1437))+((r22*x1435))+(((-1.0)*sj1*x1439))+((cj1*x1438)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1435))+(((-1.0)*r01*x1440))+(((-1.0)*r21*x1437))+(((-1.0)*cj1*x1439))+(((-1.0)*sj1*x1438))+((r22*x1436)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1436))+(((-1.0)*r21*x1440))+((r01*x1437))+((r22*x1435))+(((-1.0)*sj1*x1439))+((cj1*x1438))))+IKsqr((((r02*x1435))+(((-1.0)*r01*x1440))+(((-1.0)*r21*x1437))+(((-1.0)*cj1*x1439))+(((-1.0)*sj1*x1438))+((r22*x1436))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x1436))+(((-1.0)*r21*x1440))+((r01*x1437))+((r22*x1435))+(((-1.0)*sj1*x1439))+((cj1*x1438))), (((r02*x1435))+(((-1.0)*r01*x1440))+(((-1.0)*r21*x1437))+(((-1.0)*cj1*x1439))+(((-1.0)*sj1*x1438))+((r22*x1436))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1441=IKcos(j2);
IkReal x1442=IKsin(j2);
IkReal x1443=((1.0)*cj5);
IkReal x1444=((1.0)*cj3);
IkReal x1445=((1.0)*cj4);
IkReal x1446=(cj3*cj4);
IkReal x1447=(r21*sj5);
IkReal x1448=(cj5*sj4);
IkReal x1449=(r20*sj5);
IkReal x1450=((0.03868)*cj5);
IkReal x1451=(r00*sj5);
IkReal x1452=(r01*sj5);
IkReal x1453=(cj1*x1441);
IkReal x1454=(sj1*x1442);
IkReal x1455=(cj1*x1442);
IkReal x1456=(sj1*x1441);
IkReal x1457=(x1454+x1453);
evalcond[0]=((((-1.0)*r22*x1445))+((sj4*x1449))+((r21*x1448))+x1457);
evalcond[1]=((((-1.0)*x1455))+x1456+((sj4*x1451))+(((-1.0)*r02*x1445))+((r01*x1448)));
evalcond[2]=((((-1.0)*r20*x1450))+(((0.03868)*x1447))+(((0.425001)*cj1))+(((0.39225)*x1453))+(((0.39225)*x1454))+(((-1.0)*pz)));
evalcond[3]=((((0.03868)*x1452))+(((-0.39225)*x1455))+(((0.39225)*x1456))+(((-1.0)*px))+(((0.425001)*sj1))+(((-1.0)*r00*x1450)));
evalcond[4]=((((-1.0)*r00*sj3*x1443))+(((-1.0)*r01*x1443*x1446))+(((-1.0)*cj4*x1444*x1451))+((sj3*x1452))+(((-1.0)*r02*sj4*x1444))+x1457);
evalcond[5]=((((-1.0)*x1456))+(((-1.0)*r22*sj4*x1444))+x1455+((sj3*x1447))+(((-1.0)*r20*sj3*x1443))+(((-1.0)*r21*x1443*x1446))+(((-1.0)*cj4*x1444*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1458=(cj4*r12);
IkReal x1459=(cj4*r22);
IkReal x1460=(cj5*sj4);
IkReal x1461=((1.0)*r21);
IkReal x1462=((1.0)*sj1);
IkReal x1463=(r10*sj4*sj5);
IkReal x1464=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*r11*x1460))+(((-1.0)*cj1*x1458))+(((-1.0)*sj1*x1460*x1461))+((cj1*x1463))+((sj1*x1459))+(((-1.0)*r20*sj4*sj5*x1462)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1459))+(((-1.0)*r11*x1460*x1462))+(((-1.0)*cj1*x1464))+(((-1.0)*cj1*x1460*x1461))+(((-1.0)*x1462*x1463))+((sj1*x1458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r11*x1460))+(((-1.0)*cj1*x1458))+(((-1.0)*sj1*x1460*x1461))+((cj1*x1463))+((sj1*x1459))+(((-1.0)*r20*sj4*sj5*x1462))))+IKsqr((((cj1*x1459))+(((-1.0)*r11*x1460*x1462))+(((-1.0)*cj1*x1464))+(((-1.0)*cj1*x1460*x1461))+(((-1.0)*x1462*x1463))+((sj1*x1458))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r11*x1460))+(((-1.0)*cj1*x1458))+(((-1.0)*sj1*x1460*x1461))+((cj1*x1463))+((sj1*x1459))+(((-1.0)*r20*sj4*sj5*x1462))), (((cj1*x1459))+(((-1.0)*r11*x1460*x1462))+(((-1.0)*cj1*x1464))+(((-1.0)*cj1*x1460*x1461))+(((-1.0)*x1462*x1463))+((sj1*x1458))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1465=IKcos(j2);
IkReal x1466=IKsin(j2);
IkReal x1467=((1.0)*cj4);
IkReal x1468=(sj3*sj5);
IkReal x1469=(cj5*r21);
IkReal x1470=((0.03868)*sj5);
IkReal x1471=(sj4*sj5);
IkReal x1472=(cj5*r11);
IkReal x1473=((0.03868)*cj5);
IkReal x1474=(cj3*sj5);
IkReal x1475=(cj1*x1465);
IkReal x1476=(sj1*x1466);
IkReal x1477=((1.0)*cj5*sj3);
IkReal x1478=((1.0)*cj3*sj4);
IkReal x1479=(cj1*x1466);
IkReal x1480=(sj1*x1465);
IkReal x1481=(x1476+x1475);
evalcond[0]=((((-1.0)*r22*x1467))+x1481+((r20*x1471))+((sj4*x1469)));
evalcond[1]=(((sj4*x1472))+((r10*x1471))+(((-1.0)*x1479))+x1480+(((-1.0)*r12*x1467)));
evalcond[2]=((((-1.0)*r20*x1473))+((r21*x1470))+(((0.39225)*x1476))+(((0.39225)*x1475))+(((0.425001)*cj1))+(((-1.0)*pz)));
evalcond[3]=(((r11*x1470))+(((-1.0)*r10*x1473))+(((-1.0)*py))+(((0.425001)*sj1))+(((-0.39225)*x1479))+(((0.39225)*x1480)));
evalcond[4]=((((-1.0)*r10*x1477))+(((-1.0)*r12*x1478))+x1481+((r11*x1468))+(((-1.0)*cj3*x1467*x1472))+(((-1.0)*r10*x1467*x1474)));
evalcond[5]=((((-1.0)*r22*x1478))+(((-1.0)*r20*x1477))+(((-1.0)*x1480))+(((-1.0)*cj3*x1467*x1469))+x1479+(((-1.0)*r20*x1467*x1474))+((r21*x1468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1482=(cj1*cj4);
IkReal x1483=((1.0)*sj1);
IkReal x1484=((1.0)*cj1);
IkReal x1485=(cj5*r21*sj4);
IkReal x1486=(cj5*r11*sj4);
IkReal x1487=(r10*sj4*sj5);
IkReal x1488=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*x1484*x1487))+(((-1.0)*x1484*x1486))+((r12*x1482))+((cj4*r22*sj1))+(((-1.0)*x1483*x1485))+(((-1.0)*r20*sj4*sj5*x1483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12*x1483))+((sj1*x1486))+((sj1*x1487))+(((-1.0)*x1484*x1485))+(((-1.0)*r20*sj4*sj5*x1484))+((r22*x1482)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1484*x1487))+(((-1.0)*x1484*x1486))+((r12*x1482))+((cj4*r22*sj1))+(((-1.0)*x1483*x1485))+(((-1.0)*r20*sj4*sj5*x1483))))+IKsqr(((((-1.0)*cj4*r12*x1483))+((sj1*x1486))+((sj1*x1487))+(((-1.0)*x1484*x1485))+(((-1.0)*r20*sj4*sj5*x1484))+((r22*x1482))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1484*x1487))+(((-1.0)*x1484*x1486))+((r12*x1482))+((cj4*r22*sj1))+(((-1.0)*x1483*x1485))+(((-1.0)*r20*sj4*sj5*x1483))), ((((-1.0)*cj4*r12*x1483))+((sj1*x1486))+((sj1*x1487))+(((-1.0)*x1484*x1485))+(((-1.0)*r20*sj4*sj5*x1484))+((r22*x1482))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1489=IKsin(j2);
IkReal x1490=IKcos(j2);
IkReal x1491=((1.0)*r20);
IkReal x1492=(cj5*sj3);
IkReal x1493=((1.0)*cj4);
IkReal x1494=(cj3*sj5);
IkReal x1495=(cj5*r21);
IkReal x1496=(r21*sj5);
IkReal x1497=((1.0)*sj1);
IkReal x1498=(sj4*sj5);
IkReal x1499=(cj5*r11);
IkReal x1500=((0.03868)*cj5);
IkReal x1501=((0.39225)*sj1);
IkReal x1502=(r11*sj5);
IkReal x1503=(cj1*x1489);
IkReal x1504=(cj1*x1490);
IkReal x1505=((1.0)*cj3*sj4);
IkReal x1506=(x1490*x1497);
evalcond[0]=(((r20*x1498))+((sj1*x1489))+x1504+((sj4*x1495))+(((-1.0)*r22*x1493)));
evalcond[1]=((((-1.0)*x1506))+((r10*x1498))+(((-1.0)*r12*x1493))+x1503+((sj4*x1499)));
evalcond[2]=((((-1.0)*r20*x1500))+(((0.03868)*x1496))+(((0.425001)*cj1))+((x1489*x1501))+(((-1.0)*pz))+(((0.39225)*x1504)));
evalcond[3]=((((-1.0)*x1490*x1501))+(((-1.0)*py))+(((0.03868)*x1502))+(((0.39225)*x1503))+(((-0.425001)*sj1))+(((-1.0)*r10*x1500)));
evalcond[4]=((((-1.0)*x1506))+((sj3*x1496))+(((-1.0)*r22*x1505))+(((-1.0)*cj3*x1493*x1495))+x1503+(((-1.0)*x1491*x1492))+(((-1.0)*cj4*x1491*x1494)));
evalcond[5]=(((sj3*x1502))+(((-1.0)*x1504))+(((-1.0)*cj3*x1493*x1499))+(((-1.0)*r10*x1492))+(((-1.0)*r10*x1493*x1494))+(((-1.0)*r12*x1505))+(((-1.0)*x1489*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1507=(cj1*cj5);
IkReal x1508=(cj4*r12);
IkReal x1509=(r20*sj5);
IkReal x1510=(r11*sj4);
IkReal x1511=(cj5*sj1);
IkReal x1512=((1.0)*cj0*sj4);
IkReal x1513=(cj0*cj4*r22);
IkReal x1514=(r10*sj4*sj5);
CheckValue<IkReal> x1515=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1515.valid){
continue;
}
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal((((x1507*x1510))+(((-1.0)*sj1*x1509*x1512))+((cj1*x1514))+((sj1*x1513))+(((-1.0)*r21*x1511*x1512))+(((-1.0)*cj1*x1508)))),IkReal(((((-1.0)*sj1*x1514))+(((-1.0)*cj1*x1509*x1512))+((cj1*x1513))+((sj1*x1508))+(((-1.0)*x1510*x1511))+(((-1.0)*r21*x1507*x1512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1515.value)))+(x1516.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1517=IKsin(j2);
IkReal x1518=IKcos(j2);
IkReal x1519=((1.0)*r20);
IkReal x1520=(cj5*sj3);
IkReal x1521=((1.0)*cj4);
IkReal x1522=(cj3*sj5);
IkReal x1523=(cj3*cj5);
IkReal x1524=(r21*sj5);
IkReal x1525=(cj5*sj4);
IkReal x1526=(sj4*sj5);
IkReal x1527=((0.03868)*cj5);
IkReal x1528=((1.0)*sj0);
IkReal x1529=((0.425001)*sj1);
IkReal x1530=(sj3*sj5);
IkReal x1531=((0.03868)*sj5);
IkReal x1532=(cj1*x1518);
IkReal x1533=((1.0)*cj3*sj4);
IkReal x1534=(cj1*x1517);
IkReal x1535=(sj1*x1517);
IkReal x1536=((0.39225)*sj1*x1518);
IkReal x1537=((1.0)*sj1*x1518);
evalcond[0]=((((-1.0)*r22*x1521))+((r20*x1526))+x1535+x1532+((r21*x1525)));
evalcond[1]=(((r00*x1526))+((sj0*x1534))+((r01*x1525))+(((-1.0)*r02*x1521))+(((-1.0)*sj1*x1518*x1528)));
evalcond[2]=((((-1.0)*r12*x1521))+((cj0*sj1*x1518))+((r10*x1526))+((r11*x1525))+(((-1.0)*cj0*x1534)));
evalcond[3]=((((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1527))+(((0.03868)*x1524))+(((0.39225)*x1535))+(((0.39225)*x1532)));
evalcond[4]=((((-1.0)*r00*x1527))+((r01*x1531))+(((-1.0)*sj0*x1536))+(((0.39225)*sj0*x1534))+(((-1.0)*sj0*x1529))+(((-1.0)*px))+(((-0.032446)*cj0)));
evalcond[5]=(((cj0*x1529))+(((-0.032446)*sj0))+(((-0.39225)*cj0*x1534))+((r11*x1531))+(((-1.0)*py))+(((-1.0)*r10*x1527))+((cj0*x1536)));
evalcond[6]=(((sj3*x1524))+(((-1.0)*r21*x1521*x1523))+(((-1.0)*x1537))+(((-1.0)*r22*x1533))+(((-1.0)*x1519*x1520))+x1534+(((-1.0)*cj4*x1519*x1522)));
evalcond[7]=((((-1.0)*r12*x1533))+(((-1.0)*r11*x1521*x1523))+((r11*x1530))+(((-1.0)*r10*x1521*x1522))+((cj0*x1535))+((cj0*x1532))+(((-1.0)*r10*x1520)));
evalcond[8]=((((-1.0)*r01*x1521*x1523))+((r01*x1530))+(((-1.0)*r00*x1520))+(((-1.0)*r02*x1533))+(((-1.0)*r00*x1521*x1522))+(((-1.0)*x1528*x1535))+(((-1.0)*x1528*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1538=((1.0)*sj1);
IkReal x1539=(cj5*sj4);
IkReal x1540=(r21*sj0);
IkReal x1541=(cj4*r02);
IkReal x1542=((1.0)*cj1);
IkReal x1543=(cj4*r22*sj0);
IkReal x1544=(r00*sj4*sj5);
IkReal x1545=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1546.valid){
continue;
}
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal((((cj1*x1541))+(((-1.0)*x1538*x1539*x1540))+(((-1.0)*r01*x1539*x1542))+((sj1*x1543))+(((-1.0)*x1542*x1544))+(((-1.0)*x1538*x1545)))),IkReal(((((-1.0)*x1539*x1540*x1542))+((cj1*x1543))+((sj1*x1544))+(((-1.0)*x1542*x1545))+((r01*sj1*x1539))+(((-1.0)*x1538*x1541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1546.value)))+(x1547.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1548=IKsin(j2);
IkReal x1549=IKcos(j2);
IkReal x1550=((1.0)*r20);
IkReal x1551=(cj5*sj3);
IkReal x1552=((1.0)*cj4);
IkReal x1553=(cj3*sj5);
IkReal x1554=(cj3*cj5);
IkReal x1555=(r21*sj5);
IkReal x1556=(cj5*sj4);
IkReal x1557=(sj4*sj5);
IkReal x1558=((0.03868)*cj5);
IkReal x1559=((1.0)*sj0);
IkReal x1560=((0.425001)*sj1);
IkReal x1561=(sj3*sj5);
IkReal x1562=((0.03868)*sj5);
IkReal x1563=(cj1*x1549);
IkReal x1564=((1.0)*cj3*sj4);
IkReal x1565=(cj1*x1548);
IkReal x1566=(sj1*x1548);
IkReal x1567=((0.39225)*sj1*x1549);
IkReal x1568=((1.0)*sj1*x1549);
evalcond[0]=((((-1.0)*r22*x1552))+x1563+x1566+((r21*x1556))+((r20*x1557)));
evalcond[1]=(((r00*x1557))+((r01*x1556))+(((-1.0)*sj1*x1549*x1559))+(((-1.0)*r02*x1552))+((sj0*x1565)));
evalcond[2]=((((-1.0)*cj0*x1565))+((cj0*sj1*x1549))+((r11*x1556))+(((-1.0)*r12*x1552))+((r10*x1557)));
evalcond[3]=((((0.39225)*x1563))+(((0.39225)*x1566))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1558))+(((0.03868)*x1555)));
evalcond[4]=((((-1.0)*px))+(((-1.0)*sj0*x1567))+(((-1.0)*sj0*x1560))+(((-0.032446)*cj0))+(((-1.0)*r00*x1558))+(((0.39225)*sj0*x1565))+((r01*x1562)));
evalcond[5]=((((-0.032446)*sj0))+(((-0.39225)*cj0*x1565))+((r11*x1562))+(((-1.0)*py))+((cj0*x1567))+((cj0*x1560))+(((-1.0)*r10*x1558)));
evalcond[6]=((((-1.0)*cj4*x1550*x1553))+(((-1.0)*r22*x1564))+x1565+(((-1.0)*x1550*x1551))+(((-1.0)*r21*x1552*x1554))+((sj3*x1555))+(((-1.0)*x1568)));
evalcond[7]=(((r11*x1561))+((cj0*x1563))+((cj0*x1566))+(((-1.0)*r10*x1551))+(((-1.0)*r12*x1564))+(((-1.0)*r10*x1552*x1553))+(((-1.0)*r11*x1552*x1554)));
evalcond[8]=((((-1.0)*x1559*x1566))+(((-1.0)*x1559*x1563))+(((-1.0)*r00*x1551))+(((-1.0)*r02*x1564))+(((-1.0)*r00*x1552*x1553))+(((-1.0)*r01*x1552*x1554))+((r01*x1561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1569=((1.0)*cj5);
IkReal x1570=(cj0*r21);
IkReal x1571=((1.0)*cj0);
CheckValue<IkReal> x1572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x1569))+(((-1.0)*r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x1572.valid){
continue;
}
CheckValue<IkReal> x1573 = IKatan2WithCheck(IkReal((((sj5*x1570))+(((-1.0)*cj0*r20*x1569)))),IkReal(((((-1.0)*r22*sj4*x1571))+(((-1.0)*cj4*x1569*x1570))+(((-1.0)*cj4*r20*sj5*x1571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1572.value)))+(x1573.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1574=IKsin(j3);
IkReal x1575=IKcos(j3);
IkReal x1576=(sj4*x1574);
IkReal x1577=(sj5*x1575);
IkReal x1578=(cj4*cj5*x1574);
IkReal x1579=(cj4*sj5*x1574);
IkReal x1580=((1.0)*cj5*x1575);
evalcond[0]=(((r20*x1579))+((r21*x1578))+((r21*x1577))+(((-1.0)*r20*x1580))+((r22*x1576)));
evalcond[1]=(cj0+(((-1.0)*r00*x1580))+((r02*x1576))+((r01*x1577))+((r01*x1578))+((r00*x1579)));
evalcond[2]=(sj0+((r12*x1576))+((r11*x1577))+((r11*x1578))+((r10*x1579))+(((-1.0)*r10*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1581=((0.9229390048494)*sj4);
IkReal x1582=((0.0910115505610575)*cj5);
IkReal x1583=((0.9229390048494)*cj4);
IkReal x1584=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+(((-1.0)*r11*x1584))+((cj5*r11*x1581))+((r10*sj5*x1581))+((r10*x1582))+(((-1.0)*r12*x1583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x1581))+((r20*x1582))+((cj5*r21*x1581))+(((-1.0)*r22*x1583))+(((-1.0)*r21*x1584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+(((-1.0)*r11*x1584))+((cj5*r11*x1581))+((r10*sj5*x1581))+((r10*x1582))+(((-1.0)*r12*x1583))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x1581))+((r20*x1582))+((cj5*r21*x1581))+(((-1.0)*r22*x1583))+(((-1.0)*r21*x1584))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+(((-1.0)*r11*x1584))+((cj5*r11*x1581))+((r10*sj5*x1581))+((r10*x1582))+(((-1.0)*r12*x1583))), ((((2.35293564015143)*pz))+((r20*sj5*x1581))+((r20*x1582))+((cj5*r21*x1581))+(((-1.0)*r22*x1583))+(((-1.0)*r21*x1584))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1585=((0.39225)*r10);
IkReal x1586=(sj4*sj5);
IkReal x1587=(cj5*sj3);
IkReal x1588=((0.39225)*r11);
IkReal x1589=(sj3*sj5);
IkReal x1590=(cj3*cj4);
IkReal x1591=((0.03868)*sj5);
IkReal x1592=((0.39225)*r21);
IkReal x1593=((0.03868)*cj5);
IkReal x1594=((0.39225)*cj4);
IkReal x1595=((0.39225)*r20);
IkReal x1596=(cj5*sj4);
IkReal x1597=(r10*x1593);
IkReal x1598=(r11*x1591);
IkReal x1599=((0.425001)*(IKsin(j1)));
IkReal x1600=(r21*x1591);
IkReal x1601=((0.425001)*(IKcos(j1)));
IkReal x1602=(r20*x1593);
IkReal x1603=((0.39225)*cj3*sj4);
IkReal x1604=(x1597+py);
IkReal x1605=(x1599+x1598);
IkReal x1606=(x1601+x1600);
evalcond[0]=((((-1.0)*x1605))+((x1588*x1596))+x1604+((x1585*x1586))+(((-1.0)*r12*x1594)));
evalcond[1]=(((x1586*x1595))+(((-1.0)*x1606))+((x1592*x1596))+x1602+pz+(((-1.0)*r22*x1594)));
evalcond[2]=(((x1587*x1595))+(((-1.0)*x1605))+x1604+((sj5*x1590*x1595))+(((-1.0)*x1589*x1592))+((r22*x1603))+((cj5*x1590*x1592)));
evalcond[3]=((((-1.0)*x1602))+x1606+((sj5*x1585*x1590))+(((-1.0)*x1588*x1589))+(((-1.0)*pz))+((r12*x1603))+((cj5*x1588*x1590))+((x1585*x1587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1607=(cj4*r12);
IkReal x1608=(cj4*r22);
IkReal x1609=(cj5*sj4);
IkReal x1610=((1.0)*r21);
IkReal x1611=((1.0)*sj1);
IkReal x1612=(r10*sj4*sj5);
IkReal x1613=((1.0)*r20*sj4*sj5);
if( IKabs((((sj1*x1608))+(((-1.0)*cj1*x1607))+(((-1.0)*r20*sj4*sj5*x1611))+((cj1*r11*x1609))+(((-1.0)*sj1*x1609*x1610))+((cj1*x1612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1608))+(((-1.0)*x1611*x1612))+((sj1*x1607))+(((-1.0)*cj1*x1609*x1610))+(((-1.0)*cj1*x1613))+(((-1.0)*r11*x1609*x1611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1608))+(((-1.0)*cj1*x1607))+(((-1.0)*r20*sj4*sj5*x1611))+((cj1*r11*x1609))+(((-1.0)*sj1*x1609*x1610))+((cj1*x1612))))+IKsqr((((cj1*x1608))+(((-1.0)*x1611*x1612))+((sj1*x1607))+(((-1.0)*cj1*x1609*x1610))+(((-1.0)*cj1*x1613))+(((-1.0)*r11*x1609*x1611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1608))+(((-1.0)*cj1*x1607))+(((-1.0)*r20*sj4*sj5*x1611))+((cj1*r11*x1609))+(((-1.0)*sj1*x1609*x1610))+((cj1*x1612))), (((cj1*x1608))+(((-1.0)*x1611*x1612))+((sj1*x1607))+(((-1.0)*cj1*x1609*x1610))+(((-1.0)*cj1*x1613))+(((-1.0)*r11*x1609*x1611))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1614=IKcos(j2);
IkReal x1615=IKsin(j2);
IkReal x1616=((1.0)*cj4);
IkReal x1617=(sj3*sj5);
IkReal x1618=(cj5*r21);
IkReal x1619=((0.03868)*sj5);
IkReal x1620=(sj4*sj5);
IkReal x1621=(cj5*r11);
IkReal x1622=((0.03868)*cj5);
IkReal x1623=(cj3*sj5);
IkReal x1624=(cj1*x1614);
IkReal x1625=(sj1*x1615);
IkReal x1626=((1.0)*cj5*sj3);
IkReal x1627=((1.0)*cj3*sj4);
IkReal x1628=(cj1*x1615);
IkReal x1629=(sj1*x1614);
IkReal x1630=(x1625+x1624);
evalcond[0]=(((r20*x1620))+x1630+(((-1.0)*r22*x1616))+((sj4*x1618)));
evalcond[1]=((((-1.0)*x1628))+(((-1.0)*r12*x1616))+x1629+((sj4*x1621))+((r10*x1620)));
evalcond[2]=((((-1.0)*r20*x1622))+((r21*x1619))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1625))+(((0.39225)*x1624)));
evalcond[3]=((((-1.0)*py))+(((-0.39225)*x1628))+(((0.425001)*sj1))+((r11*x1619))+(((-1.0)*r10*x1622))+(((0.39225)*x1629)));
evalcond[4]=((((-1.0)*r12*x1627))+x1630+((r11*x1617))+(((-1.0)*cj3*x1616*x1621))+(((-1.0)*r10*x1626))+(((-1.0)*r10*x1616*x1623)));
evalcond[5]=((((-1.0)*r20*x1626))+(((-1.0)*x1629))+((r21*x1617))+x1628+(((-1.0)*r20*x1616*x1623))+(((-1.0)*r22*x1627))+(((-1.0)*cj3*x1616*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1631=((0.9229390048494)*cj4);
IkReal x1632=((0.9229390048494)*sj4);
IkReal x1633=((0.0910115505610575)*cj5);
IkReal x1634=((0.0910115505610575)*sj5);
if( IKabs((((r11*x1634))+(((-1.0)*cj5*r11*x1632))+((r12*x1631))+(((-1.0)*r10*x1633))+(((-1.0)*r10*sj5*x1632))+(((-2.35293564015143)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-1.0)*r22*x1631))+((r20*x1633))+((cj5*r21*x1632))+(((-1.0)*r21*x1634))+((r20*sj5*x1632)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1634))+(((-1.0)*cj5*r11*x1632))+((r12*x1631))+(((-1.0)*r10*x1633))+(((-1.0)*r10*sj5*x1632))+(((-2.35293564015143)*py))))+IKsqr(((((2.35293564015143)*pz))+(((-1.0)*r22*x1631))+((r20*x1633))+((cj5*r21*x1632))+(((-1.0)*r21*x1634))+((r20*sj5*x1632))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x1634))+(((-1.0)*cj5*r11*x1632))+((r12*x1631))+(((-1.0)*r10*x1633))+(((-1.0)*r10*sj5*x1632))+(((-2.35293564015143)*py))), ((((2.35293564015143)*pz))+(((-1.0)*r22*x1631))+((r20*x1633))+((cj5*r21*x1632))+(((-1.0)*r21*x1634))+((r20*sj5*x1632))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1635=((0.39225)*r10);
IkReal x1636=(sj4*sj5);
IkReal x1637=(cj5*sj3);
IkReal x1638=((0.39225)*r11);
IkReal x1639=(sj3*sj5);
IkReal x1640=(cj3*cj4);
IkReal x1641=((0.03868)*sj5);
IkReal x1642=((0.39225)*r21);
IkReal x1643=((0.03868)*cj5);
IkReal x1644=((0.39225)*cj4);
IkReal x1645=((0.39225)*r20);
IkReal x1646=(cj5*sj4);
IkReal x1647=((0.425001)*(IKsin(j1)));
IkReal x1648=(r10*x1643);
IkReal x1649=(r11*x1641);
IkReal x1650=(r20*x1643);
IkReal x1651=(r21*x1641);
IkReal x1652=((0.425001)*(IKcos(j1)));
IkReal x1653=((0.39225)*cj3*sj4);
IkReal x1654=(x1650+pz);
IkReal x1655=(x1647+x1648);
IkReal x1656=(x1652+x1651);
evalcond[0]=(((x1636*x1645))+(((-1.0)*r22*x1644))+x1654+(((-1.0)*x1656))+((x1642*x1646)));
evalcond[1]=((((-1.0)*x1635*x1636))+x1649+((r12*x1644))+(((-1.0)*x1638*x1646))+(((-1.0)*py))+(((-1.0)*x1655)));
evalcond[2]=((((-1.0)*r22*x1653))+x1655+(((-1.0)*cj5*x1640*x1642))+(((-1.0)*x1649))+(((-1.0)*x1637*x1645))+py+((x1639*x1642))+(((-1.0)*sj5*x1640*x1645)));
evalcond[3]=(((cj5*x1638*x1640))+((r12*x1653))+x1654+(((-1.0)*x1638*x1639))+(((-1.0)*x1656))+((x1635*x1637))+((sj5*x1635*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1657=(cj1*cj4);
IkReal x1658=((1.0)*sj1);
IkReal x1659=((1.0)*cj1);
IkReal x1660=(cj5*r21*sj4);
IkReal x1661=(cj5*r11*sj4);
IkReal x1662=(r10*sj4*sj5);
IkReal x1663=((1.0)*r20*sj4*sj5);
if( IKabs((((r12*x1657))+((cj4*r22*sj1))+(((-1.0)*x1658*x1660))+(((-1.0)*r20*sj4*sj5*x1658))+(((-1.0)*x1659*x1662))+(((-1.0)*x1659*x1661)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1661))+((sj1*x1662))+((r22*x1657))+(((-1.0)*r20*sj4*sj5*x1659))+(((-1.0)*cj4*r12*x1658))+(((-1.0)*x1659*x1660)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1657))+((cj4*r22*sj1))+(((-1.0)*x1658*x1660))+(((-1.0)*r20*sj4*sj5*x1658))+(((-1.0)*x1659*x1662))+(((-1.0)*x1659*x1661))))+IKsqr((((sj1*x1661))+((sj1*x1662))+((r22*x1657))+(((-1.0)*r20*sj4*sj5*x1659))+(((-1.0)*cj4*r12*x1658))+(((-1.0)*x1659*x1660))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x1657))+((cj4*r22*sj1))+(((-1.0)*x1658*x1660))+(((-1.0)*r20*sj4*sj5*x1658))+(((-1.0)*x1659*x1662))+(((-1.0)*x1659*x1661))), (((sj1*x1661))+((sj1*x1662))+((r22*x1657))+(((-1.0)*r20*sj4*sj5*x1659))+(((-1.0)*cj4*r12*x1658))+(((-1.0)*x1659*x1660))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1664=IKsin(j2);
IkReal x1665=IKcos(j2);
IkReal x1666=((1.0)*r20);
IkReal x1667=(cj5*sj3);
IkReal x1668=((1.0)*cj4);
IkReal x1669=(cj3*sj5);
IkReal x1670=(cj5*r21);
IkReal x1671=(r21*sj5);
IkReal x1672=((1.0)*sj1);
IkReal x1673=(sj4*sj5);
IkReal x1674=(cj5*r11);
IkReal x1675=((0.03868)*cj5);
IkReal x1676=((0.39225)*sj1);
IkReal x1677=(r11*sj5);
IkReal x1678=(cj1*x1664);
IkReal x1679=(cj1*x1665);
IkReal x1680=((1.0)*cj3*sj4);
IkReal x1681=(x1665*x1672);
evalcond[0]=(((sj1*x1664))+((sj4*x1670))+x1679+(((-1.0)*r22*x1668))+((r20*x1673)));
evalcond[1]=((((-1.0)*x1681))+((sj4*x1674))+x1678+(((-1.0)*r12*x1668))+((r10*x1673)));
evalcond[2]=((((0.39225)*x1679))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x1671))+(((-1.0)*r20*x1675))+((x1664*x1676)));
evalcond[3]=((((0.39225)*x1678))+(((-1.0)*r10*x1675))+(((-1.0)*py))+(((-1.0)*x1665*x1676))+(((-0.425001)*sj1))+(((0.03868)*x1677)));
evalcond[4]=((((-1.0)*x1681))+x1678+(((-1.0)*cj3*x1668*x1670))+(((-1.0)*r22*x1680))+((sj3*x1671))+(((-1.0)*cj4*x1666*x1669))+(((-1.0)*x1666*x1667)));
evalcond[5]=((((-1.0)*r12*x1680))+(((-1.0)*cj3*x1668*x1674))+(((-1.0)*r10*x1667))+(((-1.0)*x1679))+((sj3*x1677))+(((-1.0)*x1664*x1672))+(((-1.0)*r10*x1668*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1682=((0.9229390048494)*cj4);
IkReal x1683=((0.9229390048494)*sj4);
IkReal x1684=((0.0910115505610575)*cj5);
IkReal x1685=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r01*x1683))+((r01*x1685))+((r02*x1682))+(((-1.0)*r00*sj5*x1683))+(((-2.35293564015143)*px))+(((-1.0)*r00*x1684)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x1683))+(((2.35293564015143)*pz))+((cj5*r21*x1683))+(((-1.0)*r21*x1685))+(((-1.0)*r22*x1682))+((r20*x1684)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r01*x1683))+((r01*x1685))+((r02*x1682))+(((-1.0)*r00*sj5*x1683))+(((-2.35293564015143)*px))+(((-1.0)*r00*x1684))))+IKsqr((((r20*sj5*x1683))+(((2.35293564015143)*pz))+((cj5*r21*x1683))+(((-1.0)*r21*x1685))+(((-1.0)*r22*x1682))+((r20*x1684))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r01*x1683))+((r01*x1685))+((r02*x1682))+(((-1.0)*r00*sj5*x1683))+(((-2.35293564015143)*px))+(((-1.0)*r00*x1684))), (((r20*sj5*x1683))+(((2.35293564015143)*pz))+((cj5*r21*x1683))+(((-1.0)*r21*x1685))+(((-1.0)*r22*x1682))+((r20*x1684))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1686=((0.39225)*sj3);
IkReal x1687=(cj5*r00);
IkReal x1688=((0.39225)*cj4);
IkReal x1689=(r01*sj5);
IkReal x1690=(r21*sj5);
IkReal x1691=(cj5*r20);
IkReal x1692=((0.39225)*sj4);
IkReal x1693=(r20*sj5);
IkReal x1694=(r00*sj5);
IkReal x1695=(cj5*r01);
IkReal x1696=(cj5*r21);
IkReal x1697=((0.425001)*(IKsin(j1)));
IkReal x1698=((0.03868)*x1687);
IkReal x1699=((0.03868)*x1689);
IkReal x1700=((0.03868)*x1691);
IkReal x1701=((0.03868)*x1690);
IkReal x1702=((0.425001)*(IKcos(j1)));
IkReal x1703=(x1700+pz);
IkReal x1704=(x1697+x1698);
IkReal x1705=(x1701+x1702);
evalcond[0]=(x1703+((x1692*x1696))+((x1692*x1693))+(((-1.0)*x1705))+(((-1.0)*r22*x1688)));
evalcond[1]=((((-1.0)*x1692*x1695))+(((-1.0)*x1692*x1694))+x1699+((r02*x1688))+(((-1.0)*x1704))+(((-1.0)*px)));
evalcond[2]=((((-1.0)*x1686*x1691))+(((-1.0)*x1699))+x1704+((x1686*x1690))+px+(((-1.0)*cj3*r22*x1692))+(((-1.0)*cj3*x1688*x1696))+(((-1.0)*cj3*x1688*x1693)));
evalcond[3]=((((-1.0)*x1686*x1689))+x1703+((cj3*r02*x1692))+(((-1.0)*x1705))+((x1686*x1687))+((cj3*x1688*x1695))+((cj3*x1688*x1694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1706=(sj1*sj4);
IkReal x1707=(cj5*r01);
IkReal x1708=(cj1*sj4);
IkReal x1709=(cj4*r22);
IkReal x1710=(cj4*r02);
IkReal x1711=(r00*sj5);
IkReal x1712=((1.0)*r20*sj5);
IkReal x1713=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x1708*x1711))+((cj1*x1710))+(((-1.0)*x1706*x1712))+(((-1.0)*x1706*x1713))+((sj1*x1709))+(((-1.0)*x1707*x1708)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1709))+(((-1.0)*sj1*x1710))+(((-1.0)*x1708*x1713))+(((-1.0)*x1708*x1712))+((x1706*x1707))+((x1706*x1711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1708*x1711))+((cj1*x1710))+(((-1.0)*x1706*x1712))+(((-1.0)*x1706*x1713))+((sj1*x1709))+(((-1.0)*x1707*x1708))))+IKsqr((((cj1*x1709))+(((-1.0)*sj1*x1710))+(((-1.0)*x1708*x1713))+(((-1.0)*x1708*x1712))+((x1706*x1707))+((x1706*x1711))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1708*x1711))+((cj1*x1710))+(((-1.0)*x1706*x1712))+(((-1.0)*x1706*x1713))+((sj1*x1709))+(((-1.0)*x1707*x1708))), (((cj1*x1709))+(((-1.0)*sj1*x1710))+(((-1.0)*x1708*x1713))+(((-1.0)*x1708*x1712))+((x1706*x1707))+((x1706*x1711))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1714=IKsin(j2);
IkReal x1715=IKcos(j2);
IkReal x1716=((1.0)*cj5);
IkReal x1717=((1.0)*cj3);
IkReal x1718=((1.0)*cj4);
IkReal x1719=(cj3*cj4);
IkReal x1720=(cj5*sj4);
IkReal x1721=(r21*sj5);
IkReal x1722=((1.0)*sj1);
IkReal x1723=(r20*sj5);
IkReal x1724=((0.03868)*cj5);
IkReal x1725=((0.39225)*sj1);
IkReal x1726=(r00*sj5);
IkReal x1727=(r01*sj5);
IkReal x1728=(cj1*x1714);
IkReal x1729=(cj1*x1715);
IkReal x1730=(x1715*x1722);
evalcond[0]=(x1729+((r21*x1720))+((sj4*x1723))+(((-1.0)*r22*x1718))+((sj1*x1714)));
evalcond[1]=(((r01*x1720))+x1728+(((-1.0)*r02*x1718))+((sj4*x1726))+(((-1.0)*x1730)));
evalcond[2]=((((0.03868)*x1721))+(((0.39225)*x1729))+(((0.425001)*cj1))+(((-1.0)*pz))+((x1714*x1725))+(((-1.0)*r20*x1724)));
evalcond[3]=((((-1.0)*x1715*x1725))+(((0.03868)*x1727))+(((0.39225)*x1728))+(((-1.0)*r00*x1724))+(((-1.0)*px))+(((-0.425001)*sj1)));
evalcond[4]=(((sj3*x1721))+(((-1.0)*r21*x1716*x1719))+(((-1.0)*r20*sj3*x1716))+(((-1.0)*r22*sj4*x1717))+x1728+(((-1.0)*cj4*x1717*x1723))+(((-1.0)*x1730)));
evalcond[5]=(((sj3*x1727))+(((-1.0)*r02*sj4*x1717))+(((-1.0)*r00*sj3*x1716))+(((-1.0)*r01*x1716*x1719))+(((-1.0)*x1714*x1722))+(((-1.0)*cj4*x1717*x1726))+(((-1.0)*x1729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1731=((0.9229390048494)*cj4);
IkReal x1732=((0.9229390048494)*sj4);
IkReal x1733=((0.0910115505610575)*cj5);
IkReal x1734=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+((cj5*r01*x1732))+((r00*x1733))+((r00*sj5*x1732))+(((-1.0)*r01*x1734))+(((-1.0)*r02*x1731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x1732))+((cj5*r21*x1732))+((r20*x1733))+(((-1.0)*r21*x1734))+(((-1.0)*r22*x1731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+((cj5*r01*x1732))+((r00*x1733))+((r00*sj5*x1732))+(((-1.0)*r01*x1734))+(((-1.0)*r02*x1731))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x1732))+((cj5*r21*x1732))+((r20*x1733))+(((-1.0)*r21*x1734))+(((-1.0)*r22*x1731))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+((cj5*r01*x1732))+((r00*x1733))+((r00*sj5*x1732))+(((-1.0)*r01*x1734))+(((-1.0)*r02*x1731))), ((((2.35293564015143)*pz))+((r20*sj5*x1732))+((cj5*r21*x1732))+((r20*x1733))+(((-1.0)*r21*x1734))+(((-1.0)*r22*x1731))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1735=((0.39225)*sj3);
IkReal x1736=(cj5*r00);
IkReal x1737=((0.39225)*cj4);
IkReal x1738=(r01*sj5);
IkReal x1739=(r21*sj5);
IkReal x1740=(cj5*r20);
IkReal x1741=((0.39225)*sj4);
IkReal x1742=(r20*sj5);
IkReal x1743=(r00*sj5);
IkReal x1744=(cj5*r01);
IkReal x1745=(cj5*r21);
IkReal x1746=((0.03868)*x1736);
IkReal x1747=((0.425001)*(IKsin(j1)));
IkReal x1748=((0.03868)*x1738);
IkReal x1749=((0.03868)*x1739);
IkReal x1750=((0.425001)*(IKcos(j1)));
IkReal x1751=((0.03868)*x1740);
IkReal x1752=(x1746+px);
IkReal x1753=(x1749+x1750);
IkReal x1754=(x1748+x1747);
evalcond[0]=(x1752+(((-1.0)*x1754))+((x1741*x1744))+((x1741*x1743))+(((-1.0)*r02*x1737)));
evalcond[1]=(x1751+(((-1.0)*x1753))+pz+((x1741*x1745))+((x1741*x1742))+(((-1.0)*r22*x1737)));
evalcond[2]=(x1752+((cj3*r22*x1741))+(((-1.0)*x1754))+((cj3*x1737*x1745))+((cj3*x1737*x1742))+(((-1.0)*x1735*x1739))+((x1735*x1740)));
evalcond[3]=(x1753+(((-1.0)*pz))+((x1735*x1736))+(((-1.0)*x1751))+((cj3*x1737*x1744))+((cj3*x1737*x1743))+(((-1.0)*x1735*x1738))+((cj3*r02*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1755=(cj4*sj1);
IkReal x1756=(cj1*cj4);
IkReal x1757=(cj1*cj5*sj4);
IkReal x1758=(r00*sj4*sj5);
IkReal x1759=((1.0)*r20*sj4*sj5);
IkReal x1760=((1.0)*cj5*sj1*sj4);
if( IKabs(((((-1.0)*r02*x1756))+(((-1.0)*r21*x1760))+((r22*x1755))+((cj1*x1758))+(((-1.0)*sj1*x1759))+((r01*x1757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1760))+((r22*x1756))+((r02*x1755))+(((-1.0)*sj1*x1758))+(((-1.0)*cj1*x1759))+(((-1.0)*r21*x1757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1756))+(((-1.0)*r21*x1760))+((r22*x1755))+((cj1*x1758))+(((-1.0)*sj1*x1759))+((r01*x1757))))+IKsqr(((((-1.0)*r01*x1760))+((r22*x1756))+((r02*x1755))+(((-1.0)*sj1*x1758))+(((-1.0)*cj1*x1759))+(((-1.0)*r21*x1757))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r02*x1756))+(((-1.0)*r21*x1760))+((r22*x1755))+((cj1*x1758))+(((-1.0)*sj1*x1759))+((r01*x1757))), ((((-1.0)*r01*x1760))+((r22*x1756))+((r02*x1755))+(((-1.0)*sj1*x1758))+(((-1.0)*cj1*x1759))+(((-1.0)*r21*x1757))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1761=IKcos(j2);
IkReal x1762=IKsin(j2);
IkReal x1763=((1.0)*cj5);
IkReal x1764=((1.0)*cj3);
IkReal x1765=((1.0)*cj4);
IkReal x1766=(cj3*cj4);
IkReal x1767=(r21*sj5);
IkReal x1768=(cj5*sj4);
IkReal x1769=(r20*sj5);
IkReal x1770=((0.03868)*cj5);
IkReal x1771=(r00*sj5);
IkReal x1772=(r01*sj5);
IkReal x1773=(cj1*x1761);
IkReal x1774=(sj1*x1762);
IkReal x1775=(cj1*x1762);
IkReal x1776=(sj1*x1761);
IkReal x1777=(x1774+x1773);
evalcond[0]=(((r21*x1768))+x1777+(((-1.0)*r22*x1765))+((sj4*x1769)));
evalcond[1]=(((sj4*x1771))+(((-1.0)*x1775))+x1776+(((-1.0)*r02*x1765))+((r01*x1768)));
evalcond[2]=((((0.03868)*x1767))+(((0.39225)*x1773))+(((0.39225)*x1774))+(((-1.0)*r20*x1770))+(((0.425001)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((0.03868)*x1772))+(((0.39225)*x1776))+(((-1.0)*px))+(((0.425001)*sj1))+(((-0.39225)*x1775))+(((-1.0)*r00*x1770)));
evalcond[4]=((((-1.0)*cj4*x1764*x1771))+x1777+((sj3*x1772))+(((-1.0)*r00*sj3*x1763))+(((-1.0)*r02*sj4*x1764))+(((-1.0)*r01*x1763*x1766)));
evalcond[5]=((((-1.0)*r20*sj3*x1763))+(((-1.0)*x1776))+(((-1.0)*r22*sj4*x1764))+x1775+((sj3*x1767))+(((-1.0)*cj4*x1764*x1769))+(((-1.0)*r21*x1763*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1778=(r01*sj0);
IkReal x1779=(cj5*sj4);
IkReal x1780=(sj4*sj5);
IkReal x1781=((0.39225)*sj0);
CheckValue<IkReal> x1782=IKPowWithIntegerCheck(sj0,-2);
if(!x1782.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1782.value)*(((((-0.39225)*x1778*x1779))+(((-0.03868)*cj5*r00*sj0))+(((0.03868)*sj5*x1778))+((cj4*r02*x1781))+(((-0.032446)*cj0*sj0))+(((-1.0)*r00*x1780*x1781))+(((-1.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.9229390048494)*r21*x1779))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))+(((0.9229390048494)*r20*x1780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1782.value)*(((((-0.39225)*x1778*x1779))+(((-0.03868)*cj5*r00*sj0))+(((0.03868)*sj5*x1778))+((cj4*r02*x1781))+(((-0.032446)*cj0*sj0))+(((-1.0)*r00*x1780*x1781))+(((-1.0)*px*sj0))))))+IKsqr(((((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.9229390048494)*r21*x1779))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))+(((0.9229390048494)*r20*x1780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1782.value)*(((((-0.39225)*x1778*x1779))+(((-0.03868)*cj5*r00*sj0))+(((0.03868)*sj5*x1778))+((cj4*r02*x1781))+(((-0.032446)*cj0*sj0))+(((-1.0)*r00*x1780*x1781))+(((-1.0)*px*sj0))))), ((((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.9229390048494)*r21*x1779))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))+(((0.9229390048494)*r20*x1780))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1783=IKsin(j1);
IkReal x1784=IKcos(j1);
IkReal x1785=cj0*cj0;
IkReal x1786=sj0*sj0;
IkReal x1787=((0.425001)*cj0);
IkReal x1788=((0.39225)*sj5);
IkReal x1789=(cj3*cj4);
IkReal x1790=(cj0*r20);
IkReal x1791=(cj5*r00);
IkReal x1792=((0.03868)*sj0);
IkReal x1793=(sj0*sj4);
IkReal x1794=((0.39225)*sj3);
IkReal x1795=((0.39225)*cj5);
IkReal x1796=(cj0*sj4);
IkReal x1797=(cj5*r10);
IkReal x1798=(r11*sj5);
IkReal x1799=((0.39225)*r22);
IkReal x1800=((1.0)*sj0);
IkReal x1801=((0.03868)*cj0);
IkReal x1802=((0.03868)*cj5);
IkReal x1803=((0.032446)*cj0);
IkReal x1804=(cj0*r21);
IkReal x1805=((0.39225)*r02);
IkReal x1806=(cj0*cj4);
IkReal x1807=(r01*sj5);
IkReal x1808=(cj3*sj4);
IkReal x1809=(r20*sj0);
IkReal x1810=(r21*sj0);
IkReal x1811=((0.39225)*r12);
IkReal x1812=(sj0*x1803);
IkReal x1813=((0.39225)*cj4*sj0);
IkReal x1814=((0.03868)*r21*sj5);
IkReal x1815=((0.425001)*x1783);
IkReal x1816=((0.425001)*x1784);
IkReal x1817=(sj0*x1783*x1787);
evalcond[0]=((((-1.0)*x1816))+(((-1.0)*x1814))+(((-1.0)*cj4*x1799))+((r20*sj4*x1788))+pz+((r21*sj4*x1795))+((r20*x1802)));
evalcond[1]=((((-1.0)*x1798*x1801))+(((-1.0)*x1785*x1815))+((r11*x1795*x1796))+((x1797*x1801))+((r10*x1788*x1796))+x1812+(((-1.0)*x1806*x1811))+((cj0*py)));
evalcond[2]=((((-1.0)*x1812))+((cj4*sj0*x1805))+(((-1.0)*r00*x1788*x1793))+(((-1.0)*x1786*x1815))+((x1792*x1807))+(((-1.0)*r01*x1793*x1795))+(((-1.0)*px*x1800))+(((-1.0)*x1791*x1792)));
evalcond[3]=(((r00*x1788*x1789))+(((-1.0)*r21*sj5*x1792))+((cj5*r20*x1792))+((r01*x1789*x1795))+(((-1.0)*r01*sj3*x1788))+(((-1.0)*sj0*x1816))+((pz*sj0))+((x1805*x1808))+((x1791*x1794)));
evalcond[4]=(((r11*x1789*x1795))+(((-1.0)*r11*sj3*x1788))+((r10*x1788*x1789))+((x1808*x1811))+((x1784*x1787))+((x1794*x1797))+(((-1.0)*x1790*x1802))+((r21*sj5*x1801))+(((-1.0)*cj0*pz)));
evalcond[5]=(((x1789*x1795*x1804))+(((-1.0)*x1783*x1787))+((cj3*x1796*x1799))+((x1788*x1789*x1790))+(((0.032446)*sj0))+((cj5*x1790*x1794))+(((0.03868)*x1797))+(((-0.03868)*x1798))+py+(((-1.0)*sj3*x1788*x1804)));
evalcond[6]=((((-0.03868)*x1807))+(((-1.0)*cj5*x1794*x1809))+((sj3*x1788*x1810))+(((0.03868)*x1791))+(((-1.0)*cj3*x1793*x1799))+(((-1.0)*x1788*x1789*x1809))+((sj0*x1815))+px+x1803+(((-1.0)*x1789*x1795*x1810)));
evalcond[7]=((((-1.0)*r11*x1793*x1795))+(((-1.0)*x1801*x1807))+(((0.032446)*x1785))+((cj4*sj0*x1811))+(((-1.0)*r10*x1788*x1793))+x1817+((cj0*px))+((x1791*x1801)));
evalcond[8]=((((-1.0)*x1792*x1797))+((r00*x1788*x1796))+(((-1.0)*x1805*x1806))+(((-0.032446)*x1786))+(((-1.0)*py*x1800))+((r01*x1795*x1796))+x1817+((x1792*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1818=(sj1*sj4);
IkReal x1819=(cj5*r01);
IkReal x1820=(cj1*sj4);
IkReal x1821=(cj4*r22);
IkReal x1822=(cj4*r02);
IkReal x1823=(r00*sj5);
IkReal x1824=((1.0)*r20*sj5);
IkReal x1825=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x1819*x1820))+(((-1.0)*x1820*x1823))+(((-1.0)*x1818*x1824))+(((-1.0)*x1818*x1825))+((cj1*x1822))+((sj1*x1821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1818*x1819))+((x1818*x1823))+(((-1.0)*sj1*x1822))+((cj1*x1821))+(((-1.0)*x1820*x1824))+(((-1.0)*x1820*x1825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1819*x1820))+(((-1.0)*x1820*x1823))+(((-1.0)*x1818*x1824))+(((-1.0)*x1818*x1825))+((cj1*x1822))+((sj1*x1821))))+IKsqr((((x1818*x1819))+((x1818*x1823))+(((-1.0)*sj1*x1822))+((cj1*x1821))+(((-1.0)*x1820*x1824))+(((-1.0)*x1820*x1825))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1819*x1820))+(((-1.0)*x1820*x1823))+(((-1.0)*x1818*x1824))+(((-1.0)*x1818*x1825))+((cj1*x1822))+((sj1*x1821))), (((x1818*x1819))+((x1818*x1823))+(((-1.0)*sj1*x1822))+((cj1*x1821))+(((-1.0)*x1820*x1824))+(((-1.0)*x1820*x1825))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1826=IKsin(j2);
IkReal x1827=IKcos(j2);
IkReal x1828=((1.0)*cj5);
IkReal x1829=((1.0)*cj3);
IkReal x1830=((1.0)*cj4);
IkReal x1831=(cj3*cj4);
IkReal x1832=(cj5*sj4);
IkReal x1833=(r21*sj5);
IkReal x1834=((1.0)*sj1);
IkReal x1835=(r20*sj5);
IkReal x1836=((0.03868)*cj5);
IkReal x1837=((0.39225)*sj1);
IkReal x1838=(r00*sj5);
IkReal x1839=(r01*sj5);
IkReal x1840=(cj1*x1826);
IkReal x1841=(cj1*x1827);
IkReal x1842=(x1827*x1834);
evalcond[0]=(((sj1*x1826))+((r21*x1832))+x1841+(((-1.0)*r22*x1830))+((sj4*x1835)));
evalcond[1]=(((r01*x1832))+(((-1.0)*x1842))+x1840+(((-1.0)*r02*x1830))+((sj4*x1838)));
evalcond[2]=(((x1826*x1837))+(((-1.0)*r20*x1836))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x1841))+(((0.03868)*x1833)));
evalcond[3]=((((-1.0)*r00*x1836))+(((-1.0)*px))+(((-1.0)*x1827*x1837))+(((0.39225)*x1840))+(((-0.425001)*sj1))+(((0.03868)*x1839)));
evalcond[4]=((((-1.0)*r20*sj3*x1828))+(((-1.0)*x1842))+(((-1.0)*cj4*x1829*x1835))+((sj3*x1833))+x1840+(((-1.0)*r22*sj4*x1829))+(((-1.0)*r21*x1828*x1831)));
evalcond[5]=((((-1.0)*r01*x1828*x1831))+(((-1.0)*cj4*x1829*x1838))+((sj3*x1839))+(((-1.0)*x1826*x1834))+(((-1.0)*r02*sj4*x1829))+(((-1.0)*x1841))+(((-1.0)*r00*sj3*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1843=(cj4*sj1);
IkReal x1844=(cj1*cj4);
IkReal x1845=(cj1*cj5*sj4);
IkReal x1846=(r00*sj4*sj5);
IkReal x1847=((1.0)*r20*sj4*sj5);
IkReal x1848=((1.0)*cj5*sj1*sj4);
if( IKabs((((r22*x1843))+(((-1.0)*sj1*x1847))+((cj1*x1846))+((r01*x1845))+(((-1.0)*r02*x1844))+(((-1.0)*r21*x1848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x1844))+((r02*x1843))+(((-1.0)*r01*x1848))+(((-1.0)*cj1*x1847))+(((-1.0)*sj1*x1846))+(((-1.0)*r21*x1845)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x1843))+(((-1.0)*sj1*x1847))+((cj1*x1846))+((r01*x1845))+(((-1.0)*r02*x1844))+(((-1.0)*r21*x1848))))+IKsqr((((r22*x1844))+((r02*x1843))+(((-1.0)*r01*x1848))+(((-1.0)*cj1*x1847))+(((-1.0)*sj1*x1846))+(((-1.0)*r21*x1845))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x1843))+(((-1.0)*sj1*x1847))+((cj1*x1846))+((r01*x1845))+(((-1.0)*r02*x1844))+(((-1.0)*r21*x1848))), (((r22*x1844))+((r02*x1843))+(((-1.0)*r01*x1848))+(((-1.0)*cj1*x1847))+(((-1.0)*sj1*x1846))+(((-1.0)*r21*x1845))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1849=IKcos(j2);
IkReal x1850=IKsin(j2);
IkReal x1851=((1.0)*cj5);
IkReal x1852=((1.0)*cj3);
IkReal x1853=((1.0)*cj4);
IkReal x1854=(cj3*cj4);
IkReal x1855=(r21*sj5);
IkReal x1856=(cj5*sj4);
IkReal x1857=(r20*sj5);
IkReal x1858=((0.03868)*cj5);
IkReal x1859=(r00*sj5);
IkReal x1860=(r01*sj5);
IkReal x1861=(cj1*x1849);
IkReal x1862=(sj1*x1850);
IkReal x1863=(cj1*x1850);
IkReal x1864=(sj1*x1849);
IkReal x1865=(x1861+x1862);
evalcond[0]=(((sj4*x1857))+(((-1.0)*r22*x1853))+x1865+((r21*x1856)));
evalcond[1]=(((sj4*x1859))+((r01*x1856))+(((-1.0)*r02*x1853))+x1864+(((-1.0)*x1863)));
evalcond[2]=((((0.03868)*x1855))+(((0.39225)*x1862))+(((0.39225)*x1861))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1858)));
evalcond[3]=((((0.39225)*x1864))+(((-1.0)*px))+(((0.03868)*x1860))+(((-0.39225)*x1863))+(((-1.0)*r00*x1858))+(((0.425001)*sj1)));
evalcond[4]=((((-1.0)*r01*x1851*x1854))+(((-1.0)*cj4*x1852*x1859))+(((-1.0)*r02*sj4*x1852))+x1865+((sj3*x1860))+(((-1.0)*r00*sj3*x1851)));
evalcond[5]=((((-1.0)*r20*sj3*x1851))+(((-1.0)*cj4*x1852*x1857))+x1863+(((-1.0)*r21*x1851*x1854))+((sj3*x1855))+(((-1.0)*r22*sj4*x1852))+(((-1.0)*x1864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1866=(cj4*r12);
IkReal x1867=(cj4*r22);
IkReal x1868=(cj5*sj4);
IkReal x1869=((1.0)*r21);
IkReal x1870=((1.0)*sj1);
IkReal x1871=(r10*sj4*sj5);
IkReal x1872=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*cj1*x1866))+((cj1*r11*x1868))+(((-1.0)*sj1*x1868*x1869))+((cj1*x1871))+((sj1*x1867))+(((-1.0)*r20*sj4*sj5*x1870)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1867))+(((-1.0)*r11*x1868*x1870))+(((-1.0)*x1870*x1871))+(((-1.0)*cj1*x1868*x1869))+(((-1.0)*cj1*x1872))+((sj1*x1866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x1866))+((cj1*r11*x1868))+(((-1.0)*sj1*x1868*x1869))+((cj1*x1871))+((sj1*x1867))+(((-1.0)*r20*sj4*sj5*x1870))))+IKsqr((((cj1*x1867))+(((-1.0)*r11*x1868*x1870))+(((-1.0)*x1870*x1871))+(((-1.0)*cj1*x1868*x1869))+(((-1.0)*cj1*x1872))+((sj1*x1866))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x1866))+((cj1*r11*x1868))+(((-1.0)*sj1*x1868*x1869))+((cj1*x1871))+((sj1*x1867))+(((-1.0)*r20*sj4*sj5*x1870))), (((cj1*x1867))+(((-1.0)*r11*x1868*x1870))+(((-1.0)*x1870*x1871))+(((-1.0)*cj1*x1868*x1869))+(((-1.0)*cj1*x1872))+((sj1*x1866))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1873=IKcos(j2);
IkReal x1874=IKsin(j2);
IkReal x1875=((1.0)*cj4);
IkReal x1876=(sj3*sj5);
IkReal x1877=(cj5*r21);
IkReal x1878=((0.03868)*sj5);
IkReal x1879=(sj4*sj5);
IkReal x1880=(cj5*r11);
IkReal x1881=((0.03868)*cj5);
IkReal x1882=(cj3*sj5);
IkReal x1883=(cj1*x1873);
IkReal x1884=(sj1*x1874);
IkReal x1885=((1.0)*cj5*sj3);
IkReal x1886=((1.0)*cj3*sj4);
IkReal x1887=(cj1*x1874);
IkReal x1888=(sj1*x1873);
IkReal x1889=(x1884+x1883);
evalcond[0]=((((-1.0)*r22*x1875))+((r20*x1879))+x1889+((sj4*x1877)));
evalcond[1]=(((sj4*x1880))+x1888+(((-1.0)*r12*x1875))+(((-1.0)*x1887))+((r10*x1879)));
evalcond[2]=((((0.425001)*cj1))+(((-1.0)*pz))+((r21*x1878))+(((-1.0)*r20*x1881))+(((0.39225)*x1883))+(((0.39225)*x1884)));
evalcond[3]=((((-0.39225)*x1887))+(((-1.0)*py))+(((0.425001)*sj1))+(((-1.0)*r10*x1881))+(((0.39225)*x1888))+((r11*x1878)));
evalcond[4]=((((-1.0)*cj3*x1875*x1880))+(((-1.0)*r10*x1875*x1882))+(((-1.0)*r12*x1886))+x1889+(((-1.0)*r10*x1885))+((r11*x1876)));
evalcond[5]=((((-1.0)*r22*x1886))+(((-1.0)*r20*x1875*x1882))+x1887+(((-1.0)*x1888))+((r21*x1876))+(((-1.0)*cj3*x1875*x1877))+(((-1.0)*r20*x1885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1890=(cj1*cj4);
IkReal x1891=((1.0)*sj1);
IkReal x1892=((1.0)*cj1);
IkReal x1893=(cj5*r21*sj4);
IkReal x1894=(cj5*r11*sj4);
IkReal x1895=(r10*sj4*sj5);
IkReal x1896=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*x1892*x1895))+(((-1.0)*x1892*x1894))+(((-1.0)*r20*sj4*sj5*x1891))+((cj4*r22*sj1))+(((-1.0)*x1891*x1893))+((r12*x1890)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1892*x1893))+((r22*x1890))+(((-1.0)*r20*sj4*sj5*x1892))+(((-1.0)*cj4*r12*x1891))+((sj1*x1895))+((sj1*x1894)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1892*x1895))+(((-1.0)*x1892*x1894))+(((-1.0)*r20*sj4*sj5*x1891))+((cj4*r22*sj1))+(((-1.0)*x1891*x1893))+((r12*x1890))))+IKsqr(((((-1.0)*x1892*x1893))+((r22*x1890))+(((-1.0)*r20*sj4*sj5*x1892))+(((-1.0)*cj4*r12*x1891))+((sj1*x1895))+((sj1*x1894))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1892*x1895))+(((-1.0)*x1892*x1894))+(((-1.0)*r20*sj4*sj5*x1891))+((cj4*r22*sj1))+(((-1.0)*x1891*x1893))+((r12*x1890))), ((((-1.0)*x1892*x1893))+((r22*x1890))+(((-1.0)*r20*sj4*sj5*x1892))+(((-1.0)*cj4*r12*x1891))+((sj1*x1895))+((sj1*x1894))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1897=IKsin(j2);
IkReal x1898=IKcos(j2);
IkReal x1899=((1.0)*r20);
IkReal x1900=(cj5*sj3);
IkReal x1901=((1.0)*cj4);
IkReal x1902=(cj3*sj5);
IkReal x1903=(cj5*r21);
IkReal x1904=(r21*sj5);
IkReal x1905=((1.0)*sj1);
IkReal x1906=(sj4*sj5);
IkReal x1907=(cj5*r11);
IkReal x1908=((0.03868)*cj5);
IkReal x1909=((0.39225)*sj1);
IkReal x1910=(r11*sj5);
IkReal x1911=(cj1*x1897);
IkReal x1912=(cj1*x1898);
IkReal x1913=((1.0)*cj3*sj4);
IkReal x1914=(x1898*x1905);
evalcond[0]=((((-1.0)*r22*x1901))+((sj4*x1903))+x1912+((sj1*x1897))+((r20*x1906)));
evalcond[1]=(((sj4*x1907))+x1911+(((-1.0)*r12*x1901))+(((-1.0)*x1914))+((r10*x1906)));
evalcond[2]=((((0.03868)*x1904))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1908))+(((0.39225)*x1912))+((x1897*x1909)));
evalcond[3]=((((0.03868)*x1910))+(((-1.0)*r10*x1908))+(((-1.0)*x1898*x1909))+(((-1.0)*py))+(((-0.425001)*sj1))+(((0.39225)*x1911)));
evalcond[4]=((((-1.0)*x1899*x1900))+(((-1.0)*cj3*x1901*x1903))+(((-1.0)*cj4*x1899*x1902))+(((-1.0)*r22*x1913))+x1911+(((-1.0)*x1914))+((sj3*x1904)));
evalcond[5]=((((-1.0)*cj3*x1901*x1907))+(((-1.0)*r10*x1900))+(((-1.0)*r12*x1913))+(((-1.0)*r10*x1901*x1902))+(((-1.0)*x1912))+((sj3*x1910))+(((-1.0)*x1897*x1905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1915=(cj1*cj5);
IkReal x1916=(cj4*r12);
IkReal x1917=(r20*sj5);
IkReal x1918=(r11*sj4);
IkReal x1919=(cj5*sj1);
IkReal x1920=((1.0)*cj0*sj4);
IkReal x1921=(cj0*cj4*r22);
IkReal x1922=(r10*sj4*sj5);
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x1917*x1920))+((cj1*x1922))+(((-1.0)*cj1*x1916))+(((-1.0)*r21*x1919*x1920))+((x1915*x1918))+((sj1*x1921)))),IkReal((((cj1*x1921))+(((-1.0)*x1918*x1919))+(((-1.0)*sj1*x1922))+(((-1.0)*r21*x1915*x1920))+(((-1.0)*cj1*x1917*x1920))+((sj1*x1916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1924.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1923.value)+(((1.5707963267949)*(x1924.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1925=IKsin(j2);
IkReal x1926=IKcos(j2);
IkReal x1927=((1.0)*r20);
IkReal x1928=(cj5*sj3);
IkReal x1929=((1.0)*cj4);
IkReal x1930=(cj3*sj5);
IkReal x1931=(cj3*cj5);
IkReal x1932=(r21*sj5);
IkReal x1933=(cj5*sj4);
IkReal x1934=(sj4*sj5);
IkReal x1935=((0.03868)*cj5);
IkReal x1936=((1.0)*sj0);
IkReal x1937=((0.425001)*sj1);
IkReal x1938=(sj3*sj5);
IkReal x1939=((0.03868)*sj5);
IkReal x1940=(cj1*x1926);
IkReal x1941=((1.0)*cj3*sj4);
IkReal x1942=(cj1*x1925);
IkReal x1943=(sj1*x1925);
IkReal x1944=((0.39225)*sj1*x1926);
IkReal x1945=((1.0)*sj1*x1926);
evalcond[0]=(((r21*x1933))+(((-1.0)*r22*x1929))+x1943+x1940+((r20*x1934)));
evalcond[1]=(((r00*x1934))+((r01*x1933))+((sj0*x1942))+(((-1.0)*sj1*x1926*x1936))+(((-1.0)*r02*x1929)));
evalcond[2]=((((-1.0)*r12*x1929))+(((-1.0)*cj0*x1942))+((r11*x1933))+((cj0*sj1*x1926))+((r10*x1934)));
evalcond[3]=((((0.03868)*x1932))+(((0.425001)*cj1))+(((-1.0)*r20*x1935))+(((-1.0)*pz))+(((0.39225)*x1943))+(((0.39225)*x1940)));
evalcond[4]=(((r01*x1939))+(((-1.0)*px))+(((-1.0)*sj0*x1944))+(((-0.032446)*cj0))+(((-1.0)*sj0*x1937))+(((0.39225)*sj0*x1942))+(((-1.0)*r00*x1935)));
evalcond[5]=((((-0.032446)*sj0))+((cj0*x1944))+(((-1.0)*py))+(((-0.39225)*cj0*x1942))+(((-1.0)*r10*x1935))+((cj0*x1937))+((r11*x1939)));
evalcond[6]=((((-1.0)*cj4*x1927*x1930))+(((-1.0)*r22*x1941))+(((-1.0)*x1945))+x1942+(((-1.0)*r21*x1929*x1931))+(((-1.0)*x1927*x1928))+((sj3*x1932)));
evalcond[7]=((((-1.0)*r11*x1929*x1931))+((cj0*x1940))+((cj0*x1943))+(((-1.0)*r10*x1929*x1930))+(((-1.0)*r12*x1941))+((r11*x1938))+(((-1.0)*r10*x1928)));
evalcond[8]=((((-1.0)*r00*x1929*x1930))+(((-1.0)*r01*x1929*x1931))+((r01*x1938))+(((-1.0)*r02*x1941))+(((-1.0)*x1936*x1943))+(((-1.0)*x1936*x1940))+(((-1.0)*r00*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1946=((1.0)*sj1);
IkReal x1947=(cj5*sj4);
IkReal x1948=(r21*sj0);
IkReal x1949=(cj4*r02);
IkReal x1950=((1.0)*cj1);
IkReal x1951=(cj4*r22*sj0);
IkReal x1952=(r00*sj4*sj5);
IkReal x1953=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x1954=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1954.valid){
continue;
}
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1947*x1950))+(((-1.0)*x1950*x1952))+((cj1*x1949))+((sj1*x1951))+(((-1.0)*x1946*x1953))+(((-1.0)*x1946*x1947*x1948)))),IkReal(((((-1.0)*x1947*x1948*x1950))+(((-1.0)*x1950*x1953))+((cj1*x1951))+(((-1.0)*x1946*x1949))+((sj1*x1952))+((r01*sj1*x1947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1954.value)))+(x1955.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1956=IKsin(j2);
IkReal x1957=IKcos(j2);
IkReal x1958=((1.0)*r20);
IkReal x1959=(cj5*sj3);
IkReal x1960=((1.0)*cj4);
IkReal x1961=(cj3*sj5);
IkReal x1962=(cj3*cj5);
IkReal x1963=(r21*sj5);
IkReal x1964=(cj5*sj4);
IkReal x1965=(sj4*sj5);
IkReal x1966=((0.03868)*cj5);
IkReal x1967=((1.0)*sj0);
IkReal x1968=((0.425001)*sj1);
IkReal x1969=(sj3*sj5);
IkReal x1970=((0.03868)*sj5);
IkReal x1971=(cj1*x1957);
IkReal x1972=((1.0)*cj3*sj4);
IkReal x1973=(cj1*x1956);
IkReal x1974=(sj1*x1956);
IkReal x1975=((0.39225)*sj1*x1957);
IkReal x1976=((1.0)*sj1*x1957);
evalcond[0]=(((r20*x1965))+(((-1.0)*r22*x1960))+((r21*x1964))+x1974+x1971);
evalcond[1]=((((-1.0)*r02*x1960))+((sj0*x1973))+((r00*x1965))+((r01*x1964))+(((-1.0)*sj1*x1957*x1967)));
evalcond[2]=((((-1.0)*cj0*x1973))+((r10*x1965))+((r11*x1964))+(((-1.0)*r12*x1960))+((cj0*sj1*x1957)));
evalcond[3]=((((0.03868)*x1963))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x1966))+(((0.39225)*x1971))+(((0.39225)*x1974)));
evalcond[4]=((((-1.0)*r00*x1966))+(((-1.0)*sj0*x1968))+(((-1.0)*px))+(((-1.0)*sj0*x1975))+((r01*x1970))+(((-0.032446)*cj0))+(((0.39225)*sj0*x1973)));
evalcond[5]=(((cj0*x1968))+(((-0.032446)*sj0))+((r11*x1970))+(((-1.0)*py))+(((-1.0)*r10*x1966))+(((-0.39225)*cj0*x1973))+((cj0*x1975)));
evalcond[6]=((((-1.0)*cj4*x1958*x1961))+((sj3*x1963))+(((-1.0)*x1958*x1959))+(((-1.0)*r22*x1972))+(((-1.0)*x1976))+x1973+(((-1.0)*r21*x1960*x1962)));
evalcond[7]=(((r11*x1969))+(((-1.0)*r10*x1960*x1961))+(((-1.0)*r11*x1960*x1962))+(((-1.0)*r12*x1972))+(((-1.0)*r10*x1959))+((cj0*x1974))+((cj0*x1971)));
evalcond[8]=((((-1.0)*r01*x1960*x1962))+(((-1.0)*r00*x1960*x1961))+(((-1.0)*r02*x1972))+(((-1.0)*r00*x1959))+((r01*x1969))+(((-1.0)*x1967*x1974))+(((-1.0)*x1967*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1977=((0.39225)*cj0);
IkReal x1978=((0.03868)*cj0);
IkReal x1979=((0.9229390048494)*sj4);
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(cj0,-2);
if(!x1980.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x1980.value)*((((r10*sj4*sj5*x1977))+(((-1.0)*cj4*r12*x1977))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1978))+((cj5*r10*x1978))+((cj0*py))+((cj5*r11*sj4*x1977)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((cj5*r21*x1979))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+((r20*sj5*x1979))+(((-0.9229390048494)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x1980.value)*((((r10*sj4*sj5*x1977))+(((-1.0)*cj4*r12*x1977))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1978))+((cj5*r10*x1978))+((cj0*py))+((cj5*r11*sj4*x1977))))))+IKsqr(((((2.35293564015143)*pz))+((cj5*r21*x1979))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+((r20*sj5*x1979))+(((-0.9229390048494)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x1980.value)*((((r10*sj4*sj5*x1977))+(((-1.0)*cj4*r12*x1977))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x1978))+((cj5*r10*x1978))+((cj0*py))+((cj5*r11*sj4*x1977))))), ((((2.35293564015143)*pz))+((cj5*r21*x1979))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+((r20*sj5*x1979))+(((-0.9229390048494)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1981=IKsin(j1);
IkReal x1982=IKcos(j1);
IkReal x1983=cj0*cj0;
IkReal x1984=sj0*sj0;
IkReal x1985=((0.425001)*cj0);
IkReal x1986=((0.39225)*sj5);
IkReal x1987=(cj3*cj4);
IkReal x1988=(cj0*r20);
IkReal x1989=(cj5*r00);
IkReal x1990=((0.03868)*sj0);
IkReal x1991=(sj0*sj4);
IkReal x1992=((0.39225)*sj3);
IkReal x1993=((0.39225)*cj5);
IkReal x1994=(cj0*sj4);
IkReal x1995=(cj5*r10);
IkReal x1996=(r11*sj5);
IkReal x1997=((0.39225)*r22);
IkReal x1998=((1.0)*sj0);
IkReal x1999=((0.03868)*cj0);
IkReal x2000=((0.03868)*cj5);
IkReal x2001=((0.032446)*cj0);
IkReal x2002=(cj0*r21);
IkReal x2003=((0.39225)*r02);
IkReal x2004=(cj0*cj4);
IkReal x2005=(r01*sj5);
IkReal x2006=(cj3*sj4);
IkReal x2007=(r20*sj0);
IkReal x2008=(r21*sj0);
IkReal x2009=((0.39225)*r12);
IkReal x2010=(sj0*x2001);
IkReal x2011=((0.39225)*cj4*sj0);
IkReal x2012=((0.03868)*r21*sj5);
IkReal x2013=((0.425001)*x1981);
IkReal x2014=((0.425001)*x1982);
IkReal x2015=(sj0*x1981*x1985);
evalcond[0]=((((-1.0)*x2014))+(((-1.0)*x2012))+((r21*sj4*x1993))+pz+((r20*x2000))+(((-1.0)*cj4*x1997))+((r20*sj4*x1986)));
evalcond[1]=((((-1.0)*x1983*x2013))+(((-1.0)*x1996*x1999))+(((-1.0)*x2004*x2009))+((r10*x1986*x1994))+x2010+((x1995*x1999))+((r11*x1993*x1994))+((cj0*py)));
evalcond[2]=((((-1.0)*px*x1998))+(((-1.0)*x2010))+((x1990*x2005))+(((-1.0)*r00*x1986*x1991))+(((-1.0)*x1989*x1990))+(((-1.0)*x1984*x2013))+(((-1.0)*r01*x1991*x1993))+((cj4*sj0*x2003)));
evalcond[3]=(((cj5*r20*x1990))+(((-1.0)*r21*sj5*x1990))+((r01*x1987*x1993))+((r00*x1986*x1987))+(((-1.0)*r01*sj3*x1986))+(((-1.0)*sj0*x2014))+((x1989*x1992))+((pz*sj0))+((x2003*x2006)));
evalcond[4]=(((r11*x1987*x1993))+((r10*x1986*x1987))+(((-1.0)*x1988*x2000))+((x1982*x1985))+((x2006*x2009))+((r21*sj5*x1999))+((x1992*x1995))+(((-1.0)*r11*sj3*x1986))+(((-1.0)*cj0*pz)));
evalcond[5]=((((-1.0)*x1981*x1985))+((x1987*x1993*x2002))+((x1986*x1987*x1988))+(((0.032446)*sj0))+py+((cj5*x1988*x1992))+(((0.03868)*x1995))+((cj3*x1994*x1997))+(((-0.03868)*x1996))+(((-1.0)*sj3*x1986*x2002)));
evalcond[6]=(((sj0*x2013))+x2001+(((-1.0)*x1987*x1993*x2008))+(((-0.03868)*x2005))+(((-1.0)*cj5*x1992*x2007))+(((-1.0)*x1986*x1987*x2007))+px+(((-1.0)*cj3*x1991*x1997))+(((0.03868)*x1989))+((sj3*x1986*x2008)));
evalcond[7]=((((-1.0)*r10*x1986*x1991))+x2015+(((-1.0)*r11*x1991*x1993))+((x1989*x1999))+((cj0*px))+((cj4*sj0*x2009))+(((0.032446)*x1983))+(((-1.0)*x1999*x2005)));
evalcond[8]=(((r00*x1986*x1994))+(((-1.0)*x2003*x2004))+x2015+((r01*x1993*x1994))+(((-0.032446)*x1984))+(((-1.0)*py*x1998))+(((-1.0)*x1990*x1995))+((x1990*x1996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2016=(sj1*sj4);
IkReal x2017=(cj5*r01);
IkReal x2018=(cj1*sj4);
IkReal x2019=(cj4*r22);
IkReal x2020=(cj4*r02);
IkReal x2021=(r00*sj5);
IkReal x2022=((1.0)*r20*sj5);
IkReal x2023=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x2017*x2018))+((sj1*x2019))+(((-1.0)*x2018*x2021))+(((-1.0)*x2016*x2022))+(((-1.0)*x2016*x2023))+((cj1*x2020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2019))+(((-1.0)*sj1*x2020))+((x2016*x2017))+((x2016*x2021))+(((-1.0)*x2018*x2023))+(((-1.0)*x2018*x2022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2017*x2018))+((sj1*x2019))+(((-1.0)*x2018*x2021))+(((-1.0)*x2016*x2022))+(((-1.0)*x2016*x2023))+((cj1*x2020))))+IKsqr((((cj1*x2019))+(((-1.0)*sj1*x2020))+((x2016*x2017))+((x2016*x2021))+(((-1.0)*x2018*x2023))+(((-1.0)*x2018*x2022))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2017*x2018))+((sj1*x2019))+(((-1.0)*x2018*x2021))+(((-1.0)*x2016*x2022))+(((-1.0)*x2016*x2023))+((cj1*x2020))), (((cj1*x2019))+(((-1.0)*sj1*x2020))+((x2016*x2017))+((x2016*x2021))+(((-1.0)*x2018*x2023))+(((-1.0)*x2018*x2022))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2024=IKsin(j2);
IkReal x2025=IKcos(j2);
IkReal x2026=((1.0)*cj5);
IkReal x2027=((1.0)*cj3);
IkReal x2028=((1.0)*cj4);
IkReal x2029=(cj3*cj4);
IkReal x2030=(cj5*sj4);
IkReal x2031=(r21*sj5);
IkReal x2032=((1.0)*sj1);
IkReal x2033=(r20*sj5);
IkReal x2034=((0.03868)*cj5);
IkReal x2035=((0.39225)*sj1);
IkReal x2036=(r00*sj5);
IkReal x2037=(r01*sj5);
IkReal x2038=(cj1*x2024);
IkReal x2039=(cj1*x2025);
IkReal x2040=(x2025*x2032);
evalcond[0]=(((r21*x2030))+(((-1.0)*r22*x2028))+x2039+((sj1*x2024))+((sj4*x2033)));
evalcond[1]=((((-1.0)*x2040))+((r01*x2030))+x2038+(((-1.0)*r02*x2028))+((sj4*x2036)));
evalcond[2]=(((x2024*x2035))+(((0.425001)*cj1))+(((0.39225)*x2039))+(((-1.0)*pz))+(((0.03868)*x2031))+(((-1.0)*r20*x2034)));
evalcond[3]=((((-1.0)*r00*x2034))+(((0.39225)*x2038))+(((-1.0)*px))+(((0.03868)*x2037))+(((-1.0)*x2025*x2035))+(((-0.425001)*sj1)));
evalcond[4]=(((sj3*x2031))+(((-1.0)*x2040))+x2038+(((-1.0)*r20*sj3*x2026))+(((-1.0)*cj4*x2027*x2033))+(((-1.0)*r22*sj4*x2027))+(((-1.0)*r21*x2026*x2029)));
evalcond[5]=(((sj3*x2037))+(((-1.0)*x2039))+(((-1.0)*x2024*x2032))+(((-1.0)*cj4*x2027*x2036))+(((-1.0)*r02*sj4*x2027))+(((-1.0)*r00*sj3*x2026))+(((-1.0)*r01*x2026*x2029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2041=(cj4*sj1);
IkReal x2042=(cj1*cj4);
IkReal x2043=(cj1*cj5*sj4);
IkReal x2044=(r00*sj4*sj5);
IkReal x2045=((1.0)*r20*sj4*sj5);
IkReal x2046=((1.0)*cj5*sj1*sj4);
if( IKabs((((r22*x2041))+(((-1.0)*r02*x2042))+(((-1.0)*sj1*x2045))+(((-1.0)*r21*x2046))+((r01*x2043))+((cj1*x2044)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2042))+(((-1.0)*r21*x2043))+(((-1.0)*sj1*x2044))+((r02*x2041))+(((-1.0)*r01*x2046))+(((-1.0)*cj1*x2045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x2041))+(((-1.0)*r02*x2042))+(((-1.0)*sj1*x2045))+(((-1.0)*r21*x2046))+((r01*x2043))+((cj1*x2044))))+IKsqr((((r22*x2042))+(((-1.0)*r21*x2043))+(((-1.0)*sj1*x2044))+((r02*x2041))+(((-1.0)*r01*x2046))+(((-1.0)*cj1*x2045))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r22*x2041))+(((-1.0)*r02*x2042))+(((-1.0)*sj1*x2045))+(((-1.0)*r21*x2046))+((r01*x2043))+((cj1*x2044))), (((r22*x2042))+(((-1.0)*r21*x2043))+(((-1.0)*sj1*x2044))+((r02*x2041))+(((-1.0)*r01*x2046))+(((-1.0)*cj1*x2045))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2047=IKcos(j2);
IkReal x2048=IKsin(j2);
IkReal x2049=((1.0)*cj5);
IkReal x2050=((1.0)*cj3);
IkReal x2051=((1.0)*cj4);
IkReal x2052=(cj3*cj4);
IkReal x2053=(r21*sj5);
IkReal x2054=(cj5*sj4);
IkReal x2055=(r20*sj5);
IkReal x2056=((0.03868)*cj5);
IkReal x2057=(r00*sj5);
IkReal x2058=(r01*sj5);
IkReal x2059=(cj1*x2047);
IkReal x2060=(sj1*x2048);
IkReal x2061=(cj1*x2048);
IkReal x2062=(sj1*x2047);
IkReal x2063=(x2060+x2059);
evalcond[0]=(x2063+(((-1.0)*r22*x2051))+((sj4*x2055))+((r21*x2054)));
evalcond[1]=(((r01*x2054))+x2062+(((-1.0)*x2061))+(((-1.0)*r02*x2051))+((sj4*x2057)));
evalcond[2]=((((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2059))+(((0.03868)*x2053))+(((-1.0)*r20*x2056))+(((0.39225)*x2060)));
evalcond[3]=((((-1.0)*r00*x2056))+(((-1.0)*px))+(((0.425001)*sj1))+(((-0.39225)*x2061))+(((0.03868)*x2058))+(((0.39225)*x2062)));
evalcond[4]=((((-1.0)*r01*x2049*x2052))+x2063+((sj3*x2058))+(((-1.0)*cj4*x2050*x2057))+(((-1.0)*r02*sj4*x2050))+(((-1.0)*r00*sj3*x2049)));
evalcond[5]=(x2061+((sj3*x2053))+(((-1.0)*x2062))+(((-1.0)*cj4*x2050*x2055))+(((-1.0)*r22*sj4*x2050))+(((-1.0)*r21*x2049*x2052))+(((-1.0)*r20*sj3*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2064=(cj4*r12);
IkReal x2065=(cj4*r22);
IkReal x2066=(cj5*sj4);
IkReal x2067=((1.0)*r21);
IkReal x2068=((1.0)*sj1);
IkReal x2069=(r10*sj4*sj5);
IkReal x2070=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*r11*x2066))+(((-1.0)*sj1*x2066*x2067))+(((-1.0)*r20*sj4*sj5*x2068))+((sj1*x2065))+((cj1*x2069))+(((-1.0)*cj1*x2064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2066*x2067))+(((-1.0)*r11*x2066*x2068))+((sj1*x2064))+((cj1*x2065))+(((-1.0)*cj1*x2070))+(((-1.0)*x2068*x2069)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r11*x2066))+(((-1.0)*sj1*x2066*x2067))+(((-1.0)*r20*sj4*sj5*x2068))+((sj1*x2065))+((cj1*x2069))+(((-1.0)*cj1*x2064))))+IKsqr(((((-1.0)*cj1*x2066*x2067))+(((-1.0)*r11*x2066*x2068))+((sj1*x2064))+((cj1*x2065))+(((-1.0)*cj1*x2070))+(((-1.0)*x2068*x2069))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r11*x2066))+(((-1.0)*sj1*x2066*x2067))+(((-1.0)*r20*sj4*sj5*x2068))+((sj1*x2065))+((cj1*x2069))+(((-1.0)*cj1*x2064))), ((((-1.0)*cj1*x2066*x2067))+(((-1.0)*r11*x2066*x2068))+((sj1*x2064))+((cj1*x2065))+(((-1.0)*cj1*x2070))+(((-1.0)*x2068*x2069))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2071=IKcos(j2);
IkReal x2072=IKsin(j2);
IkReal x2073=((1.0)*cj4);
IkReal x2074=(sj3*sj5);
IkReal x2075=(cj5*r21);
IkReal x2076=((0.03868)*sj5);
IkReal x2077=(sj4*sj5);
IkReal x2078=(cj5*r11);
IkReal x2079=((0.03868)*cj5);
IkReal x2080=(cj3*sj5);
IkReal x2081=(cj1*x2071);
IkReal x2082=(sj1*x2072);
IkReal x2083=((1.0)*cj5*sj3);
IkReal x2084=((1.0)*cj3*sj4);
IkReal x2085=(cj1*x2072);
IkReal x2086=(sj1*x2071);
IkReal x2087=(x2082+x2081);
evalcond[0]=(x2087+(((-1.0)*r22*x2073))+((r20*x2077))+((sj4*x2075)));
evalcond[1]=((((-1.0)*x2085))+(((-1.0)*r12*x2073))+x2086+((sj4*x2078))+((r10*x2077)));
evalcond[2]=((((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2079))+(((0.39225)*x2082))+(((0.39225)*x2081))+((r21*x2076)));
evalcond[3]=((((-1.0)*r10*x2079))+(((-0.39225)*x2085))+((r11*x2076))+(((-1.0)*py))+(((0.39225)*x2086))+(((0.425001)*sj1)));
evalcond[4]=(x2087+((r11*x2074))+(((-1.0)*r10*x2073*x2080))+(((-1.0)*r10*x2083))+(((-1.0)*r12*x2084))+(((-1.0)*cj3*x2073*x2078)));
evalcond[5]=((((-1.0)*x2086))+(((-1.0)*r20*x2083))+(((-1.0)*r22*x2084))+x2085+(((-1.0)*cj3*x2073*x2075))+(((-1.0)*r20*x2073*x2080))+((r21*x2074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2088=(cj1*cj4);
IkReal x2089=((1.0)*sj1);
IkReal x2090=((1.0)*cj1);
IkReal x2091=(cj5*r21*sj4);
IkReal x2092=(cj5*r11*sj4);
IkReal x2093=(r10*sj4*sj5);
IkReal x2094=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*x2090*x2093))+(((-1.0)*x2090*x2092))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x2089))+(((-1.0)*x2089*x2091))+((r12*x2088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2090*x2091))+((sj1*x2092))+((sj1*x2093))+(((-1.0)*cj4*r12*x2089))+(((-1.0)*r20*sj4*sj5*x2090))+((r22*x2088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2090*x2093))+(((-1.0)*x2090*x2092))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x2089))+(((-1.0)*x2089*x2091))+((r12*x2088))))+IKsqr(((((-1.0)*x2090*x2091))+((sj1*x2092))+((sj1*x2093))+(((-1.0)*cj4*r12*x2089))+(((-1.0)*r20*sj4*sj5*x2090))+((r22*x2088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2090*x2093))+(((-1.0)*x2090*x2092))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x2089))+(((-1.0)*x2089*x2091))+((r12*x2088))), ((((-1.0)*x2090*x2091))+((sj1*x2092))+((sj1*x2093))+(((-1.0)*cj4*r12*x2089))+(((-1.0)*r20*sj4*sj5*x2090))+((r22*x2088))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2095=IKsin(j2);
IkReal x2096=IKcos(j2);
IkReal x2097=((1.0)*r20);
IkReal x2098=(cj5*sj3);
IkReal x2099=((1.0)*cj4);
IkReal x2100=(cj3*sj5);
IkReal x2101=(cj5*r21);
IkReal x2102=(r21*sj5);
IkReal x2103=((1.0)*sj1);
IkReal x2104=(sj4*sj5);
IkReal x2105=(cj5*r11);
IkReal x2106=((0.03868)*cj5);
IkReal x2107=((0.39225)*sj1);
IkReal x2108=(r11*sj5);
IkReal x2109=(cj1*x2095);
IkReal x2110=(cj1*x2096);
IkReal x2111=((1.0)*cj3*sj4);
IkReal x2112=(x2096*x2103);
evalcond[0]=(((r20*x2104))+((sj1*x2095))+((sj4*x2101))+x2110+(((-1.0)*r22*x2099)));
evalcond[1]=(((sj4*x2105))+x2109+((r10*x2104))+(((-1.0)*x2112))+(((-1.0)*r12*x2099)));
evalcond[2]=((((0.39225)*x2110))+(((0.03868)*x2102))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2106))+((x2095*x2107)));
evalcond[3]=((((-1.0)*r10*x2106))+(((-1.0)*x2096*x2107))+(((0.03868)*x2108))+(((-1.0)*py))+(((0.39225)*x2109))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*x2097*x2098))+x2109+(((-1.0)*cj4*x2097*x2100))+(((-1.0)*x2112))+(((-1.0)*cj3*x2099*x2101))+((sj3*x2102))+(((-1.0)*r22*x2111)));
evalcond[5]=((((-1.0)*r10*x2099*x2100))+(((-1.0)*x2095*x2103))+(((-1.0)*r10*x2098))+(((-1.0)*cj3*x2099*x2105))+((sj3*x2108))+(((-1.0)*r12*x2111))+(((-1.0)*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2113=(cj1*cj5);
IkReal x2114=(cj4*r12);
IkReal x2115=(r20*sj5);
IkReal x2116=(r11*sj4);
IkReal x2117=(cj5*sj1);
IkReal x2118=((1.0)*cj0*sj4);
IkReal x2119=(cj0*cj4*r22);
IkReal x2120=(r10*sj4*sj5);
CheckValue<IkReal> x2121=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2121.valid){
continue;
}
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2115*x2118))+((sj1*x2119))+(((-1.0)*cj1*x2114))+((cj1*x2120))+(((-1.0)*r21*x2117*x2118))+((x2113*x2116)))),IkReal(((((-1.0)*sj1*x2120))+((sj1*x2114))+(((-1.0)*r21*x2113*x2118))+(((-1.0)*x2116*x2117))+(((-1.0)*cj1*x2115*x2118))+((cj1*x2119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2121.value)))+(x2122.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2123=IKsin(j2);
IkReal x2124=IKcos(j2);
IkReal x2125=((1.0)*r20);
IkReal x2126=(cj5*sj3);
IkReal x2127=((1.0)*cj4);
IkReal x2128=(cj3*sj5);
IkReal x2129=(cj3*cj5);
IkReal x2130=(r21*sj5);
IkReal x2131=(cj5*sj4);
IkReal x2132=(sj4*sj5);
IkReal x2133=((0.03868)*cj5);
IkReal x2134=((1.0)*sj0);
IkReal x2135=((0.425001)*sj1);
IkReal x2136=(sj3*sj5);
IkReal x2137=((0.03868)*sj5);
IkReal x2138=(cj1*x2124);
IkReal x2139=((1.0)*cj3*sj4);
IkReal x2140=(cj1*x2123);
IkReal x2141=(sj1*x2123);
IkReal x2142=((0.39225)*sj1*x2124);
IkReal x2143=((1.0)*sj1*x2124);
evalcond[0]=(((r21*x2131))+(((-1.0)*r22*x2127))+x2138+x2141+((r20*x2132)));
evalcond[1]=((((-1.0)*r02*x2127))+((r01*x2131))+((r00*x2132))+((sj0*x2140))+(((-1.0)*sj1*x2124*x2134)));
evalcond[2]=(((r11*x2131))+(((-1.0)*cj0*x2140))+((cj0*sj1*x2124))+((r10*x2132))+(((-1.0)*r12*x2127)));
evalcond[3]=((((0.03868)*x2130))+(((0.39225)*x2141))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2133))+(((0.39225)*x2138)));
evalcond[4]=((((-1.0)*sj0*x2135))+(((-1.0)*r00*x2133))+((r01*x2137))+(((-1.0)*px))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2140))+(((-1.0)*sj0*x2142)));
evalcond[5]=((((-0.032446)*sj0))+((cj0*x2135))+((r11*x2137))+((cj0*x2142))+(((-1.0)*py))+(((-0.39225)*cj0*x2140))+(((-1.0)*r10*x2133)));
evalcond[6]=((((-1.0)*r22*x2139))+(((-1.0)*x2125*x2126))+x2140+(((-1.0)*cj4*x2125*x2128))+(((-1.0)*x2143))+(((-1.0)*r21*x2127*x2129))+((sj3*x2130)));
evalcond[7]=(((cj0*x2138))+(((-1.0)*r11*x2127*x2129))+(((-1.0)*r12*x2139))+((r11*x2136))+((cj0*x2141))+(((-1.0)*r10*x2126))+(((-1.0)*r10*x2127*x2128)));
evalcond[8]=((((-1.0)*x2134*x2138))+((r01*x2136))+(((-1.0)*r01*x2127*x2129))+(((-1.0)*x2134*x2141))+(((-1.0)*r00*x2126))+(((-1.0)*r00*x2127*x2128))+(((-1.0)*r02*x2139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2144=((1.0)*sj1);
IkReal x2145=(cj5*sj4);
IkReal x2146=(r21*sj0);
IkReal x2147=(cj4*r02);
IkReal x2148=((1.0)*cj1);
IkReal x2149=(cj4*r22*sj0);
IkReal x2150=(r00*sj4*sj5);
IkReal x2151=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2152=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2152.valid){
continue;
}
CheckValue<IkReal> x2153 = IKatan2WithCheck(IkReal((((cj1*x2147))+(((-1.0)*x2144*x2145*x2146))+(((-1.0)*x2144*x2151))+(((-1.0)*r01*x2145*x2148))+(((-1.0)*x2148*x2150))+((sj1*x2149)))),IkReal(((((-1.0)*x2144*x2147))+((cj1*x2149))+(((-1.0)*x2148*x2151))+((r01*sj1*x2145))+((sj1*x2150))+(((-1.0)*x2145*x2146*x2148)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2153.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2152.value)))+(x2153.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2154=IKsin(j2);
IkReal x2155=IKcos(j2);
IkReal x2156=((1.0)*r20);
IkReal x2157=(cj5*sj3);
IkReal x2158=((1.0)*cj4);
IkReal x2159=(cj3*sj5);
IkReal x2160=(cj3*cj5);
IkReal x2161=(r21*sj5);
IkReal x2162=(cj5*sj4);
IkReal x2163=(sj4*sj5);
IkReal x2164=((0.03868)*cj5);
IkReal x2165=((1.0)*sj0);
IkReal x2166=((0.425001)*sj1);
IkReal x2167=(sj3*sj5);
IkReal x2168=((0.03868)*sj5);
IkReal x2169=(cj1*x2155);
IkReal x2170=((1.0)*cj3*sj4);
IkReal x2171=(cj1*x2154);
IkReal x2172=(sj1*x2154);
IkReal x2173=((0.39225)*sj1*x2155);
IkReal x2174=((1.0)*sj1*x2155);
evalcond[0]=(x2172+x2169+((r21*x2162))+((r20*x2163))+(((-1.0)*r22*x2158)));
evalcond[1]=(((r00*x2163))+((r01*x2162))+(((-1.0)*r02*x2158))+(((-1.0)*sj1*x2155*x2165))+((sj0*x2171)));
evalcond[2]=((((-1.0)*r12*x2158))+((r10*x2163))+(((-1.0)*cj0*x2171))+((cj0*sj1*x2155))+((r11*x2162)));
evalcond[3]=((((-1.0)*r20*x2164))+(((0.39225)*x2169))+(((0.39225)*x2172))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x2161)));
evalcond[4]=(((r01*x2168))+(((-1.0)*px))+(((-0.032446)*cj0))+(((0.39225)*sj0*x2171))+(((-1.0)*sj0*x2173))+(((-1.0)*r00*x2164))+(((-1.0)*sj0*x2166)));
evalcond[5]=((((-1.0)*r10*x2164))+(((-0.032446)*sj0))+((cj0*x2173))+((cj0*x2166))+(((-0.39225)*cj0*x2171))+(((-1.0)*py))+((r11*x2168)));
evalcond[6]=(((sj3*x2161))+(((-1.0)*r21*x2158*x2160))+x2171+(((-1.0)*cj4*x2156*x2159))+(((-1.0)*x2174))+(((-1.0)*r22*x2170))+(((-1.0)*x2156*x2157)));
evalcond[7]=(((cj0*x2172))+(((-1.0)*r11*x2158*x2160))+((cj0*x2169))+(((-1.0)*r10*x2157))+(((-1.0)*r10*x2158*x2159))+((r11*x2167))+(((-1.0)*r12*x2170)));
evalcond[8]=(((r01*x2167))+(((-1.0)*r01*x2158*x2160))+(((-1.0)*r02*x2170))+(((-1.0)*r00*x2158*x2159))+(((-1.0)*x2165*x2169))+(((-1.0)*r00*x2157))+(((-1.0)*x2165*x2172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2175=((1.0)*cj4);
IkReal x2176=(r21*sj0);
IkReal x2177=((1.0)*r20*sj0);
CheckValue<IkReal> x2178=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+(((-1.0)*r02*x2175)))),-1);
if(!x2178.valid){
continue;
}
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal((((sj5*x2176))+(((-1.0)*cj5*x2177)))),IkReal(((((-1.0)*r20*sj0*sj5*x2175))+(((-1.0)*cj5*x2175*x2176))+(((-1.0)*r22*sj0*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2178.value)))+(x2179.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2180=IKsin(j3);
IkReal x2181=IKcos(j3);
IkReal x2182=(sj4*x2180);
IkReal x2183=(sj5*x2181);
IkReal x2184=(cj4*cj5*x2180);
IkReal x2185=(cj4*sj5*x2180);
IkReal x2186=((1.0)*cj5*x2181);
evalcond[0]=(((r22*x2182))+(((-1.0)*r20*x2186))+((r20*x2185))+((r21*x2184))+((r21*x2183)));
evalcond[1]=(cj0+((r02*x2182))+((r01*x2184))+((r01*x2183))+((r00*x2185))+(((-1.0)*r00*x2186)));
evalcond[2]=(sj0+(((-1.0)*r10*x2186))+((r12*x2182))+((r11*x2183))+((r11*x2184))+((r10*x2185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2187=((0.9229390048494)*sj4);
IkReal x2188=((0.0910115505610575)*cj5);
IkReal x2189=((0.9229390048494)*cj4);
IkReal x2190=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*py))+((r10*sj5*x2187))+(((-1.0)*r12*x2189))+(((-1.0)*r11*x2190))+((cj5*r11*x2187))+((r10*x2188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj5*x2187))+(((2.35293564015143)*pz))+(((-1.0)*r21*x2190))+((r20*x2188))+((cj5*r21*x2187))+(((-1.0)*r22*x2189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*py))+((r10*sj5*x2187))+(((-1.0)*r12*x2189))+(((-1.0)*r11*x2190))+((cj5*r11*x2187))+((r10*x2188))))+IKsqr((((r20*sj5*x2187))+(((2.35293564015143)*pz))+(((-1.0)*r21*x2190))+((r20*x2188))+((cj5*r21*x2187))+(((-1.0)*r22*x2189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*py))+((r10*sj5*x2187))+(((-1.0)*r12*x2189))+(((-1.0)*r11*x2190))+((cj5*r11*x2187))+((r10*x2188))), (((r20*sj5*x2187))+(((2.35293564015143)*pz))+(((-1.0)*r21*x2190))+((r20*x2188))+((cj5*r21*x2187))+(((-1.0)*r22*x2189))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2191=((0.39225)*r10);
IkReal x2192=(sj4*sj5);
IkReal x2193=(cj5*sj3);
IkReal x2194=((0.39225)*r11);
IkReal x2195=(sj3*sj5);
IkReal x2196=(cj3*cj4);
IkReal x2197=((0.03868)*sj5);
IkReal x2198=((0.39225)*r21);
IkReal x2199=((0.03868)*cj5);
IkReal x2200=((0.39225)*cj4);
IkReal x2201=((0.39225)*r20);
IkReal x2202=(cj5*sj4);
IkReal x2203=(r10*x2199);
IkReal x2204=(r11*x2197);
IkReal x2205=((0.425001)*(IKsin(j1)));
IkReal x2206=(r21*x2197);
IkReal x2207=((0.425001)*(IKcos(j1)));
IkReal x2208=(r20*x2199);
IkReal x2209=((0.39225)*cj3*sj4);
IkReal x2210=(x2203+py);
IkReal x2211=(x2204+x2205);
IkReal x2212=(x2206+x2207);
evalcond[0]=(((x2191*x2192))+x2210+(((-1.0)*x2211))+(((-1.0)*r12*x2200))+((x2194*x2202)));
evalcond[1]=(((x2198*x2202))+x2208+(((-1.0)*x2212))+(((-1.0)*r22*x2200))+((x2192*x2201))+pz);
evalcond[2]=(((sj5*x2196*x2201))+(((-1.0)*x2195*x2198))+x2210+(((-1.0)*x2211))+((cj5*x2196*x2198))+((x2193*x2201))+((r22*x2209)));
evalcond[3]=(((x2191*x2193))+((sj5*x2191*x2196))+x2212+((cj5*x2194*x2196))+(((-1.0)*x2208))+((r12*x2209))+(((-1.0)*x2194*x2195))+(((-1.0)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2213=(cj4*r12);
IkReal x2214=(cj4*r22);
IkReal x2215=(cj5*sj4);
IkReal x2216=((1.0)*r21);
IkReal x2217=((1.0)*sj1);
IkReal x2218=(r10*sj4*sj5);
IkReal x2219=((1.0)*r20*sj4*sj5);
if( IKabs((((cj1*r11*x2215))+(((-1.0)*sj1*x2215*x2216))+((cj1*x2218))+(((-1.0)*r20*sj4*sj5*x2217))+(((-1.0)*cj1*x2213))+((sj1*x2214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x2219))+((cj1*x2214))+(((-1.0)*r11*x2215*x2217))+(((-1.0)*x2217*x2218))+(((-1.0)*cj1*x2215*x2216))+((sj1*x2213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r11*x2215))+(((-1.0)*sj1*x2215*x2216))+((cj1*x2218))+(((-1.0)*r20*sj4*sj5*x2217))+(((-1.0)*cj1*x2213))+((sj1*x2214))))+IKsqr(((((-1.0)*cj1*x2219))+((cj1*x2214))+(((-1.0)*r11*x2215*x2217))+(((-1.0)*x2217*x2218))+(((-1.0)*cj1*x2215*x2216))+((sj1*x2213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r11*x2215))+(((-1.0)*sj1*x2215*x2216))+((cj1*x2218))+(((-1.0)*r20*sj4*sj5*x2217))+(((-1.0)*cj1*x2213))+((sj1*x2214))), ((((-1.0)*cj1*x2219))+((cj1*x2214))+(((-1.0)*r11*x2215*x2217))+(((-1.0)*x2217*x2218))+(((-1.0)*cj1*x2215*x2216))+((sj1*x2213))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2220=IKcos(j2);
IkReal x2221=IKsin(j2);
IkReal x2222=((1.0)*cj4);
IkReal x2223=(sj3*sj5);
IkReal x2224=(cj5*r21);
IkReal x2225=((0.03868)*sj5);
IkReal x2226=(sj4*sj5);
IkReal x2227=(cj5*r11);
IkReal x2228=((0.03868)*cj5);
IkReal x2229=(cj3*sj5);
IkReal x2230=(cj1*x2220);
IkReal x2231=(sj1*x2221);
IkReal x2232=((1.0)*cj5*sj3);
IkReal x2233=((1.0)*cj3*sj4);
IkReal x2234=(cj1*x2221);
IkReal x2235=(sj1*x2220);
IkReal x2236=(x2231+x2230);
evalcond[0]=(x2236+((r20*x2226))+(((-1.0)*r22*x2222))+((sj4*x2224)));
evalcond[1]=(x2235+((r10*x2226))+(((-1.0)*r12*x2222))+(((-1.0)*x2234))+((sj4*x2227)));
evalcond[2]=((((-1.0)*r20*x2228))+(((0.39225)*x2231))+(((0.39225)*x2230))+(((0.425001)*cj1))+((r21*x2225))+(((-1.0)*pz)));
evalcond[3]=((((0.39225)*x2235))+(((-1.0)*r10*x2228))+(((-1.0)*py))+(((0.425001)*sj1))+(((-0.39225)*x2234))+((r11*x2225)));
evalcond[4]=((((-1.0)*r10*x2232))+x2236+(((-1.0)*r12*x2233))+(((-1.0)*cj3*x2222*x2227))+(((-1.0)*r10*x2222*x2229))+((r11*x2223)));
evalcond[5]=((((-1.0)*r20*x2232))+x2234+((r21*x2223))+(((-1.0)*r20*x2222*x2229))+(((-1.0)*cj3*x2222*x2224))+(((-1.0)*x2235))+(((-1.0)*r22*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2237=((0.9229390048494)*cj4);
IkReal x2238=((0.9229390048494)*sj4);
IkReal x2239=((0.0910115505610575)*cj5);
IkReal x2240=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*r10*x2239))+(((-1.0)*r10*sj5*x2238))+((r11*x2240))+(((-1.0)*cj5*r11*x2238))+(((-2.35293564015143)*py))+((r12*x2237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x2238))+((cj5*r21*x2238))+((r20*x2239))+(((-1.0)*r22*x2237))+(((-1.0)*r21*x2240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2239))+(((-1.0)*r10*sj5*x2238))+((r11*x2240))+(((-1.0)*cj5*r11*x2238))+(((-2.35293564015143)*py))+((r12*x2237))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x2238))+((cj5*r21*x2238))+((r20*x2239))+(((-1.0)*r22*x2237))+(((-1.0)*r21*x2240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x2239))+(((-1.0)*r10*sj5*x2238))+((r11*x2240))+(((-1.0)*cj5*r11*x2238))+(((-2.35293564015143)*py))+((r12*x2237))), ((((2.35293564015143)*pz))+((r20*sj5*x2238))+((cj5*r21*x2238))+((r20*x2239))+(((-1.0)*r22*x2237))+(((-1.0)*r21*x2240))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2241=((0.39225)*r10);
IkReal x2242=(sj4*sj5);
IkReal x2243=(cj5*sj3);
IkReal x2244=((0.39225)*r11);
IkReal x2245=(sj3*sj5);
IkReal x2246=(cj3*cj4);
IkReal x2247=((0.03868)*sj5);
IkReal x2248=((0.39225)*r21);
IkReal x2249=((0.03868)*cj5);
IkReal x2250=((0.39225)*cj4);
IkReal x2251=((0.39225)*r20);
IkReal x2252=(cj5*sj4);
IkReal x2253=((0.425001)*(IKsin(j1)));
IkReal x2254=(r10*x2249);
IkReal x2255=(r11*x2247);
IkReal x2256=(r20*x2249);
IkReal x2257=(r21*x2247);
IkReal x2258=((0.425001)*(IKcos(j1)));
IkReal x2259=((0.39225)*cj3*sj4);
IkReal x2260=(x2256+pz);
IkReal x2261=(x2254+x2253);
IkReal x2262=(x2258+x2257);
evalcond[0]=(x2260+(((-1.0)*r22*x2250))+(((-1.0)*x2262))+((x2248*x2252))+((x2242*x2251)));
evalcond[1]=(x2255+((r12*x2250))+(((-1.0)*x2244*x2252))+(((-1.0)*x2241*x2242))+(((-1.0)*py))+(((-1.0)*x2261)));
evalcond[2]=(x2261+(((-1.0)*r22*x2259))+(((-1.0)*sj5*x2246*x2251))+(((-1.0)*x2255))+(((-1.0)*x2243*x2251))+py+(((-1.0)*cj5*x2246*x2248))+((x2245*x2248)));
evalcond[3]=(((x2241*x2243))+((cj5*x2244*x2246))+x2260+((sj5*x2241*x2246))+((r12*x2259))+(((-1.0)*x2244*x2245))+(((-1.0)*x2262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2263=(cj1*cj4);
IkReal x2264=((1.0)*sj1);
IkReal x2265=((1.0)*cj1);
IkReal x2266=(cj5*r21*sj4);
IkReal x2267=(cj5*r11*sj4);
IkReal x2268=(r10*sj4*sj5);
IkReal x2269=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*r20*sj4*sj5*x2264))+((cj4*r22*sj1))+((r12*x2263))+(((-1.0)*x2264*x2266))+(((-1.0)*x2265*x2267))+(((-1.0)*x2265*x2268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj4*sj5*x2265))+((sj1*x2267))+((sj1*x2268))+(((-1.0)*cj4*r12*x2264))+((r22*x2263))+(((-1.0)*x2265*x2266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*sj4*sj5*x2264))+((cj4*r22*sj1))+((r12*x2263))+(((-1.0)*x2264*x2266))+(((-1.0)*x2265*x2267))+(((-1.0)*x2265*x2268))))+IKsqr(((((-1.0)*r20*sj4*sj5*x2265))+((sj1*x2267))+((sj1*x2268))+(((-1.0)*cj4*r12*x2264))+((r22*x2263))+(((-1.0)*x2265*x2266))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*sj4*sj5*x2264))+((cj4*r22*sj1))+((r12*x2263))+(((-1.0)*x2264*x2266))+(((-1.0)*x2265*x2267))+(((-1.0)*x2265*x2268))), ((((-1.0)*r20*sj4*sj5*x2265))+((sj1*x2267))+((sj1*x2268))+(((-1.0)*cj4*r12*x2264))+((r22*x2263))+(((-1.0)*x2265*x2266))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2270=IKsin(j2);
IkReal x2271=IKcos(j2);
IkReal x2272=((1.0)*r20);
IkReal x2273=(cj5*sj3);
IkReal x2274=((1.0)*cj4);
IkReal x2275=(cj3*sj5);
IkReal x2276=(cj5*r21);
IkReal x2277=(r21*sj5);
IkReal x2278=((1.0)*sj1);
IkReal x2279=(sj4*sj5);
IkReal x2280=(cj5*r11);
IkReal x2281=((0.03868)*cj5);
IkReal x2282=((0.39225)*sj1);
IkReal x2283=(r11*sj5);
IkReal x2284=(cj1*x2270);
IkReal x2285=(cj1*x2271);
IkReal x2286=((1.0)*cj3*sj4);
IkReal x2287=(x2271*x2278);
evalcond[0]=(x2285+((sj1*x2270))+((sj4*x2276))+(((-1.0)*r22*x2274))+((r20*x2279)));
evalcond[1]=(x2284+(((-1.0)*x2287))+((r10*x2279))+((sj4*x2280))+(((-1.0)*r12*x2274)));
evalcond[2]=((((0.39225)*x2285))+(((0.425001)*cj1))+(((-1.0)*pz))+((x2270*x2282))+(((-1.0)*r20*x2281))+(((0.03868)*x2277)));
evalcond[3]=((((0.39225)*x2284))+(((-1.0)*r10*x2281))+(((0.03868)*x2283))+(((-1.0)*py))+(((-1.0)*x2271*x2282))+(((-0.425001)*sj1)));
evalcond[4]=(x2284+(((-1.0)*x2287))+(((-1.0)*cj3*x2274*x2276))+((sj3*x2277))+(((-1.0)*cj4*x2272*x2275))+(((-1.0)*x2272*x2273))+(((-1.0)*r22*x2286)));
evalcond[5]=((((-1.0)*r10*x2273))+(((-1.0)*cj3*x2274*x2280))+((sj3*x2283))+(((-1.0)*r12*x2286))+(((-1.0)*x2285))+(((-1.0)*r10*x2274*x2275))+(((-1.0)*x2270*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2288=((0.9229390048494)*cj4);
IkReal x2289=((0.9229390048494)*sj4);
IkReal x2290=((0.0910115505610575)*cj5);
IkReal x2291=((0.0910115505610575)*sj5);
if( IKabs(((((-1.0)*cj5*r01*x2289))+(((-1.0)*r00*x2290))+((r01*x2291))+(((-1.0)*r00*sj5*x2289))+(((-2.35293564015143)*px))+((r02*x2288)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x2289))+((cj5*r21*x2289))+((r20*x2290))+(((-1.0)*r22*x2288))+(((-1.0)*r21*x2291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r01*x2289))+(((-1.0)*r00*x2290))+((r01*x2291))+(((-1.0)*r00*sj5*x2289))+(((-2.35293564015143)*px))+((r02*x2288))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x2289))+((cj5*r21*x2289))+((r20*x2290))+(((-1.0)*r22*x2288))+(((-1.0)*r21*x2291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r01*x2289))+(((-1.0)*r00*x2290))+((r01*x2291))+(((-1.0)*r00*sj5*x2289))+(((-2.35293564015143)*px))+((r02*x2288))), ((((2.35293564015143)*pz))+((r20*sj5*x2289))+((cj5*r21*x2289))+((r20*x2290))+(((-1.0)*r22*x2288))+(((-1.0)*r21*x2291))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2292=((0.39225)*sj3);
IkReal x2293=(cj5*r00);
IkReal x2294=((0.39225)*cj4);
IkReal x2295=(r01*sj5);
IkReal x2296=(r21*sj5);
IkReal x2297=(cj5*r20);
IkReal x2298=((0.39225)*sj4);
IkReal x2299=(r20*sj5);
IkReal x2300=(r00*sj5);
IkReal x2301=(cj5*r01);
IkReal x2302=(cj5*r21);
IkReal x2303=((0.425001)*(IKsin(j1)));
IkReal x2304=((0.03868)*x2293);
IkReal x2305=((0.03868)*x2295);
IkReal x2306=((0.03868)*x2297);
IkReal x2307=((0.03868)*x2296);
IkReal x2308=((0.425001)*(IKcos(j1)));
IkReal x2309=(x2306+pz);
IkReal x2310=(x2303+x2304);
IkReal x2311=(x2308+x2307);
evalcond[0]=(x2309+((x2298*x2302))+((x2298*x2299))+(((-1.0)*r22*x2294))+(((-1.0)*x2311)));
evalcond[1]=(x2305+((r02*x2294))+(((-1.0)*px))+(((-1.0)*x2298*x2301))+(((-1.0)*x2298*x2300))+(((-1.0)*x2310)));
evalcond[2]=((((-1.0)*cj3*x2294*x2302))+x2310+(((-1.0)*x2292*x2297))+(((-1.0)*x2305))+px+(((-1.0)*cj3*x2294*x2299))+(((-1.0)*cj3*r22*x2298))+((x2292*x2296)));
evalcond[3]=(x2309+(((-1.0)*x2292*x2295))+((cj3*x2294*x2300))+((cj3*x2294*x2301))+((cj3*r02*x2298))+((x2292*x2293))+(((-1.0)*x2311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2312=(sj1*sj4);
IkReal x2313=(cj5*r01);
IkReal x2314=(cj1*sj4);
IkReal x2315=(cj4*r22);
IkReal x2316=(cj4*r02);
IkReal x2317=(r00*sj5);
IkReal x2318=((1.0)*r20*sj5);
IkReal x2319=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x2312*x2318))+(((-1.0)*x2312*x2319))+(((-1.0)*x2314*x2317))+((cj1*x2316))+((sj1*x2315))+(((-1.0)*x2313*x2314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2312*x2313))+((x2312*x2317))+((cj1*x2315))+(((-1.0)*x2314*x2319))+(((-1.0)*x2314*x2318))+(((-1.0)*sj1*x2316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2312*x2318))+(((-1.0)*x2312*x2319))+(((-1.0)*x2314*x2317))+((cj1*x2316))+((sj1*x2315))+(((-1.0)*x2313*x2314))))+IKsqr((((x2312*x2313))+((x2312*x2317))+((cj1*x2315))+(((-1.0)*x2314*x2319))+(((-1.0)*x2314*x2318))+(((-1.0)*sj1*x2316))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2312*x2318))+(((-1.0)*x2312*x2319))+(((-1.0)*x2314*x2317))+((cj1*x2316))+((sj1*x2315))+(((-1.0)*x2313*x2314))), (((x2312*x2313))+((x2312*x2317))+((cj1*x2315))+(((-1.0)*x2314*x2319))+(((-1.0)*x2314*x2318))+(((-1.0)*sj1*x2316))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2320=IKsin(j2);
IkReal x2321=IKcos(j2);
IkReal x2322=((1.0)*cj5);
IkReal x2323=((1.0)*cj3);
IkReal x2324=((1.0)*cj4);
IkReal x2325=(cj3*cj4);
IkReal x2326=(cj5*sj4);
IkReal x2327=(r21*sj5);
IkReal x2328=((1.0)*sj1);
IkReal x2329=(r20*sj5);
IkReal x2330=((0.03868)*cj5);
IkReal x2331=((0.39225)*sj1);
IkReal x2332=(r00*sj5);
IkReal x2333=(r01*sj5);
IkReal x2334=(cj1*x2320);
IkReal x2335=(cj1*x2321);
IkReal x2336=(x2321*x2328);
evalcond[0]=((((-1.0)*r22*x2324))+x2335+((r21*x2326))+((sj1*x2320))+((sj4*x2329)));
evalcond[1]=((((-1.0)*x2336))+x2334+((sj4*x2332))+((r01*x2326))+(((-1.0)*r02*x2324)));
evalcond[2]=((((0.39225)*x2335))+(((0.425001)*cj1))+(((-1.0)*pz))+((x2320*x2331))+(((-1.0)*r20*x2330))+(((0.03868)*x2327)));
evalcond[3]=((((0.03868)*x2333))+(((-1.0)*x2321*x2331))+(((0.39225)*x2334))+(((-1.0)*px))+(((-1.0)*r00*x2330))+(((-0.425001)*sj1)));
evalcond[4]=((((-1.0)*cj4*x2323*x2329))+((sj3*x2327))+(((-1.0)*x2336))+(((-1.0)*r21*x2322*x2325))+x2334+(((-1.0)*r22*sj4*x2323))+(((-1.0)*r20*sj3*x2322)));
evalcond[5]=((((-1.0)*r00*sj3*x2322))+((sj3*x2333))+(((-1.0)*x2320*x2328))+(((-1.0)*r01*x2322*x2325))+(((-1.0)*cj4*x2323*x2332))+(((-1.0)*r02*sj4*x2323))+(((-1.0)*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2337=((0.9229390048494)*cj4);
IkReal x2338=((0.9229390048494)*sj4);
IkReal x2339=((0.0910115505610575)*cj5);
IkReal x2340=((0.0910115505610575)*sj5);
if( IKabs(((((2.35293564015143)*px))+(((-1.0)*r01*x2340))+((cj5*r01*x2338))+((r00*x2339))+(((-1.0)*r02*x2337))+((r00*sj5*x2338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+((r20*sj5*x2338))+(((-1.0)*r21*x2340))+(((-1.0)*r22*x2337))+((cj5*r21*x2338))+((r20*x2339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.35293564015143)*px))+(((-1.0)*r01*x2340))+((cj5*r01*x2338))+((r00*x2339))+(((-1.0)*r02*x2337))+((r00*sj5*x2338))))+IKsqr(((((2.35293564015143)*pz))+((r20*sj5*x2338))+(((-1.0)*r21*x2340))+(((-1.0)*r22*x2337))+((cj5*r21*x2338))+((r20*x2339))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((2.35293564015143)*px))+(((-1.0)*r01*x2340))+((cj5*r01*x2338))+((r00*x2339))+(((-1.0)*r02*x2337))+((r00*sj5*x2338))), ((((2.35293564015143)*pz))+((r20*sj5*x2338))+(((-1.0)*r21*x2340))+(((-1.0)*r22*x2337))+((cj5*r21*x2338))+((r20*x2339))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2341=((0.39225)*sj3);
IkReal x2342=(cj5*r00);
IkReal x2343=((0.39225)*cj4);
IkReal x2344=(r01*sj5);
IkReal x2345=(r21*sj5);
IkReal x2346=(cj5*r20);
IkReal x2347=((0.39225)*sj4);
IkReal x2348=(r20*sj5);
IkReal x2349=(r00*sj5);
IkReal x2350=(cj5*r01);
IkReal x2351=(cj5*r21);
IkReal x2352=((0.03868)*x2342);
IkReal x2353=((0.425001)*(IKsin(j1)));
IkReal x2354=((0.03868)*x2344);
IkReal x2355=((0.03868)*x2345);
IkReal x2356=((0.425001)*(IKcos(j1)));
IkReal x2357=((0.03868)*x2346);
IkReal x2358=(x2352+px);
IkReal x2359=(x2356+x2355);
IkReal x2360=(x2353+x2354);
evalcond[0]=(x2358+(((-1.0)*x2360))+(((-1.0)*r02*x2343))+((x2347*x2349))+((x2347*x2350)));
evalcond[1]=(x2357+(((-1.0)*r22*x2343))+pz+((x2347*x2348))+((x2347*x2351))+(((-1.0)*x2359)));
evalcond[2]=(x2358+(((-1.0)*x2360))+((x2341*x2346))+(((-1.0)*x2341*x2345))+((cj3*x2343*x2348))+((cj3*x2343*x2351))+((cj3*r22*x2347)));
evalcond[3]=(((cj3*r02*x2347))+x2359+((x2341*x2342))+(((-1.0)*x2341*x2344))+(((-1.0)*pz))+((cj3*x2343*x2349))+((cj3*x2343*x2350))+(((-1.0)*x2357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2361=(cj4*sj1);
IkReal x2362=(cj1*cj4);
IkReal x2363=(cj1*cj5*sj4);
IkReal x2364=(r00*sj4*sj5);
IkReal x2365=((1.0)*r20*sj4*sj5);
IkReal x2366=((1.0)*cj5*sj1*sj4);
if( IKabs(((((-1.0)*r21*x2366))+(((-1.0)*r02*x2362))+((r22*x2361))+((cj1*x2364))+((r01*x2363))+(((-1.0)*sj1*x2365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2361))+(((-1.0)*r21*x2363))+(((-1.0)*r01*x2366))+((r22*x2362))+(((-1.0)*cj1*x2365))+(((-1.0)*sj1*x2364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2366))+(((-1.0)*r02*x2362))+((r22*x2361))+((cj1*x2364))+((r01*x2363))+(((-1.0)*sj1*x2365))))+IKsqr((((r02*x2361))+(((-1.0)*r21*x2363))+(((-1.0)*r01*x2366))+((r22*x2362))+(((-1.0)*cj1*x2365))+(((-1.0)*sj1*x2364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2366))+(((-1.0)*r02*x2362))+((r22*x2361))+((cj1*x2364))+((r01*x2363))+(((-1.0)*sj1*x2365))), (((r02*x2361))+(((-1.0)*r21*x2363))+(((-1.0)*r01*x2366))+((r22*x2362))+(((-1.0)*cj1*x2365))+(((-1.0)*sj1*x2364))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2367=IKcos(j2);
IkReal x2368=IKsin(j2);
IkReal x2369=((1.0)*cj5);
IkReal x2370=((1.0)*cj3);
IkReal x2371=((1.0)*cj4);
IkReal x2372=(cj3*cj4);
IkReal x2373=(r21*sj5);
IkReal x2374=(cj5*sj4);
IkReal x2375=(r20*sj5);
IkReal x2376=((0.03868)*cj5);
IkReal x2377=(r00*sj5);
IkReal x2378=(r01*sj5);
IkReal x2379=(cj1*x2367);
IkReal x2380=(sj1*x2368);
IkReal x2381=(cj1*x2368);
IkReal x2382=(sj1*x2367);
IkReal x2383=(x2380+x2379);
evalcond[0]=(x2383+((sj4*x2375))+(((-1.0)*r22*x2371))+((r21*x2374)));
evalcond[1]=((((-1.0)*r02*x2371))+x2382+(((-1.0)*x2381))+((sj4*x2377))+((r01*x2374)));
evalcond[2]=((((0.39225)*x2379))+(((-1.0)*r20*x2376))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2380))+(((0.03868)*x2373)));
evalcond[3]=((((-0.39225)*x2381))+(((-1.0)*r00*x2376))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.39225)*x2382))+(((0.03868)*x2378)));
evalcond[4]=((((-1.0)*r02*sj4*x2370))+x2383+((sj3*x2378))+(((-1.0)*cj4*x2370*x2377))+(((-1.0)*r01*x2369*x2372))+(((-1.0)*r00*sj3*x2369)));
evalcond[5]=(x2381+((sj3*x2373))+(((-1.0)*cj4*x2370*x2375))+(((-1.0)*x2382))+(((-1.0)*r20*sj3*x2369))+(((-1.0)*r22*sj4*x2370))+(((-1.0)*r21*x2369*x2372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2384=(r01*sj0);
IkReal x2385=(cj5*sj4);
IkReal x2386=(sj4*sj5);
IkReal x2387=((0.39225)*sj0);
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(sj0,-2);
if(!x2388.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x2388.value)*(((((-0.39225)*x2384*x2385))+(((-1.0)*r00*x2386*x2387))+(((-0.03868)*cj5*r00*sj0))+((cj4*r02*x2387))+(((0.03868)*sj5*x2384))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((0.9229390048494)*r20*x2386))+(((0.9229390048494)*r21*x2385))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x2388.value)*(((((-0.39225)*x2384*x2385))+(((-1.0)*r00*x2386*x2387))+(((-0.03868)*cj5*r00*sj0))+((cj4*r02*x2387))+(((0.03868)*sj5*x2384))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))))))+IKsqr(((((2.35293564015143)*pz))+(((0.9229390048494)*r20*x2386))+(((0.9229390048494)*r21*x2385))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x2388.value)*(((((-0.39225)*x2384*x2385))+(((-1.0)*r00*x2386*x2387))+(((-0.03868)*cj5*r00*sj0))+((cj4*r02*x2387))+(((0.03868)*sj5*x2384))+(((-0.032446)*cj0*sj0))+(((-1.0)*px*sj0))))), ((((2.35293564015143)*pz))+(((0.9229390048494)*r20*x2386))+(((0.9229390048494)*r21*x2385))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+(((-0.9229390048494)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2389=IKsin(j1);
IkReal x2390=IKcos(j1);
IkReal x2391=cj0*cj0;
IkReal x2392=sj0*sj0;
IkReal x2393=((0.425001)*cj0);
IkReal x2394=((0.39225)*sj5);
IkReal x2395=(cj3*cj4);
IkReal x2396=(cj0*r20);
IkReal x2397=(cj5*r00);
IkReal x2398=((0.03868)*sj0);
IkReal x2399=(sj0*sj4);
IkReal x2400=((0.39225)*sj3);
IkReal x2401=((0.39225)*cj5);
IkReal x2402=(cj0*sj4);
IkReal x2403=(cj5*r10);
IkReal x2404=(r11*sj5);
IkReal x2405=((0.39225)*r22);
IkReal x2406=((1.0)*sj0);
IkReal x2407=((0.03868)*cj0);
IkReal x2408=((0.03868)*cj5);
IkReal x2409=((0.032446)*cj0);
IkReal x2410=(cj0*r21);
IkReal x2411=((0.39225)*r02);
IkReal x2412=(cj0*cj4);
IkReal x2413=(r01*sj5);
IkReal x2414=(cj3*sj4);
IkReal x2415=(r20*sj0);
IkReal x2416=(r21*sj0);
IkReal x2417=((0.39225)*r12);
IkReal x2418=(sj0*x2409);
IkReal x2419=((0.39225)*cj4*sj0);
IkReal x2420=((0.03868)*r21*sj5);
IkReal x2421=((0.425001)*x2389);
IkReal x2422=((0.425001)*x2390);
IkReal x2423=(sj0*x2389*x2393);
evalcond[0]=(((r21*sj4*x2401))+((r20*sj4*x2394))+((r20*x2408))+pz+(((-1.0)*cj4*x2405))+(((-1.0)*x2420))+(((-1.0)*x2422)));
evalcond[1]=((((-1.0)*x2404*x2407))+((x2403*x2407))+x2418+((r10*x2394*x2402))+((r11*x2401*x2402))+(((-1.0)*x2412*x2417))+((cj0*py))+(((-1.0)*x2391*x2421)));
evalcond[2]=((((-1.0)*r00*x2394*x2399))+(((-1.0)*px*x2406))+((x2398*x2413))+(((-1.0)*x2418))+(((-1.0)*r01*x2399*x2401))+(((-1.0)*x2397*x2398))+(((-1.0)*x2392*x2421))+((cj4*sj0*x2411)));
evalcond[3]=(((r01*x2395*x2401))+((cj5*r20*x2398))+(((-1.0)*r21*sj5*x2398))+(((-1.0)*sj0*x2422))+(((-1.0)*r01*sj3*x2394))+((x2397*x2400))+((x2411*x2414))+((r00*x2394*x2395))+((pz*sj0)));
evalcond[4]=((((-1.0)*r11*sj3*x2394))+((r11*x2395*x2401))+((x2414*x2417))+((x2390*x2393))+((r21*sj5*x2407))+((x2400*x2403))+(((-1.0)*x2396*x2408))+((r10*x2394*x2395))+(((-1.0)*cj0*pz)));
evalcond[5]=((((-0.03868)*x2404))+(((-1.0)*x2389*x2393))+(((-1.0)*sj3*x2394*x2410))+(((0.03868)*x2403))+(((0.032446)*sj0))+((x2395*x2401*x2410))+py+((cj3*x2402*x2405))+((cj5*x2396*x2400))+((x2394*x2395*x2396)));
evalcond[6]=((((-1.0)*cj5*x2400*x2415))+x2409+(((-1.0)*cj3*x2399*x2405))+(((-1.0)*x2394*x2395*x2415))+(((0.03868)*x2397))+((sj3*x2394*x2416))+((sj0*x2421))+(((-1.0)*x2395*x2401*x2416))+px+(((-0.03868)*x2413)));
evalcond[7]=(x2423+(((-1.0)*r11*x2399*x2401))+(((-1.0)*x2407*x2413))+(((0.032446)*x2391))+((x2397*x2407))+((cj0*px))+((cj4*sj0*x2417))+(((-1.0)*r10*x2394*x2399)));
evalcond[8]=(((r00*x2394*x2402))+x2423+((r01*x2401*x2402))+(((-1.0)*py*x2406))+(((-0.032446)*x2392))+((x2398*x2404))+(((-1.0)*x2411*x2412))+(((-1.0)*x2398*x2403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2424=(sj1*sj4);
IkReal x2425=(cj5*r01);
IkReal x2426=(cj1*sj4);
IkReal x2427=(cj4*r22);
IkReal x2428=(cj4*r02);
IkReal x2429=(r00*sj5);
IkReal x2430=((1.0)*r20*sj5);
IkReal x2431=((1.0)*cj5*r21);
if( IKabs((((cj1*x2428))+(((-1.0)*x2425*x2426))+((sj1*x2427))+(((-1.0)*x2426*x2429))+(((-1.0)*x2424*x2431))+(((-1.0)*x2424*x2430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2427))+(((-1.0)*x2426*x2430))+(((-1.0)*x2426*x2431))+(((-1.0)*sj1*x2428))+((x2424*x2425))+((x2424*x2429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2428))+(((-1.0)*x2425*x2426))+((sj1*x2427))+(((-1.0)*x2426*x2429))+(((-1.0)*x2424*x2431))+(((-1.0)*x2424*x2430))))+IKsqr((((cj1*x2427))+(((-1.0)*x2426*x2430))+(((-1.0)*x2426*x2431))+(((-1.0)*sj1*x2428))+((x2424*x2425))+((x2424*x2429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2428))+(((-1.0)*x2425*x2426))+((sj1*x2427))+(((-1.0)*x2426*x2429))+(((-1.0)*x2424*x2431))+(((-1.0)*x2424*x2430))), (((cj1*x2427))+(((-1.0)*x2426*x2430))+(((-1.0)*x2426*x2431))+(((-1.0)*sj1*x2428))+((x2424*x2425))+((x2424*x2429))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2432=IKsin(j2);
IkReal x2433=IKcos(j2);
IkReal x2434=((1.0)*cj5);
IkReal x2435=((1.0)*cj3);
IkReal x2436=((1.0)*cj4);
IkReal x2437=(cj3*cj4);
IkReal x2438=(cj5*sj4);
IkReal x2439=(r21*sj5);
IkReal x2440=((1.0)*sj1);
IkReal x2441=(r20*sj5);
IkReal x2442=((0.03868)*cj5);
IkReal x2443=((0.39225)*sj1);
IkReal x2444=(r00*sj5);
IkReal x2445=(r01*sj5);
IkReal x2446=(cj1*x2432);
IkReal x2447=(cj1*x2433);
IkReal x2448=(x2433*x2440);
evalcond[0]=((((-1.0)*r22*x2436))+x2447+((sj4*x2441))+((r21*x2438))+((sj1*x2432)));
evalcond[1]=(x2446+((r01*x2438))+(((-1.0)*r02*x2436))+((sj4*x2444))+(((-1.0)*x2448)));
evalcond[2]=(((x2432*x2443))+(((0.39225)*x2447))+(((-1.0)*r20*x2442))+(((0.03868)*x2439))+(((0.425001)*cj1))+(((-1.0)*pz)));
evalcond[3]=((((0.03868)*x2445))+(((0.39225)*x2446))+(((-1.0)*px))+(((-1.0)*x2433*x2443))+(((-0.425001)*sj1))+(((-1.0)*r00*x2442)));
evalcond[4]=(x2446+(((-1.0)*r20*sj3*x2434))+((sj3*x2439))+(((-1.0)*cj4*x2435*x2441))+(((-1.0)*r21*x2434*x2437))+(((-1.0)*r22*sj4*x2435))+(((-1.0)*x2448)));
evalcond[5]=((((-1.0)*r01*x2434*x2437))+((sj3*x2445))+(((-1.0)*r00*sj3*x2434))+(((-1.0)*cj4*x2435*x2444))+(((-1.0)*x2447))+(((-1.0)*r02*sj4*x2435))+(((-1.0)*x2432*x2440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2449=(cj4*sj1);
IkReal x2450=(cj1*cj4);
IkReal x2451=(cj1*cj5*sj4);
IkReal x2452=(r00*sj4*sj5);
IkReal x2453=((1.0)*r20*sj4*sj5);
IkReal x2454=((1.0)*cj5*sj1*sj4);
if( IKabs((((cj1*x2452))+((r22*x2449))+(((-1.0)*r21*x2454))+(((-1.0)*r02*x2450))+((r01*x2451))+(((-1.0)*sj1*x2453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2449))+(((-1.0)*r21*x2451))+((r22*x2450))+(((-1.0)*sj1*x2452))+(((-1.0)*cj1*x2453))+(((-1.0)*r01*x2454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2452))+((r22*x2449))+(((-1.0)*r21*x2454))+(((-1.0)*r02*x2450))+((r01*x2451))+(((-1.0)*sj1*x2453))))+IKsqr((((r02*x2449))+(((-1.0)*r21*x2451))+((r22*x2450))+(((-1.0)*sj1*x2452))+(((-1.0)*cj1*x2453))+(((-1.0)*r01*x2454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2452))+((r22*x2449))+(((-1.0)*r21*x2454))+(((-1.0)*r02*x2450))+((r01*x2451))+(((-1.0)*sj1*x2453))), (((r02*x2449))+(((-1.0)*r21*x2451))+((r22*x2450))+(((-1.0)*sj1*x2452))+(((-1.0)*cj1*x2453))+(((-1.0)*r01*x2454))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2455=IKcos(j2);
IkReal x2456=IKsin(j2);
IkReal x2457=((1.0)*cj5);
IkReal x2458=((1.0)*cj3);
IkReal x2459=((1.0)*cj4);
IkReal x2460=(cj3*cj4);
IkReal x2461=(r21*sj5);
IkReal x2462=(cj5*sj4);
IkReal x2463=(r20*sj5);
IkReal x2464=((0.03868)*cj5);
IkReal x2465=(r00*sj5);
IkReal x2466=(r01*sj5);
IkReal x2467=(cj1*x2455);
IkReal x2468=(sj1*x2456);
IkReal x2469=(cj1*x2456);
IkReal x2470=(sj1*x2455);
IkReal x2471=(x2467+x2468);
evalcond[0]=(x2471+((r21*x2462))+(((-1.0)*r22*x2459))+((sj4*x2463)));
evalcond[1]=(((r01*x2462))+x2470+(((-1.0)*x2469))+(((-1.0)*r02*x2459))+((sj4*x2465)));
evalcond[2]=((((0.425001)*cj1))+(((0.39225)*x2468))+(((0.39225)*x2467))+(((-1.0)*pz))+(((-1.0)*r20*x2464))+(((0.03868)*x2461)));
evalcond[3]=((((0.39225)*x2470))+(((-1.0)*r00*x2464))+(((-0.39225)*x2469))+(((-1.0)*px))+(((0.425001)*sj1))+(((0.03868)*x2466)));
evalcond[4]=((((-1.0)*r01*x2457*x2460))+x2471+((sj3*x2466))+(((-1.0)*r00*sj3*x2457))+(((-1.0)*cj4*x2458*x2465))+(((-1.0)*r02*sj4*x2458)));
evalcond[5]=((((-1.0)*r20*sj3*x2457))+x2469+(((-1.0)*r21*x2457*x2460))+(((-1.0)*x2470))+((sj3*x2461))+(((-1.0)*cj4*x2458*x2463))+(((-1.0)*r22*sj4*x2458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2472=(cj4*r12);
IkReal x2473=(cj4*r22);
IkReal x2474=(cj5*sj4);
IkReal x2475=((1.0)*r21);
IkReal x2476=((1.0)*sj1);
IkReal x2477=(r10*sj4*sj5);
IkReal x2478=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*sj1*x2474*x2475))+(((-1.0)*cj1*x2472))+((sj1*x2473))+((cj1*r11*x2474))+((cj1*x2477))+(((-1.0)*r20*sj4*sj5*x2476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2474*x2476))+(((-1.0)*cj1*x2474*x2475))+((sj1*x2472))+(((-1.0)*x2476*x2477))+(((-1.0)*cj1*x2478))+((cj1*x2473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x2474*x2475))+(((-1.0)*cj1*x2472))+((sj1*x2473))+((cj1*r11*x2474))+((cj1*x2477))+(((-1.0)*r20*sj4*sj5*x2476))))+IKsqr(((((-1.0)*r11*x2474*x2476))+(((-1.0)*cj1*x2474*x2475))+((sj1*x2472))+(((-1.0)*x2476*x2477))+(((-1.0)*cj1*x2478))+((cj1*x2473))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x2474*x2475))+(((-1.0)*cj1*x2472))+((sj1*x2473))+((cj1*r11*x2474))+((cj1*x2477))+(((-1.0)*r20*sj4*sj5*x2476))), ((((-1.0)*r11*x2474*x2476))+(((-1.0)*cj1*x2474*x2475))+((sj1*x2472))+(((-1.0)*x2476*x2477))+(((-1.0)*cj1*x2478))+((cj1*x2473))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2479=IKcos(j2);
IkReal x2480=IKsin(j2);
IkReal x2481=((1.0)*cj4);
IkReal x2482=(sj3*sj5);
IkReal x2483=(cj5*r21);
IkReal x2484=((0.03868)*sj5);
IkReal x2485=(sj4*sj5);
IkReal x2486=(cj5*r11);
IkReal x2487=((0.03868)*cj5);
IkReal x2488=(cj3*sj5);
IkReal x2489=(cj1*x2479);
IkReal x2490=(sj1*x2480);
IkReal x2491=((1.0)*cj5*sj3);
IkReal x2492=((1.0)*cj3*sj4);
IkReal x2493=(cj1*x2480);
IkReal x2494=(sj1*x2479);
IkReal x2495=(x2489+x2490);
evalcond[0]=((((-1.0)*r22*x2481))+x2495+((sj4*x2483))+((r20*x2485)));
evalcond[1]=(x2494+(((-1.0)*x2493))+((sj4*x2486))+(((-1.0)*r12*x2481))+((r10*x2485)));
evalcond[2]=((((-1.0)*r20*x2487))+(((0.39225)*x2490))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2489))+((r21*x2484)));
evalcond[3]=((((-1.0)*r10*x2487))+(((0.39225)*x2494))+(((-1.0)*py))+((r11*x2484))+(((0.425001)*sj1))+(((-0.39225)*x2493)));
evalcond[4]=(x2495+(((-1.0)*r10*x2491))+(((-1.0)*cj3*x2481*x2486))+((r11*x2482))+(((-1.0)*r10*x2481*x2488))+(((-1.0)*r12*x2492)));
evalcond[5]=(x2493+(((-1.0)*x2494))+(((-1.0)*cj3*x2481*x2483))+(((-1.0)*r20*x2491))+(((-1.0)*r20*x2481*x2488))+((r21*x2482))+(((-1.0)*r22*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2496=(cj1*cj4);
IkReal x2497=((1.0)*sj1);
IkReal x2498=((1.0)*cj1);
IkReal x2499=(cj5*r21*sj4);
IkReal x2500=(cj5*r11*sj4);
IkReal x2501=(r10*sj4*sj5);
IkReal x2502=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*x2498*x2501))+(((-1.0)*x2498*x2500))+(((-1.0)*x2497*x2499))+(((-1.0)*r20*sj4*sj5*x2497))+((cj4*r22*sj1))+((r12*x2496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12*x2497))+((r22*x2496))+(((-1.0)*r20*sj4*sj5*x2498))+((sj1*x2500))+((sj1*x2501))+(((-1.0)*x2498*x2499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2498*x2501))+(((-1.0)*x2498*x2500))+(((-1.0)*x2497*x2499))+(((-1.0)*r20*sj4*sj5*x2497))+((cj4*r22*sj1))+((r12*x2496))))+IKsqr(((((-1.0)*cj4*r12*x2497))+((r22*x2496))+(((-1.0)*r20*sj4*sj5*x2498))+((sj1*x2500))+((sj1*x2501))+(((-1.0)*x2498*x2499))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2498*x2501))+(((-1.0)*x2498*x2500))+(((-1.0)*x2497*x2499))+(((-1.0)*r20*sj4*sj5*x2497))+((cj4*r22*sj1))+((r12*x2496))), ((((-1.0)*cj4*r12*x2497))+((r22*x2496))+(((-1.0)*r20*sj4*sj5*x2498))+((sj1*x2500))+((sj1*x2501))+(((-1.0)*x2498*x2499))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2503=IKsin(j2);
IkReal x2504=IKcos(j2);
IkReal x2505=((1.0)*r20);
IkReal x2506=(cj5*sj3);
IkReal x2507=((1.0)*cj4);
IkReal x2508=(cj3*sj5);
IkReal x2509=(cj5*r21);
IkReal x2510=(r21*sj5);
IkReal x2511=((1.0)*sj1);
IkReal x2512=(sj4*sj5);
IkReal x2513=(cj5*r11);
IkReal x2514=((0.03868)*cj5);
IkReal x2515=((0.39225)*sj1);
IkReal x2516=(r11*sj5);
IkReal x2517=(cj1*x2503);
IkReal x2518=(cj1*x2504);
IkReal x2519=((1.0)*cj3*sj4);
IkReal x2520=(x2504*x2511);
evalcond[0]=(x2518+((sj4*x2509))+((sj1*x2503))+(((-1.0)*r22*x2507))+((r20*x2512)));
evalcond[1]=(x2517+((r10*x2512))+(((-1.0)*r12*x2507))+((sj4*x2513))+(((-1.0)*x2520)));
evalcond[2]=((((0.39225)*x2518))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x2510))+((x2503*x2515))+(((-1.0)*r20*x2514)));
evalcond[3]=((((-1.0)*x2504*x2515))+(((0.39225)*x2517))+(((-1.0)*py))+(((-1.0)*r10*x2514))+(((0.03868)*x2516))+(((-0.425001)*sj1)));
evalcond[4]=(x2517+(((-1.0)*cj4*x2505*x2508))+(((-1.0)*r22*x2519))+(((-1.0)*cj3*x2507*x2509))+((sj3*x2510))+(((-1.0)*x2505*x2506))+(((-1.0)*x2520)));
evalcond[5]=((((-1.0)*r10*x2507*x2508))+(((-1.0)*x2503*x2511))+(((-1.0)*r10*x2506))+(((-1.0)*r12*x2519))+(((-1.0)*x2518))+(((-1.0)*cj3*x2507*x2513))+((sj3*x2516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2521=(cj1*cj5);
IkReal x2522=(cj4*r12);
IkReal x2523=(r20*sj5);
IkReal x2524=(r11*sj4);
IkReal x2525=(cj5*sj1);
IkReal x2526=((1.0)*cj0*sj4);
IkReal x2527=(cj0*cj4*r22);
IkReal x2528=(r10*sj4*sj5);
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal((((cj1*x2528))+(((-1.0)*cj1*x2522))+((sj1*x2527))+(((-1.0)*sj1*x2523*x2526))+((x2521*x2524))+(((-1.0)*r21*x2525*x2526)))),IkReal(((((-1.0)*sj1*x2528))+((cj1*x2527))+(((-1.0)*cj1*x2523*x2526))+(((-1.0)*r21*x2521*x2526))+(((-1.0)*x2524*x2525))+((sj1*x2522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2530.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2529.value)+(((1.5707963267949)*(x2530.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2531=IKsin(j2);
IkReal x2532=IKcos(j2);
IkReal x2533=((1.0)*r20);
IkReal x2534=(cj5*sj3);
IkReal x2535=((1.0)*cj4);
IkReal x2536=(cj3*sj5);
IkReal x2537=(cj3*cj5);
IkReal x2538=(r21*sj5);
IkReal x2539=(cj5*sj4);
IkReal x2540=(sj4*sj5);
IkReal x2541=((0.03868)*cj5);
IkReal x2542=((1.0)*sj0);
IkReal x2543=((0.425001)*sj1);
IkReal x2544=(sj3*sj5);
IkReal x2545=((0.03868)*sj5);
IkReal x2546=(cj1*x2532);
IkReal x2547=((1.0)*cj3*sj4);
IkReal x2548=(cj1*x2531);
IkReal x2549=(sj1*x2531);
IkReal x2550=((0.39225)*sj1*x2532);
IkReal x2551=((1.0)*sj1*x2532);
evalcond[0]=(x2546+x2549+((r21*x2539))+(((-1.0)*r22*x2535))+((r20*x2540)));
evalcond[1]=(((r01*x2539))+(((-1.0)*sj1*x2532*x2542))+(((-1.0)*r02*x2535))+((r00*x2540))+((sj0*x2548)));
evalcond[2]=(((cj0*sj1*x2532))+(((-1.0)*r12*x2535))+(((-1.0)*cj0*x2548))+((r11*x2539))+((r10*x2540)));
evalcond[3]=((((0.425001)*cj1))+(((-1.0)*pz))+(((0.03868)*x2538))+(((-1.0)*r20*x2541))+(((0.39225)*x2546))+(((0.39225)*x2549)));
evalcond[4]=((((-1.0)*sj0*x2543))+(((0.39225)*sj0*x2548))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-1.0)*r00*x2541))+((r01*x2545))+(((-1.0)*sj0*x2550)));
evalcond[5]=((((-0.032446)*sj0))+(((-1.0)*r10*x2541))+((r11*x2545))+(((-0.39225)*cj0*x2548))+(((-1.0)*py))+((cj0*x2550))+((cj0*x2543)));
evalcond[6]=(((sj3*x2538))+(((-1.0)*x2533*x2534))+x2548+(((-1.0)*r22*x2547))+(((-1.0)*x2551))+(((-1.0)*r21*x2535*x2537))+(((-1.0)*cj4*x2533*x2536)));
evalcond[7]=((((-1.0)*r10*x2534))+(((-1.0)*r12*x2547))+(((-1.0)*r11*x2535*x2537))+((r11*x2544))+(((-1.0)*r10*x2535*x2536))+((cj0*x2549))+((cj0*x2546)));
evalcond[8]=((((-1.0)*x2542*x2546))+(((-1.0)*x2542*x2549))+(((-1.0)*r01*x2535*x2537))+(((-1.0)*r00*x2534))+(((-1.0)*r00*x2535*x2536))+((r01*x2544))+(((-1.0)*r02*x2547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2552=((1.0)*sj1);
IkReal x2553=(cj5*sj4);
IkReal x2554=(r21*sj0);
IkReal x2555=(cj4*r02);
IkReal x2556=((1.0)*cj1);
IkReal x2557=(cj4*r22*sj0);
IkReal x2558=(r00*sj4*sj5);
IkReal x2559=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2560=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2560.valid){
continue;
}
CheckValue<IkReal> x2561 = IKatan2WithCheck(IkReal((((cj1*x2555))+(((-1.0)*r01*x2553*x2556))+(((-1.0)*x2556*x2558))+(((-1.0)*x2552*x2559))+(((-1.0)*x2552*x2553*x2554))+((sj1*x2557)))),IkReal((((cj1*x2557))+(((-1.0)*x2556*x2559))+(((-1.0)*x2552*x2555))+((sj1*x2558))+((r01*sj1*x2553))+(((-1.0)*x2553*x2554*x2556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2561.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2560.value)))+(x2561.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2562=IKsin(j2);
IkReal x2563=IKcos(j2);
IkReal x2564=((1.0)*r20);
IkReal x2565=(cj5*sj3);
IkReal x2566=((1.0)*cj4);
IkReal x2567=(cj3*sj5);
IkReal x2568=(cj3*cj5);
IkReal x2569=(r21*sj5);
IkReal x2570=(cj5*sj4);
IkReal x2571=(sj4*sj5);
IkReal x2572=((0.03868)*cj5);
IkReal x2573=((1.0)*sj0);
IkReal x2574=((0.425001)*sj1);
IkReal x2575=(sj3*sj5);
IkReal x2576=((0.03868)*sj5);
IkReal x2577=(cj1*x2563);
IkReal x2578=((1.0)*cj3*sj4);
IkReal x2579=(cj1*x2562);
IkReal x2580=(sj1*x2562);
IkReal x2581=((0.39225)*sj1*x2563);
IkReal x2582=((1.0)*sj1*x2563);
evalcond[0]=(((r21*x2570))+x2580+x2577+(((-1.0)*r22*x2566))+((r20*x2571)));
evalcond[1]=((((-1.0)*r02*x2566))+(((-1.0)*sj1*x2563*x2573))+((r01*x2570))+((r00*x2571))+((sj0*x2579)));
evalcond[2]=(((r10*x2571))+((cj0*sj1*x2563))+((r11*x2570))+(((-1.0)*cj0*x2579))+(((-1.0)*r12*x2566)));
evalcond[3]=((((0.03868)*x2569))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2577))+(((-1.0)*r20*x2572))+(((0.39225)*x2580)));
evalcond[4]=((((-1.0)*sj0*x2574))+(((-1.0)*sj0*x2581))+(((0.39225)*sj0*x2579))+(((-1.0)*px))+((r01*x2576))+(((-0.032446)*cj0))+(((-1.0)*r00*x2572)));
evalcond[5]=((((-1.0)*r10*x2572))+(((-0.032446)*sj0))+(((-0.39225)*cj0*x2579))+((r11*x2576))+((cj0*x2581))+(((-1.0)*py))+((cj0*x2574)));
evalcond[6]=((((-1.0)*r21*x2566*x2568))+x2579+((sj3*x2569))+(((-1.0)*cj4*x2564*x2567))+(((-1.0)*x2582))+(((-1.0)*x2564*x2565))+(((-1.0)*r22*x2578)));
evalcond[7]=((((-1.0)*r11*x2566*x2568))+(((-1.0)*r12*x2578))+((r11*x2575))+((cj0*x2580))+(((-1.0)*r10*x2566*x2567))+((cj0*x2577))+(((-1.0)*r10*x2565)));
evalcond[8]=((((-1.0)*x2573*x2580))+(((-1.0)*r00*x2566*x2567))+(((-1.0)*r01*x2566*x2568))+(((-1.0)*r00*x2565))+((r01*x2575))+(((-1.0)*x2573*x2577))+(((-1.0)*r02*x2578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2583=((0.39225)*cj0);
IkReal x2584=((0.03868)*cj0);
IkReal x2585=((0.9229390048494)*sj4);
CheckValue<IkReal> x2586=IKPowWithIntegerCheck(cj0,-2);
if(!x2586.valid){
continue;
}
if( IKabs(((2.35293564015143)*(x2586.value)*((((cj5*r10*x2584))+(((-1.0)*cj4*r12*x2583))+((r10*sj4*sj5*x2583))+((cj5*r11*sj4*x2583))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x2584))+((cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+((cj5*r21*x2585))+(((-0.9229390048494)*cj4*r22))+((r20*sj5*x2585)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.35293564015143)*(x2586.value)*((((cj5*r10*x2584))+(((-1.0)*cj4*r12*x2583))+((r10*sj4*sj5*x2583))+((cj5*r11*sj4*x2583))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x2584))+((cj0*py))))))+IKsqr(((((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+((cj5*r21*x2585))+(((-0.9229390048494)*cj4*r22))+((r20*sj5*x2585))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2.35293564015143)*(x2586.value)*((((cj5*r10*x2584))+(((-1.0)*cj4*r12*x2583))+((r10*sj4*sj5*x2583))+((cj5*r11*sj4*x2583))+(((0.032446)*cj0*sj0))+(((-1.0)*r11*sj5*x2584))+((cj0*py))))), ((((2.35293564015143)*pz))+(((-0.0910115505610575)*r21*sj5))+(((0.0910115505610575)*cj5*r20))+((cj5*r21*x2585))+(((-0.9229390048494)*cj4*r22))+((r20*sj5*x2585))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2587=IKsin(j1);
IkReal x2588=IKcos(j1);
IkReal x2589=cj0*cj0;
IkReal x2590=sj0*sj0;
IkReal x2591=((0.425001)*cj0);
IkReal x2592=((0.39225)*sj5);
IkReal x2593=(cj3*cj4);
IkReal x2594=(cj0*r20);
IkReal x2595=(cj5*r00);
IkReal x2596=((0.03868)*sj0);
IkReal x2597=(sj0*sj4);
IkReal x2598=((0.39225)*sj3);
IkReal x2599=((0.39225)*cj5);
IkReal x2600=(cj0*sj4);
IkReal x2601=(cj5*r10);
IkReal x2602=(r11*sj5);
IkReal x2603=((0.39225)*r22);
IkReal x2604=((1.0)*sj0);
IkReal x2605=((0.03868)*cj0);
IkReal x2606=((0.03868)*cj5);
IkReal x2607=((0.032446)*cj0);
IkReal x2608=(cj0*r21);
IkReal x2609=((0.39225)*r02);
IkReal x2610=(cj0*cj4);
IkReal x2611=(r01*sj5);
IkReal x2612=(cj3*sj4);
IkReal x2613=(r20*sj0);
IkReal x2614=(r21*sj0);
IkReal x2615=((0.39225)*r12);
IkReal x2616=(sj0*x2607);
IkReal x2617=((0.39225)*cj4*sj0);
IkReal x2618=((0.03868)*r21*sj5);
IkReal x2619=((0.425001)*x2587);
IkReal x2620=((0.425001)*x2588);
IkReal x2621=(sj0*x2587*x2591);
evalcond[0]=(((r20*sj4*x2592))+((r20*x2606))+((r21*sj4*x2599))+(((-1.0)*cj4*x2603))+pz+(((-1.0)*x2620))+(((-1.0)*x2618)));
evalcond[1]=((((-1.0)*x2610*x2615))+((r11*x2599*x2600))+((r10*x2592*x2600))+(((-1.0)*x2589*x2619))+((x2601*x2605))+(((-1.0)*x2602*x2605))+((cj0*py))+x2616);
evalcond[2]=(((x2596*x2611))+(((-1.0)*x2595*x2596))+(((-1.0)*r01*x2597*x2599))+((cj4*sj0*x2609))+(((-1.0)*r00*x2592*x2597))+(((-1.0)*x2616))+(((-1.0)*x2590*x2619))+(((-1.0)*px*x2604)));
evalcond[3]=(((cj5*r20*x2596))+((r00*x2592*x2593))+(((-1.0)*r21*sj5*x2596))+(((-1.0)*r01*sj3*x2592))+((x2609*x2612))+((pz*sj0))+(((-1.0)*sj0*x2620))+((x2595*x2598))+((r01*x2593*x2599)));
evalcond[4]=(((r11*x2593*x2599))+(((-1.0)*r11*sj3*x2592))+((r21*sj5*x2605))+((x2598*x2601))+(((-1.0)*x2594*x2606))+((x2588*x2591))+((x2612*x2615))+(((-1.0)*cj0*pz))+((r10*x2592*x2593)));
evalcond[5]=((((-1.0)*sj3*x2592*x2608))+(((0.03868)*x2601))+(((-0.03868)*x2602))+(((0.032446)*sj0))+(((-1.0)*x2587*x2591))+py+((x2593*x2599*x2608))+((cj5*x2594*x2598))+((x2592*x2593*x2594))+((cj3*x2600*x2603)));
evalcond[6]=((((0.03868)*x2595))+(((-1.0)*cj5*x2598*x2613))+(((-1.0)*cj3*x2597*x2603))+(((-0.03868)*x2611))+(((-1.0)*x2592*x2593*x2613))+((sj3*x2592*x2614))+px+((sj0*x2619))+(((-1.0)*x2593*x2599*x2614))+x2607);
evalcond[7]=((((-1.0)*r10*x2592*x2597))+(((0.032446)*x2589))+((x2595*x2605))+((cj4*sj0*x2615))+(((-1.0)*r11*x2597*x2599))+(((-1.0)*x2605*x2611))+((cj0*px))+x2621);
evalcond[8]=((((-1.0)*x2609*x2610))+(((-1.0)*x2596*x2601))+((x2596*x2602))+((r00*x2592*x2600))+(((-1.0)*py*x2604))+(((-0.032446)*x2590))+((r01*x2599*x2600))+x2621);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2622=(sj1*sj4);
IkReal x2623=(cj5*r01);
IkReal x2624=(cj1*sj4);
IkReal x2625=(cj4*r22);
IkReal x2626=(cj4*r02);
IkReal x2627=(r00*sj5);
IkReal x2628=((1.0)*r20*sj5);
IkReal x2629=((1.0)*cj5*r21);
if( IKabs(((((-1.0)*x2622*x2628))+(((-1.0)*x2622*x2629))+(((-1.0)*x2623*x2624))+(((-1.0)*x2624*x2627))+((cj1*x2626))+((sj1*x2625)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2626))+(((-1.0)*x2624*x2629))+(((-1.0)*x2624*x2628))+((cj1*x2625))+((x2622*x2627))+((x2622*x2623)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2622*x2628))+(((-1.0)*x2622*x2629))+(((-1.0)*x2623*x2624))+(((-1.0)*x2624*x2627))+((cj1*x2626))+((sj1*x2625))))+IKsqr(((((-1.0)*sj1*x2626))+(((-1.0)*x2624*x2629))+(((-1.0)*x2624*x2628))+((cj1*x2625))+((x2622*x2627))+((x2622*x2623))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2622*x2628))+(((-1.0)*x2622*x2629))+(((-1.0)*x2623*x2624))+(((-1.0)*x2624*x2627))+((cj1*x2626))+((sj1*x2625))), ((((-1.0)*sj1*x2626))+(((-1.0)*x2624*x2629))+(((-1.0)*x2624*x2628))+((cj1*x2625))+((x2622*x2627))+((x2622*x2623))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2630=IKsin(j2);
IkReal x2631=IKcos(j2);
IkReal x2632=((1.0)*cj5);
IkReal x2633=((1.0)*cj3);
IkReal x2634=((1.0)*cj4);
IkReal x2635=(cj3*cj4);
IkReal x2636=(cj5*sj4);
IkReal x2637=(r21*sj5);
IkReal x2638=((1.0)*sj1);
IkReal x2639=(r20*sj5);
IkReal x2640=((0.03868)*cj5);
IkReal x2641=((0.39225)*sj1);
IkReal x2642=(r00*sj5);
IkReal x2643=(r01*sj5);
IkReal x2644=(cj1*x2630);
IkReal x2645=(cj1*x2631);
IkReal x2646=(x2631*x2638);
evalcond[0]=(((sj4*x2639))+((sj1*x2630))+((r21*x2636))+(((-1.0)*r22*x2634))+x2645);
evalcond[1]=((((-1.0)*r02*x2634))+((sj4*x2642))+((r01*x2636))+(((-1.0)*x2646))+x2644);
evalcond[2]=((((0.39225)*x2645))+(((0.425001)*cj1))+(((-1.0)*r20*x2640))+(((-1.0)*pz))+(((0.03868)*x2637))+((x2630*x2641)));
evalcond[3]=((((-1.0)*r00*x2640))+(((0.39225)*x2644))+(((-1.0)*px))+(((0.03868)*x2643))+(((-0.425001)*sj1))+(((-1.0)*x2631*x2641)));
evalcond[4]=((((-1.0)*cj4*x2633*x2639))+((sj3*x2637))+(((-1.0)*r22*sj4*x2633))+(((-1.0)*r20*sj3*x2632))+(((-1.0)*x2646))+(((-1.0)*r21*x2632*x2635))+x2644);
evalcond[5]=((((-1.0)*r01*x2632*x2635))+(((-1.0)*cj4*x2633*x2642))+(((-1.0)*x2630*x2638))+((sj3*x2643))+(((-1.0)*r00*sj3*x2632))+(((-1.0)*x2645))+(((-1.0)*r02*sj4*x2633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2647=(cj4*sj1);
IkReal x2648=(cj1*cj4);
IkReal x2649=(cj1*cj5*sj4);
IkReal x2650=(r00*sj4*sj5);
IkReal x2651=((1.0)*r20*sj4*sj5);
IkReal x2652=((1.0)*cj5*sj1*sj4);
if( IKabs((((cj1*x2650))+(((-1.0)*r21*x2652))+((r22*x2647))+((r01*x2649))+(((-1.0)*r02*x2648))+(((-1.0)*sj1*x2651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2652))+(((-1.0)*cj1*x2651))+((r02*x2647))+((r22*x2648))+(((-1.0)*r21*x2649))+(((-1.0)*sj1*x2650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x2650))+(((-1.0)*r21*x2652))+((r22*x2647))+((r01*x2649))+(((-1.0)*r02*x2648))+(((-1.0)*sj1*x2651))))+IKsqr(((((-1.0)*r01*x2652))+(((-1.0)*cj1*x2651))+((r02*x2647))+((r22*x2648))+(((-1.0)*r21*x2649))+(((-1.0)*sj1*x2650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x2650))+(((-1.0)*r21*x2652))+((r22*x2647))+((r01*x2649))+(((-1.0)*r02*x2648))+(((-1.0)*sj1*x2651))), ((((-1.0)*r01*x2652))+(((-1.0)*cj1*x2651))+((r02*x2647))+((r22*x2648))+(((-1.0)*r21*x2649))+(((-1.0)*sj1*x2650))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2653=IKcos(j2);
IkReal x2654=IKsin(j2);
IkReal x2655=((1.0)*cj5);
IkReal x2656=((1.0)*cj3);
IkReal x2657=((1.0)*cj4);
IkReal x2658=(cj3*cj4);
IkReal x2659=(r21*sj5);
IkReal x2660=(cj5*sj4);
IkReal x2661=(r20*sj5);
IkReal x2662=((0.03868)*cj5);
IkReal x2663=(r00*sj5);
IkReal x2664=(r01*sj5);
IkReal x2665=(cj1*x2653);
IkReal x2666=(sj1*x2654);
IkReal x2667=(cj1*x2654);
IkReal x2668=(sj1*x2653);
IkReal x2669=(x2666+x2665);
evalcond[0]=((((-1.0)*r22*x2657))+((sj4*x2661))+((r21*x2660))+x2669);
evalcond[1]=((((-1.0)*x2667))+((sj4*x2663))+(((-1.0)*r02*x2657))+((r01*x2660))+x2668);
evalcond[2]=((((0.39225)*x2665))+(((0.39225)*x2666))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2662))+(((0.03868)*x2659)));
evalcond[3]=((((0.39225)*x2668))+(((-1.0)*r00*x2662))+(((-0.39225)*x2667))+(((0.03868)*x2664))+(((-1.0)*px))+(((0.425001)*sj1)));
evalcond[4]=((((-1.0)*r01*x2655*x2658))+(((-1.0)*cj4*x2656*x2663))+(((-1.0)*r02*sj4*x2656))+((sj3*x2664))+(((-1.0)*r00*sj3*x2655))+x2669);
evalcond[5]=((((-1.0)*x2668))+(((-1.0)*cj4*x2656*x2661))+(((-1.0)*r22*sj4*x2656))+(((-1.0)*r20*sj3*x2655))+((sj3*x2659))+(((-1.0)*r21*x2655*x2658))+x2667);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2670=(cj4*r12);
IkReal x2671=(cj4*r22);
IkReal x2672=(cj5*sj4);
IkReal x2673=((1.0)*r21);
IkReal x2674=((1.0)*sj1);
IkReal x2675=(r10*sj4*sj5);
IkReal x2676=((1.0)*r20*sj4*sj5);
if( IKabs(((((-1.0)*sj1*x2672*x2673))+(((-1.0)*r20*sj4*sj5*x2674))+((sj1*x2671))+((cj1*x2675))+(((-1.0)*cj1*x2670))+((cj1*r11*x2672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2670))+((cj1*x2671))+(((-1.0)*cj1*x2676))+(((-1.0)*x2674*x2675))+(((-1.0)*cj1*x2672*x2673))+(((-1.0)*r11*x2672*x2674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x2672*x2673))+(((-1.0)*r20*sj4*sj5*x2674))+((sj1*x2671))+((cj1*x2675))+(((-1.0)*cj1*x2670))+((cj1*r11*x2672))))+IKsqr((((sj1*x2670))+((cj1*x2671))+(((-1.0)*cj1*x2676))+(((-1.0)*x2674*x2675))+(((-1.0)*cj1*x2672*x2673))+(((-1.0)*r11*x2672*x2674))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x2672*x2673))+(((-1.0)*r20*sj4*sj5*x2674))+((sj1*x2671))+((cj1*x2675))+(((-1.0)*cj1*x2670))+((cj1*r11*x2672))), (((sj1*x2670))+((cj1*x2671))+(((-1.0)*cj1*x2676))+(((-1.0)*x2674*x2675))+(((-1.0)*cj1*x2672*x2673))+(((-1.0)*r11*x2672*x2674))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2677=IKcos(j2);
IkReal x2678=IKsin(j2);
IkReal x2679=((1.0)*cj4);
IkReal x2680=(sj3*sj5);
IkReal x2681=(cj5*r21);
IkReal x2682=((0.03868)*sj5);
IkReal x2683=(sj4*sj5);
IkReal x2684=(cj5*r11);
IkReal x2685=((0.03868)*cj5);
IkReal x2686=(cj3*sj5);
IkReal x2687=(cj1*x2677);
IkReal x2688=(sj1*x2678);
IkReal x2689=((1.0)*cj5*sj3);
IkReal x2690=((1.0)*cj3*sj4);
IkReal x2691=(cj1*x2678);
IkReal x2692=(sj1*x2677);
IkReal x2693=(x2688+x2687);
evalcond[0]=(((sj4*x2681))+((r20*x2683))+(((-1.0)*r22*x2679))+x2693);
evalcond[1]=((((-1.0)*r12*x2679))+((r10*x2683))+((sj4*x2684))+(((-1.0)*x2691))+x2692);
evalcond[2]=((((0.425001)*cj1))+((r21*x2682))+(((-1.0)*pz))+(((-1.0)*r20*x2685))+(((0.39225)*x2687))+(((0.39225)*x2688)));
evalcond[3]=(((r11*x2682))+(((-1.0)*py))+(((0.425001)*sj1))+(((0.39225)*x2692))+(((-1.0)*r10*x2685))+(((-0.39225)*x2691)));
evalcond[4]=(((r11*x2680))+(((-1.0)*r10*x2679*x2686))+(((-1.0)*cj3*x2679*x2684))+(((-1.0)*r12*x2690))+(((-1.0)*r10*x2689))+x2693);
evalcond[5]=((((-1.0)*r20*x2679*x2686))+((r21*x2680))+(((-1.0)*r22*x2690))+(((-1.0)*cj3*x2679*x2681))+(((-1.0)*x2692))+(((-1.0)*r20*x2689))+x2691);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2694=(cj1*cj4);
IkReal x2695=((1.0)*sj1);
IkReal x2696=((1.0)*cj1);
IkReal x2697=(cj5*r21*sj4);
IkReal x2698=(cj5*r11*sj4);
IkReal x2699=(r10*sj4*sj5);
IkReal x2700=((1.0)*r20*sj4*sj5);
if( IKabs((((r12*x2694))+(((-1.0)*x2696*x2699))+(((-1.0)*x2696*x2698))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x2695))+(((-1.0)*x2695*x2697)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*r12*x2695))+((r22*x2694))+(((-1.0)*x2696*x2697))+((sj1*x2698))+((sj1*x2699))+(((-1.0)*r20*sj4*sj5*x2696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x2694))+(((-1.0)*x2696*x2699))+(((-1.0)*x2696*x2698))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x2695))+(((-1.0)*x2695*x2697))))+IKsqr(((((-1.0)*cj4*r12*x2695))+((r22*x2694))+(((-1.0)*x2696*x2697))+((sj1*x2698))+((sj1*x2699))+(((-1.0)*r20*sj4*sj5*x2696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r12*x2694))+(((-1.0)*x2696*x2699))+(((-1.0)*x2696*x2698))+((cj4*r22*sj1))+(((-1.0)*r20*sj4*sj5*x2695))+(((-1.0)*x2695*x2697))), ((((-1.0)*cj4*r12*x2695))+((r22*x2694))+(((-1.0)*x2696*x2697))+((sj1*x2698))+((sj1*x2699))+(((-1.0)*r20*sj4*sj5*x2696))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2701=IKsin(j2);
IkReal x2702=IKcos(j2);
IkReal x2703=((1.0)*r20);
IkReal x2704=(cj5*sj3);
IkReal x2705=((1.0)*cj4);
IkReal x2706=(cj3*sj5);
IkReal x2707=(cj5*r21);
IkReal x2708=(r21*sj5);
IkReal x2709=((1.0)*sj1);
IkReal x2710=(sj4*sj5);
IkReal x2711=(cj5*r11);
IkReal x2712=((0.03868)*cj5);
IkReal x2713=((0.39225)*sj1);
IkReal x2714=(r11*sj5);
IkReal x2715=(cj1*x2701);
IkReal x2716=(cj1*x2702);
IkReal x2717=((1.0)*cj3*sj4);
IkReal x2718=(x2702*x2709);
evalcond[0]=(x2716+(((-1.0)*r22*x2705))+((sj4*x2707))+((sj1*x2701))+((r20*x2710)));
evalcond[1]=(x2715+(((-1.0)*x2718))+(((-1.0)*r12*x2705))+((r10*x2710))+((sj4*x2711)));
evalcond[2]=(((x2701*x2713))+(((-1.0)*r20*x2712))+(((0.03868)*x2708))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2716)));
evalcond[3]=((((-1.0)*r10*x2712))+(((-1.0)*py))+(((-1.0)*x2702*x2713))+(((0.39225)*x2715))+(((-0.425001)*sj1))+(((0.03868)*x2714)));
evalcond[4]=(x2715+(((-1.0)*x2718))+(((-1.0)*cj3*x2705*x2707))+(((-1.0)*cj4*x2703*x2706))+(((-1.0)*r22*x2717))+((sj3*x2708))+(((-1.0)*x2703*x2704)));
evalcond[5]=((((-1.0)*x2716))+(((-1.0)*r10*x2705*x2706))+((sj3*x2714))+(((-1.0)*cj3*x2705*x2711))+(((-1.0)*x2701*x2709))+(((-1.0)*r10*x2704))+(((-1.0)*r12*x2717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2719=(cj1*cj5);
IkReal x2720=(cj4*r12);
IkReal x2721=(r20*sj5);
IkReal x2722=(r11*sj4);
IkReal x2723=(cj5*sj1);
IkReal x2724=((1.0)*cj0*sj4);
IkReal x2725=(cj0*cj4*r22);
IkReal x2726=(r10*sj4*sj5);
CheckValue<IkReal> x2727=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2727.valid){
continue;
}
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal((((cj1*x2726))+((x2719*x2722))+((sj1*x2725))+(((-1.0)*cj1*x2720))+(((-1.0)*r21*x2723*x2724))+(((-1.0)*sj1*x2721*x2724)))),IkReal(((((-1.0)*cj1*x2721*x2724))+((cj1*x2725))+(((-1.0)*x2722*x2723))+(((-1.0)*sj1*x2726))+((sj1*x2720))+(((-1.0)*r21*x2719*x2724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2727.value)))+(x2728.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2729=IKsin(j2);
IkReal x2730=IKcos(j2);
IkReal x2731=((1.0)*r20);
IkReal x2732=(cj5*sj3);
IkReal x2733=((1.0)*cj4);
IkReal x2734=(cj3*sj5);
IkReal x2735=(cj3*cj5);
IkReal x2736=(r21*sj5);
IkReal x2737=(cj5*sj4);
IkReal x2738=(sj4*sj5);
IkReal x2739=((0.03868)*cj5);
IkReal x2740=((1.0)*sj0);
IkReal x2741=((0.425001)*sj1);
IkReal x2742=(sj3*sj5);
IkReal x2743=((0.03868)*sj5);
IkReal x2744=(cj1*x2730);
IkReal x2745=((1.0)*cj3*sj4);
IkReal x2746=(cj1*x2729);
IkReal x2747=(sj1*x2729);
IkReal x2748=((0.39225)*sj1*x2730);
IkReal x2749=((1.0)*sj1*x2730);
evalcond[0]=(x2744+x2747+((r21*x2737))+(((-1.0)*r22*x2733))+((r20*x2738)));
evalcond[1]=((((-1.0)*sj1*x2730*x2740))+((r01*x2737))+((r00*x2738))+((sj0*x2746))+(((-1.0)*r02*x2733)));
evalcond[2]=((((-1.0)*cj0*x2746))+(((-1.0)*r12*x2733))+((r10*x2738))+((r11*x2737))+((cj0*sj1*x2730)));
evalcond[3]=((((0.03868)*x2736))+(((0.425001)*cj1))+(((-1.0)*pz))+(((0.39225)*x2747))+(((0.39225)*x2744))+(((-1.0)*r20*x2739)));
evalcond[4]=((((-1.0)*px))+(((0.39225)*sj0*x2746))+((r01*x2743))+(((-0.032446)*cj0))+(((-1.0)*r00*x2739))+(((-1.0)*sj0*x2748))+(((-1.0)*sj0*x2741)));
evalcond[5]=((((-0.032446)*sj0))+((r11*x2743))+((cj0*x2741))+((cj0*x2748))+(((-0.39225)*cj0*x2746))+(((-1.0)*py))+(((-1.0)*r10*x2739)));
evalcond[6]=(x2746+(((-1.0)*cj4*x2731*x2734))+((sj3*x2736))+(((-1.0)*x2731*x2732))+(((-1.0)*r21*x2733*x2735))+(((-1.0)*x2749))+(((-1.0)*r22*x2745)));
evalcond[7]=((((-1.0)*r10*x2733*x2734))+((r11*x2742))+((cj0*x2744))+((cj0*x2747))+(((-1.0)*r11*x2733*x2735))+(((-1.0)*r12*x2745))+(((-1.0)*r10*x2732)));
evalcond[8]=((((-1.0)*r00*x2733*x2734))+(((-1.0)*r01*x2733*x2735))+(((-1.0)*x2740*x2747))+(((-1.0)*x2740*x2744))+(((-1.0)*r00*x2732))+((r01*x2742))+(((-1.0)*r02*x2745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2750=((1.0)*sj1);
IkReal x2751=(cj5*sj4);
IkReal x2752=(r21*sj0);
IkReal x2753=(cj4*r02);
IkReal x2754=((1.0)*cj1);
IkReal x2755=(cj4*r22*sj0);
IkReal x2756=(r00*sj4*sj5);
IkReal x2757=(r20*sj0*sj4*sj5);
CheckValue<IkReal> x2758 = IKatan2WithCheck(IkReal(((((-1.0)*x2750*x2751*x2752))+(((-1.0)*r01*x2751*x2754))+(((-1.0)*x2750*x2757))+((sj1*x2755))+((cj1*x2753))+(((-1.0)*x2754*x2756)))),IkReal((((r01*sj1*x2751))+(((-1.0)*x2751*x2752*x2754))+(((-1.0)*x2750*x2753))+((sj1*x2756))+((cj1*x2755))+(((-1.0)*x2754*x2757)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2759.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2758.value)+(((1.5707963267949)*(x2759.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2760=IKsin(j2);
IkReal x2761=IKcos(j2);
IkReal x2762=((1.0)*r20);
IkReal x2763=(cj5*sj3);
IkReal x2764=((1.0)*cj4);
IkReal x2765=(cj3*sj5);
IkReal x2766=(cj3*cj5);
IkReal x2767=(r21*sj5);
IkReal x2768=(cj5*sj4);
IkReal x2769=(sj4*sj5);
IkReal x2770=((0.03868)*cj5);
IkReal x2771=((1.0)*sj0);
IkReal x2772=((0.425001)*sj1);
IkReal x2773=(sj3*sj5);
IkReal x2774=((0.03868)*sj5);
IkReal x2775=(cj1*x2761);
IkReal x2776=((1.0)*cj3*sj4);
IkReal x2777=(cj1*x2760);
IkReal x2778=(sj1*x2760);
IkReal x2779=((0.39225)*sj1*x2761);
IkReal x2780=((1.0)*sj1*x2761);
evalcond[0]=(x2778+x2775+((r20*x2769))+((r21*x2768))+(((-1.0)*r22*x2764)));
evalcond[1]=(((r00*x2769))+((r01*x2768))+(((-1.0)*sj1*x2761*x2771))+(((-1.0)*r02*x2764))+((sj0*x2777)));
evalcond[2]=((((-1.0)*r12*x2764))+(((-1.0)*cj0*x2777))+((cj0*sj1*x2761))+((r10*x2769))+((r11*x2768)));
evalcond[3]=((((0.39225)*x2775))+(((0.39225)*x2778))+(((0.03868)*x2767))+(((0.425001)*cj1))+(((-1.0)*pz))+(((-1.0)*r20*x2770)));
evalcond[4]=(((r01*x2774))+(((-1.0)*r00*x2770))+(((0.39225)*sj0*x2777))+(((-1.0)*px))+(((-0.032446)*cj0))+(((-1.0)*sj0*x2779))+(((-1.0)*sj0*x2772)));
evalcond[5]=((((-1.0)*r10*x2770))+(((-0.032446)*sj0))+((r11*x2774))+((cj0*x2779))+((cj0*x2772))+(((-1.0)*py))+(((-0.39225)*cj0*x2777)));
evalcond[6]=((((-1.0)*x2780))+x2777+(((-1.0)*x2762*x2763))+((sj3*x2767))+(((-1.0)*r21*x2764*x2766))+(((-1.0)*cj4*x2762*x2765))+(((-1.0)*r22*x2776)));
evalcond[7]=((((-1.0)*r10*x2763))+(((-1.0)*r10*x2764*x2765))+(((-1.0)*r11*x2764*x2766))+((r11*x2773))+((cj0*x2778))+((cj0*x2775))+(((-1.0)*r12*x2776)));
evalcond[8]=(((r01*x2773))+(((-1.0)*r00*x2764*x2765))+(((-1.0)*r02*x2776))+(((-1.0)*r00*x2763))+(((-1.0)*x2771*x2778))+(((-1.0)*x2771*x2775))+(((-1.0)*r01*x2764*x2766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "e210ce903d5106f1a5ea0f45eefb72e8"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
